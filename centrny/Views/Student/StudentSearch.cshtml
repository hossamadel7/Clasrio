@using centrny.Controllers
@inject Microsoft.Extensions.Localization.IStringLocalizerFactory LocalizerFactory
@model StudentSearchViewModel

@{
    var Localizer = LocalizerFactory.Create("Register", System.Reflection.Assembly.GetExecutingAssembly().GetName().Name);
    ViewData["Title"] = Localizer["Title_FindProfile"];
    Layout = null;
    var currentCulture = System.Threading.Thread.CurrentThread.CurrentUICulture.Name;
    var isRtl = currentCulture.StartsWith("ar");
}

<!DOCTYPE html>
<html lang="@currentCulture" dir="@(isRtl ? "rtl" : "ltr")">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - @Model.RootName</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />
   <style>
    body {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .search-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
    }

    .search-card {
        background: white;
        border-radius: 20px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        max-width: 800px;
        width: 100%;
    }

    .search-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        text-align: center;
        padding: 40px 30px;
    }

        .search-header h1 {
            margin: 0;
            font-size: 2rem;
            font-weight: 600;
        }

        .search-header p {
            margin: 10px 0 0 0;
            opacity: 0.9;
            font-size: 1.1rem;
        }

    .item-key-display {
        background: rgba(255, 255, 255, 0.2);
        border-radius: 10px;
        padding: 10px 15px;
        margin-top: 20px;
        font-weight: 600;
    }

    .search-body {
        padding: 40px 30px;
    }

    .search-section {
        background: #f8f9fa;
        border-radius: 15px;
        padding: 30px;
        margin-bottom: 30px;
    }

    .form-label {
        font-weight: 600;
        color: #333;
        margin-bottom: 8px;
    }

    .form-control {
        border: 2px solid #e1e5e9;
        border-radius: 10px;
        padding: 12px 15px;
        font-size: 1rem;
        transition: all 0.3s ease;
    }

        .form-control:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        border-radius: 10px;
        padding: 12px 25px;
        font-size: 1rem;
        font-weight: 600;
        transition: all 0.3s ease;
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 15px rgba(102, 126, 234, 0.3);
        }

    .btn-success {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        border: none;
        border-radius: 8px;
        padding: 8px 15px;
        font-size: 0.9rem;
        font-weight: 600;
        transition: all 0.3s ease;
    }

        .btn-success:hover {
            transform: translateY(-1px);
            box-shadow: 0 5px 10px rgba(40, 167, 69, 0.3);
        }

    .btn-outline-primary {
        border: 2px solid #667eea;
        border-radius: 10px;
        padding: 12px 25px;
        font-size: 1rem;
        font-weight: 600;
        color: #667eea;
    }

    .student-card {
        background: white;
        border: 2px solid #e1e5e9;
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 15px;
        transition: all 0.3s ease;
    }

        .student-card:hover {
            border-color: #667eea;
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }

    .student-info {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        margin-bottom: 15px;
    }

    .info-item {
        display: flex;
        flex-direction: column;
    }

    .info-label {
        font-size: 0.85rem;
        font-weight: 600;
        color: #6c757d;
        margin-bottom: 3px;
    }

    .info-value {
        font-size: 1rem;
        color: #495057;
        font-weight: 500;
    }

    .alert {
        border-radius: 10px;
        border: none;
    }

    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
    }

    .instructions {
        background: #e7f3ff;
        border-left: 4px solid #007bff;
        padding: 20px;
        margin-bottom: 30px;
        border-radius: 0 10px 10px 0;
    }

        .instructions h5 {
            color: #007bff;
            margin-bottom: 15px;
        }

        .instructions ul {
            margin: 0;
            padding-left: 20px;
        }

        .instructions li {
            margin-bottom: 8px;
            color: #495057;
        }

    .no-results {
        text-align: center;
        padding: 40px 20px;
        color: #6c757d;
    }

        .no-results i {
            font-size: 3rem;
            margin-bottom: 20px;
            opacity: 0.5;
        }

    #loadingSpinner {
        display: none;
    }

    /* Language toggle switch styles */
    .lang-toggle-switch {
        margin-top: 16px;
        margin-bottom: 16px;
        text-align: center;
    }

    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 28px;
    }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
        border-radius: 28px;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 22px;
            width: 22px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

    input:checked + .slider {
        background-color: #2196F3;
    }

        input:checked + .slider:before {
            transform: translateX(32px);
        }

    .lang-label {
        position: absolute;
        top: 3px;
        font-size: 1rem;
        font-weight: bold;
    }

    .lang-en {
        left: 8px;
        color: #2196F3;
    }

    .lang-ar {
        right: 8px;
        color: #2196F3;
    }
</style>
</head>

<body>
    <!-- Language Toggle Switch -->
    <div class="lang-toggle-switch">
        <form id="langForm" method="post" action="/Home/SetLanguage" style="display:inline;">
            <input type="hidden" name="culture" id="langHiddenInput" value="@(currentCulture.StartsWith("ar") ? "ar" : "en")" />
            <label class="switch">
                <input type="checkbox" id="langSwitch" @(currentCulture.StartsWith("ar") ? "checked" : "")>
                <span class="slider"></span>
                <span class="lang-label lang-en">EN</span>
                <span class="lang-label lang-ar">AR</span>
            </label>
        </form>
    </div>

    <div class="search-container">
        <div class="search-card">
            <!-- Header -->
            <div class="search-header">
                <i class="fas fa-search fa-3x mb-3"></i>
                <h1>@Localizer["Title_FindProfile"]</h1>
                <p>@Localizer["Header_LinkProfile"]</p>
                <div class="item-key-display">
                    @Localizer["Label_ItemKey"]: @Model.ItemKey
                </div>
            </div>

            <!-- Body -->
            <div class="search-body">
                <!-- Instructions -->
                <div class="instructions">
                    <h5><i class="fas fa-info-circle me-2"></i>@Localizer["Instructions_Title"]</h5>
                    <ul>
                        <li>@Localizer["Instruction_1"]</li>
                        <li>@string.Format(Localizer["Instruction_2"], @Model.RootName)</li>
                        <li>@Localizer["Instruction_3"]</li>
                        <li>@Localizer["Instruction_4"]</li>
                    </ul>
                </div>

                <!-- Search Form -->
                <div class="search-section">
                    <h5 class="mb-3"><i class="fas fa-phone me-2"></i>@Localizer["Label_EnterPhone"]</h5>
                    <form id="searchForm">
                        <div class="row align-items-end">
                            <div class="col-md-8">
                                <label class="form-label" for="studentPhone">
                                    @Localizer["Label_PhoneNumber"] <span class="text-danger">*</span>
                                </label>
                                <input type="tel" class="form-control" id="studentPhone"
                                       placeholder="@Localizer["Placeholder_Phone"]" required maxlength="20">
                                <div class="invalid-feedback"></div>
                            </div>
                            <div class="col-md-4">
                                <button type="submit" class="btn btn-primary w-100" id="searchBtn">
                                    <i class="fas fa-search me-2"></i>@Localizer["Btn_Search"]
                                </button>
                            </div>
                        </div>
                    </form>
                </div>

                <!-- Loading Spinner -->
                <div id="loadingSpinner" class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">@Localizer["Loading_Searching"]</span>
                    </div>
                    <p class="mt-2 mb-0">@Localizer["Loading_Searching"]</p>
                </div>

                <!-- Error Message -->
                <div id="errorMessage" class="alert alert-danger" style="display: none;">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <span id="errorText"></span>
                </div>

                <!-- Search Results -->
                <div id="searchResults" style="display: none;">
                    <h5 class="mb-3"><i class="fas fa-user-check me-2"></i>@Localizer["Title_FoundProfiles"]</h5>
                    <div id="studentsList"></div>
                </div>

                <!-- No Results -->
                <div id="noResults" style="display: none;">
                    <div class="no-results">
                        <i class="fas fa-user-slash"></i>
                        <h5>@Localizer["NoProfile_Title"]</h5>
                        <p>@Localizer["NoProfile_Description"]</p>
                        <div class="mt-3">
                            <a href="/Register/@Model.RootCode" class="btn btn-outline-primary">
                                <i class="fas fa-user-plus me-2"></i>@Localizer["Btn_CreateProfile"]
                            </a>
                        </div>
                    </div>
                </div>

                <!-- Alternative Action -->
                <div class="text-center mt-4">
                    <small class="text-muted">
                        @Localizer["Alt_DontHaveProfile"]
                        <a href="/Register/@Model.RootCode" class="text-decoration-none">
                            <i class="fas fa-user-plus me-1"></i>@Localizer["Alt_CreateOneHere"]
                        </a>
                    </small>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <!-- SweetAlert2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        const itemKey = '@Model.ItemKey';
        // Localized messages used in JS:
        const requiredMsg = "@Localizer["Validation_Required"]";
        const validPhoneMsg = "@Localizer["Validation_ValidPhone"]";
        const loadingMsg = "@Localizer["Loading_Searching"]";
        const errorSearchFailed = "@Localizer["Error_SearchFailed"]";
        const errorNetwork = "@Localizer["Error_Network"]";
        const dialogConfirmLink = "@Localizer["Dialog_ConfirmLink"]";
        const linkSuccessMsg = "@Localizer["Success_Linked"]";
        const linkErrorMsg = "@Localizer["Error_LinkFailed"]";

        // For dynamic card generation in JS
        const labelName = "@Localizer["Label_Name"]";
        const labelStudentPhone = "@Localizer["Label_StudentPhone"]";
        const labelParentPhone = "@Localizer["Label_ParentPhone"]";
        const labelBirthDate = "@Localizer["Label_BirthDate"]";
        const labelAge = "@Localizer["Label_Age"]";
        const labelGender = "@Localizer["Label_Gender"]";
        const labelBranch = "@Localizer["Label_Branch"]";
        const labelYearName = "@Localizer["Label_YearName"]";
        const labelRegistrationDate = "@Localizer["Label_RegistrationDate"]";
        const btnLinkProfile = "@Localizer["Btn_LinkProfile"]";
        const btnSearch = "@Localizer["Btn_Search"]";

        document.getElementById('searchForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            await searchStudents();
        });

        async function searchStudents() {
            const phoneInput = document.getElementById('studentPhone');
            const phone = phoneInput.value.trim();

            if (!phone) {
                showError(requiredMsg);
                return;
            }

            // Show loading
            showLoading(true);
            hideMessages();

            try {
                const response = await fetch('/Student/SearchByPhone', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        ItemKey: itemKey,
                        StudentPhone: phone
                    })
                });

                const result = await response.json();

                if (result.success) {
                    if (result.students && result.students.length > 0) {
                        showStudents(result.students);
                    } else {
                        showNoResults();
                    }
                } else {
                    let errorMessage = result.error || errorSearchFailed;
                    if (result.debug && result.debug.length > 0) {
                        errorMessage += '\n\nDebug Info:\n' + result.debug.join('\n');
                    }
                    showError(errorMessage);
                }
            } catch (error) {
                showError(errorNetwork + "\n\nTechnical details: " + error.message);
            } finally {
                showLoading(false);
            }
        }

        function showStudents(students) {
            const container = document.getElementById('studentsList');
            container.innerHTML = '';

            students.forEach(student => {
                const studentCard = createStudentCard(student);
                container.appendChild(studentCard);
            });

            document.getElementById('searchResults').style.display = 'block';
        }

        function createStudentCard(student) {
            const card = document.createElement('div');
            card.className = 'student-card';

            card.innerHTML = `
                <div class="student-info">
                    <div class="info-item">
                        <span class="info-label">${labelName}</span>
                        <span class="info-value">${student.studentName}</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">${labelStudentPhone}</span>
                        <span class="info-value">${student.studentPhone}</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">${labelParentPhone}</span>
                        <span class="info-value">${student.studentParentPhone}</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">${labelBirthDate}</span>
                        <span class="info-value">${student.birthDate} (${labelAge}: ${student.age})</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">${labelGender}</span>
                        <span class="info-value">${student.gender}</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">${labelBranch}</span>
                        <span class="info-value">${student.branchName}</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">${labelYearName}</span>
                        <span class="info-value">${student.yearName}</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">${labelRegistrationDate}</span>
                        <span class="info-value">${student.subscriptionDate}</span>
                    </div>
                </div>
                <div class="text-end">
                    <button type="button" class="btn btn-success" onclick="linkStudent(${student.studentCode}, '${student.studentName.replace(/'/g, "\\'")}')">
                        <i class="fas fa-link me-2"></i>${btnLinkProfile}
                    </button>
                </div>
            `;

            return card;
        }

        // global function
        window.linkStudent = async function(studentCode, studentName) {
            // SweetAlert2 confirmation
            const result = await Swal.fire({
                title: dialogConfirmLink.replace("{0}", studentName),
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: "@Localizer["Btn_Confirm"]",
                cancelButtonText: "@Localizer["Btn_Cancel"]"
            });
            if (!result.isConfirmed) {
                return;
            }

            try {
                showLoading(true);
                hideMessages();

                const response = await fetch('/Student/LinkStudent', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        ItemKey: itemKey,
                        StudentCode: studentCode
                    })
                });

                const resultData = await response.json();

                if (resultData.success) {
                    // Show SweetAlert2 success, then redirect
                    await Swal.fire({
                        title: linkSuccessMsg,
                        text: resultData.message,
                        icon: 'success',
                        confirmButtonText: "@Localizer["Btn_OK"]"
                    });
                    window.location.href = resultData.redirectUrl;
                } else {
                    Swal.fire({
                        title: linkErrorMsg,
                        text: resultData.error || linkErrorMsg,
                        icon: 'error',
                        confirmButtonText: "@Localizer["Btn_OK"]"
                    });
                }
            } catch (error) {
                Swal.fire({
                    title: linkErrorMsg,
                    text: linkErrorMsg,
                    icon: 'error',
                    confirmButtonText: "@Localizer["Btn_OK"]"
                });
            } finally {
                showLoading(false);
            }
        };

        function showLoading(show) {
            document.getElementById('loadingSpinner').style.display = show ? 'block' : 'none';
            document.getElementById('searchBtn').disabled = show;
            if (show) {
                document.getElementById('searchBtn').innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>' + loadingMsg;
            } else {
                document.getElementById('searchBtn').innerHTML = '<i class="fas fa-search me-2"></i>' + btnSearch;
            }
        }

        function showError(message) {
            // SweetAlert2 error alert
            Swal.fire({
                title: "@Localizer["Error_Title"]",
                text: message,
                icon: 'error',
                confirmButtonText: "@Localizer["Btn_OK"]"
            });
            document.getElementById('errorText').textContent = message;
            document.getElementById('errorMessage').style.display = 'block';
        }

        function showNoResults() {
            document.getElementById('noResults').style.display = 'block';
        }

        function hideMessages() {
            document.getElementById('errorMessage').style.display = 'none';
            document.getElementById('searchResults').style.display = 'none';
            document.getElementById('noResults').style.display = 'none';
        }

        // Language switcher script
        document.addEventListener('DOMContentLoaded', function() {
            var langSwitch = document.getElementById('langSwitch');
            var langForm = document.getElementById('langForm');
            var langHiddenInput = document.getElementById('langHiddenInput');
            if(langSwitch) {
                langSwitch.addEventListener('change', function() {
                    langHiddenInput.value = langSwitch.checked ? 'ar' : 'en';
                    langForm.submit();
                });
            }
        });
    </script>
</body>
</html>