@model centrny.Controllers.StudentProfileViewModel

@{
    ViewData["Title"] = $"Student Profile - {Model.StudentName}";
}

<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />

<link href="~/css/student-profile.css" rel="stylesheet" />

<div class="container-fluid student-profile-page">
    <div class="profile-container">
        <!-- Enhanced Profile Header -->
        <div class="profile-header">
            <div class="header-layout">
                <!-- Left Side Info Cards -->
                <div class="left-info-cards">
                    <div class="header-info-card">
                        <div class="card-content">
                            <div class="card-icon">
                                <i class="fas fa-graduation-cap"></i>
                            </div>
                            <div class="card-text">
                                <span class="card-label">Academic Year</span>
                                <div class="card-value">@(Model.YearName ?? "N/A")</div>
                            </div>
                        </div>
                    </div>
                    <div class="header-info-card">
                        <div class="card-content">
                            <div class="card-icon">
                                <i class="fas fa-building"></i>
                            </div>
                            <div class="card-text">
                                <span class="card-label">Branch</span>
                                <div class="card-value">@(Model.BranchName ?? "N/A")</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Main Profile Section -->
                <div class="main-profile">
                    <div class="profile-avatar">
                        <i class="fas fa-user-graduate"></i>
                    </div>
                    <h1 class="profile-name">@Model.StudentName</h1>
                    <p class="profile-subtitle">@Model.YearName @(!string.IsNullOrEmpty(Model.LevelName) ? $"- {Model.LevelName}" : "") Student</p>
                    <div class="profile-status">
                        <i class="fas @(Model.IsActive ? "fa-check-circle" : "fa-times-circle")"></i>
                        <span>@(Model.IsActive ? "Active Student" : "Inactive Student")</span>
                    </div>
                </div>

                <!-- Right Side Info Cards -->
                <div class="right-info-cards">
                    <div class="header-info-card">
                        <div class="card-content">
                            <div class="card-icon">
                                <i class="fas fa-phone-alt"></i>
                            </div>
                            <div class="card-text">
                                <span class="card-label">Parent Phone</span>
                                <div class="card-value">@Model.StudentParentPhone</div>
                            </div>
                        </div>
                    </div>
                    <div class="header-info-card">
                        <div class="card-content">
                            <div class="card-icon">
                                <i class="fas fa-phone"></i>
                            </div>
                            <div class="card-text">
                                <span class="card-label">Student Phone</span>
                                <div class="card-value">@Model.StudentPhone</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Profile Content -->
        <div class="profile-content">
            <!-- Alert Container -->
            <div id="alertContainer"></div>

            <!-- Upcoming Classes Section -->
            <div class="section-card">
                <div class="section-header">
                    <h2 class="section-title">
                        <i class="fas fa-clock"></i>
                        Today's Classes
                        @if (Model.CanMarkAttendance)
                        {
                            <span class="admin-badge">Admin View</span>
                        }
                    </h2>
                </div>
                <div class="section-content">
                    @if (!Model.CanMarkAttendance)
                    {
                        <div class="unauthorized-message">
                            <i class="fas fa-info-circle"></i>
                            <span>Viewing today's classes. Only administrators can mark attendance.</span>
                        </div>
                    }
                    <div id="upcomingClassesGrid" class="upcoming-classes-grid">
                        <div class="loading-spinner">
                            <div class="spinner"></div>
                            <span>Loading today's classes...</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Student Subjects Section -->
            <div class="section-card">
                <div class="section-header">
                    <h2 class="section-title">
                        <i class="fas fa-book-open"></i>
                        Enrolled Subjects
                    </h2>
                    <div class="filter-controls">
                        <input type="text" id="subjectSearch" class="search-input" placeholder="Search subjects..." />
                    </div>
                </div>
                <div class="section-content">
                    <div id="subjectsGrid" class="subjects-grid">
                        <div class="loading-spinner">
                            <div class="spinner"></div>
                            <span>Loading subjects...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Weekly Classes Modal -->
<div id="weeklyModal" class="modal-overlay">
    <div class="weekly-modal">
        <div class="modal-header">
            <h3 class="modal-title" id="modalTitle">Weekly Classes</h3>
            <button class="close-btn" onclick="closeWeeklyModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body" id="modalBody">
            <!-- Dynamic content will be loaded here -->
        </div>
    </div>
</div>

<script>
    // Configuration
    const ITEM_KEY = '@Model.ItemKey';
    const CAN_MARK_ATTENDANCE = @Model.CanMarkAttendance.ToString().ToLower();

    // Global data stores
    let upcomingClassesData = [];
    let subjectsData = [];
    let attendanceTypes = [];

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
        loadAttendanceTypes();
        loadUpcomingClasses();
        loadStudentSubjects();
        setupEventListeners();
    });

    function setupEventListeners() {
        // Subject search
        document.getElementById('subjectSearch').addEventListener('input', function(e) {
            filterSubjects(e.target.value);
        });

        // Close modal when clicking outside
        document.getElementById('weeklyModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeWeeklyModal();
            }
        });
    }

    // Show alert messages
    function showAlert(message, type = 'info') {
        const alertContainer = document.getElementById('alertContainer');
        const alertClass = type === 'success' ? 'alert-success' :
                          type === 'error' ? 'alert-error' : 'alert-info';
        const iconClass = type === 'success' ? 'fa-check-circle' :
                         type === 'error' ? 'fa-exclamation-triangle' : 'fa-info-circle';

        const alertHtml = `
            <div class="alert-message ${alertClass}">
                <i class="fas ${iconClass}"></i>
                <span>${message}</span>
            </div>
        `;

        alertContainer.innerHTML = alertHtml;

        // Auto-hide after 5 seconds
        setTimeout(() => {
            alertContainer.innerHTML = '';
        }, 5000);
    }

    // Load student subjects
    async function loadStudentSubjects() {
        try {
            const response = await fetch(`/Student/GetStudentSubjects/${ITEM_KEY}`);
            const data = await response.json();

            if (data.error) {
                showError('subjectsGrid', 'Error loading subjects: ' + data.error);
                return;
            }

            subjectsData = data;
            renderSubjects(data);

        } catch (error) {
            console.error('Error loading subjects:', error);
            showError('subjectsGrid', 'Failed to load subjects.');
        }
    }

    // Render subjects
    function renderSubjects(subjects) {
        const container = document.getElementById('subjectsGrid');

        if (subjects.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-book-open"></i>
                    <h4>No Subjects Found</h4>
                    <p>This student is not enrolled in any subjects yet.</p>
                </div>
            `;
            return;
        }

        container.innerHTML = subjects.map(subject => `
            <div class="subject-card">
                <div class="subject-header">
                    <div class="subject-icon">
                        <i class="fas fa-book"></i>
                    </div>
                    <h3 class="subject-name">${subject.subjectName}</h3>
                </div>
                <div class="subject-details">
                    <div class="subject-detail">
                        <i class="fas fa-chalkboard-teacher"></i>
                        <span>${subject.teacherName}</span>
                    </div>
                    <div class="subject-detail">
                        <i class="fas fa-phone"></i>
                        <span>${subject.teacherPhone || 'N/A'}</span>
                    </div>
                    <div class="subject-detail">
                        <i class="fas fa-building"></i>
                        <span>${subject.branchName}</span>
                    </div>
                    <div class="subject-detail">
                        <i class="fas fa-graduation-cap"></i>
                        <span>${subject.eduYearName}</span>
                    </div>
                    <div class="subject-detail">
                        <i class="fas fa-dollar-sign"></i>
                        <span>${subject.studentFee ? subject.studentFee + ' EGP' : 'Free'}</span>
                    </div>
                    <div class="subject-detail">
                        <i class="fas fa-${subject.isOnline ? 'laptop' : 'school'}"></i>
                        <span>${subject.isOnline ? 'Online' : 'In-Person'}</span>
                    </div>
                </div>
                ${subject.scheduleDay ? `
                    <div class="schedule-info">
                        <div class="schedule-day">
                            <i class="fas fa-calendar-day"></i>
                            ${subject.scheduleDay}
                        </div>
                        ${subject.scheduleStartTime && subject.scheduleEndTime ? `
                            <div class="schedule-time">
                                <i class="fas fa-clock"></i>
                                <span>${subject.scheduleStartTime} - ${subject.scheduleEndTime}</span>
                            </div>
                        ` : ''}
                        ${subject.hallName ? `
                            <div class="subject-detail" style="margin-top: 0.5rem;">
                                <i class="fas fa-door-open"></i>
                                <span>${subject.hallName}</span>
                            </div>
                        ` : ''}
                    </div>
                ` : ''}
                <div style="margin-top: 1rem;">
                    <button class="view-weekly-btn" onclick="viewWeeklyClasses(${subject.subjectCode}, ${subject.teacherCode}, ${subject.rootCode}, ${subject.branchCode}, '${subject.subjectName}', '${subject.teacherName}')">
                        <i class="fas fa-calendar-week"></i>
                        View Weekly Classes
                    </button>
                </div>
            </div>
        `).join('');
    }

    // Filter subjects
    function filterSubjects(searchTerm) {
        const filtered = subjectsData.filter(subject =>
            subject.subjectName.toLowerCase().includes(searchTerm.toLowerCase()) ||
            subject.teacherName.toLowerCase().includes(searchTerm.toLowerCase()) ||
            subject.branchName.toLowerCase().includes(searchTerm.toLowerCase())
        );
        renderSubjects(filtered);
    }

    // Load attendance types
    async function loadAttendanceTypes() {
        try {
            const response = await fetch('/Student/GetAttendanceTypes');
            const data = await response.json();

            if (data.error) {
                console.error('Error loading attendance types:', data.error);
                return;
            }

            attendanceTypes = data;
        } catch (error) {
            console.error('Error loading attendance types:', error);
        }
    }

    // Load upcoming classes
    async function loadUpcomingClasses() {
        try {
            const response = await fetch(`/Student/GetUpcomingClasses/${ITEM_KEY}`);
            const data = await response.json();

            if (data.error) {
                showError('upcomingClassesGrid', 'Error loading classes: ' + data.error);
                return;
            }

            upcomingClassesData = data;
            renderUpcomingClasses(data);

        } catch (error) {
            console.error('Error loading upcoming classes:', error);
            showError('upcomingClassesGrid', 'Failed to load upcoming classes.');
        }
    }

    // Render upcoming classes
    function renderUpcomingClasses(classes) {
        const container = document.getElementById('upcomingClassesGrid');

        if (classes.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-clock"></i>
                    <h4>No Classes Available</h4>
                    <p>There are no classes available for attendance right now.</p>
                </div>
            `;
            return;
        }

        container.innerHTML = classes.map(classItem => `
            <div class="class-card ${!classItem.canAttend ? 'attended' : ''}">
                <div class="class-header">
                    <div class="class-icon">
                        <i class="fas fa-chalkboard-teacher"></i>
                    </div>
                    <div class="class-info">
                        <h3>${classItem.className}</h3>
                        <div class="class-subject">${classItem.subjectName}</div>
                    </div>
                </div>
                <div class="class-details">
                    <div class="class-detail">
                        <i class="fas fa-user-tie"></i>
                        <span>${classItem.teacherName}</span>
                    </div>
                    <div class="class-detail">
                        <i class="fas fa-building"></i>
                        <span>${classItem.branchName}</span>
                    </div>
                    <div class="class-detail">
                        <i class="fas fa-door-open"></i>
                        <span>${classItem.hallName}</span>
                    </div>
                    <div class="class-detail">
                        <i class="fas fa-dollar-sign"></i>
                        <span>${classItem.totalAmount ? classItem.totalAmount + ' EGP' : 'Free'}</span>
                    </div>
                </div>
                <div class="class-time">
                    <div class="time-info">
                        <div class="time-label">Start Time</div>
                        <div class="time-value">${classItem.startTime}</div>
                    </div>
                    <div class="time-info">
                        <div class="time-label">End Time</div>
                        <div class="time-value">${classItem.endTime}</div>
                    </div>
                </div>
                ${renderAttendanceControls(classItem)}
            </div>
        `).join('');
    }

    // Render attendance controls
    function renderAttendanceControls(classItem) {
        if (!classItem.canAttend) {
            return `
                <div class="attended-badge">
                    <i class="fas fa-check"></i>
                    <span>Already Attended</span>
                </div>
            `;
        }

        if (!CAN_MARK_ATTENDANCE) {
            return `
                <div class="unauthorized-message">
                    <i class="fas fa-lock"></i>
                    <span>Only administrators can mark attendance</span>
                </div>
            `;
        }

        return `
            <div class="attendance-controls">
                <select class="attendance-type-select" id="attendanceType_${classItem.classCode}">
                    ${attendanceTypes.map(type => `
                        <option value="${type.value}">${type.text}</option>
                    `).join('')}
                </select>
                <button class="attend-btn" onclick="markAttendance(${classItem.classCode})" id="attendBtn_${classItem.classCode}">
                    <i class="fas fa-check"></i>
                    <span>Mark Attendance</span>
                </button>
            </div>
        `;
    }

    // Mark attendance
    async function markAttendance(classCode) {
        const button = document.getElementById(`attendBtn_${classCode}`);
        const select = document.getElementById(`attendanceType_${classCode}`);

        if (!button || !select) return;

        const attendanceType = parseInt(select.value);

        // Update button state
        button.disabled = true;
        button.classList.add('attending');
        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i><span>Marking...</span>';

        try {
            const response = await fetch('/Student/MarkAttendance', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    itemKey: ITEM_KEY,
                    classCode: classCode,
                    attendanceType: attendanceType
                })
            });

            const result = await response.json();

            if (result.success) {
                showAlert('Attendance marked successfully!', 'success');
                // Reload the classes to update the UI
                loadUpcomingClasses();
            } else {
                showAlert(result.error || 'Failed to mark attendance.', 'error');
                // Reset button state
                button.disabled = false;
                button.classList.remove('attending');
                button.innerHTML = '<i class="fas fa-check"></i><span>Mark Attendance</span>';
            }
        } catch (error) {
            console.error('Error marking attendance:', error);
            showAlert('An error occurred while marking attendance.', 'error');
            // Reset button state
            button.disabled = false;
            button.classList.remove('attending');
            button.innerHTML = '<i class="fas fa-check"></i><span>Mark Attendance</span>';
        }
    }

    // View weekly classes
    async function viewWeeklyClasses(subjectCode, teacherCode, yearCode, branchCode, subjectName, teacherName) {
        const modal = document.getElementById('weeklyModal');
        const modalTitle = document.getElementById('modalTitle');
        const modalBody = document.getElementById('modalBody');

        modalTitle.textContent = `Weekly Classes - ${subjectName} (${teacherName})`;
        modalBody.innerHTML = `
            <div class="loading-spinner">
                <div class="spinner"></div>
                <span>Loading weekly classes...</span>
            </div>
        `;

        modal.classList.add('show');

        try {
            const response = await fetch(`/Student/GetWeeklyClasses/${ITEM_KEY}?subjectCode=${subjectCode}&teacherCode=${teacherCode}&yearCode=${yearCode}&branchCode=${branchCode}`);
            const classes = await response.json();

            if (classes.error) {
                modalBody.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-exclamation-triangle"></i>
                        <h4>Error</h4>
                        <p>${classes.error}</p>
                    </div>
                `;
                return;
            }

            renderWeeklyClasses(classes);
        } catch (error) {
            console.error('Error loading weekly classes:', error);
            modalBody.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h4>Error</h4>
                    <p>Failed to load weekly classes.</p>
                </div>
            `;
        }
    }

    // Render weekly classes
    function renderWeeklyClasses(classes) {
        const modalBody = document.getElementById('modalBody');

        if (classes.length === 0) {
            modalBody.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-calendar-times"></i>
                    <h4>No Classes This Week</h4>
                    <p>There are no classes scheduled for this week.</p>
                </div>
            `;
            return;
        }

        modalBody.innerHTML = `
            <div class="upcoming-classes-grid">
                ${classes.map(classItem => `
                    <div class="class-card ${classItem.isAttended ? 'attended' : ''}">
                        <div class="class-header">
                            <div class="class-icon">
                                <i class="fas fa-chalkboard-teacher"></i>
                            </div>
                            <div class="class-info">
                                <h3>${classItem.className}</h3>
                                <div class="class-subject">${classItem.subjectName}</div>
                            </div>
                        </div>
                        <div class="class-details">
                            <div class="class-detail">
                                <i class="fas fa-calendar-day"></i>
                                <span>${classItem.dayOfWeek} - ${classItem.classDate}</span>
                            </div>
                            <div class="class-detail">
                                <i class="fas fa-user-tie"></i>
                                <span>${classItem.teacherName}</span>
                            </div>
                            <div class="class-detail">
                                <i class="fas fa-building"></i>
                                <span>${classItem.branchName}</span>
                            </div>
                            <div class="class-detail">
                                <i class="fas fa-door-open"></i>
                                <span>${classItem.hallName}</span>
                            </div>
                        </div>
                        <div class="class-time">
                            <div class="time-info">
                                <div class="time-label">Start Time</div>
                                <div class="time-value">${classItem.startTime}</div>
                            </div>
                            <div class="time-info">
                                <div class="time-label">End Time</div>
                                <div class="time-value">${classItem.endTime}</div>
                            </div>
                        </div>
                        ${classItem.isAttended ?
                            '<div class="attended-badge"><i class="fas fa-check"></i><span>Attended</span></div>' :
                            classItem.isCurrentlyAvailable && CAN_MARK_ATTENDANCE ?
                                `<div class="attendance-controls">
                                    <select class="attendance-type-select" id="weeklyAttendanceType_${classItem.classCode}">
                                        ${attendanceTypes.map(type => `<option value="${type.value}">${type.text}</option>`).join('')}
                                    </select>
                                    <button class="attend-btn" onclick="markWeeklyAttendance(${classItem.classCode})" id="weeklyAttendBtn_${classItem.classCode}">
                                        <i class="fas fa-check"></i>
                                        <span>Mark Attendance</span>
                                    </button>
                                </div>` :
                                '<div class="unauthorized-message"><i class="fas fa-clock"></i><span>Not available for attendance</span></div>'
                        }
                    </div>
                `).join('')}
            </div>
        `;
    }

    // Mark attendance from weekly view
    async function markWeeklyAttendance(classCode) {
        const button = document.getElementById(`weeklyAttendBtn_${classCode}`);
        const select = document.getElementById(`weeklyAttendanceType_${classCode}`);

        if (!button || !select) return;

        const attendanceType = parseInt(select.value);

        // Update button state
        button.disabled = true;
        button.classList.add('attending');
        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i><span>Marking...</span>';

        try {
            const response = await fetch('/Student/MarkAttendance', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    itemKey: ITEM_KEY,
                    classCode: classCode,
                    attendanceType: attendanceType
                })
            });

            const result = await response.json();

            if (result.success) {
                showAlert('Attendance marked successfully!', 'success');
                // Update the button to show attended state
                button.parentElement.innerHTML = '<div class="attended-badge"><i class="fas fa-check"></i><span>Attended</span></div>';
                // Also reload the main upcoming classes
                loadUpcomingClasses();
            } else {
                showAlert(result.error || 'Failed to mark attendance.', 'error');
                // Reset button state
                button.disabled = false;
                button.classList.remove('attending');
                button.innerHTML = '<i class="fas fa-check"></i><span>Mark Attendance</span>';
            }
        } catch (error) {
            console.error('Error marking attendance:', error);
            showAlert('An error occurred while marking attendance.', 'error');
            // Reset button state
            button.disabled = false;
            button.classList.remove('attending');
            button.innerHTML = '<i class="fas fa-check"></i><span>Mark Attendance</span>';
        }
    }

    // Close weekly modal
    function closeWeeklyModal() {
        document.getElementById('weeklyModal').classList.remove('show');
    }

    // Show error in container
    function showError(containerId, message) {
        const container = document.getElementById(containerId);
        container.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-exclamation-triangle"></i>
                <h4>Error</h4>
                <p>${message}</p>
            </div>
        `;
    }
</script>