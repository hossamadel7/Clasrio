@model centrny.Controllers.StudentProfileViewModel

@{
    ViewData["Title"] = $"Student Profile - {Model.StudentName}";
}

<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />

<style>
    :root {
        --primary-gradient: linear-gradient(135deg, #6c5ce7 0%, #a29bfe 100%);
        --success-gradient: linear-gradient(135deg, #00b894 0%, #55a3ff 100%);
        --danger-gradient: linear-gradient(135deg, #e17055 0%, #fd79a8 100%);
        --warning-gradient: linear-gradient(135deg, #fdcb6e 0%, #f39c12 100%);
        --info-gradient: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
        --attendance-gradient: linear-gradient(135deg, #00cec9 0%, #55efc4 100%);
        --primary-color: #6c5ce7;
        --success-color: #00b894;
        --danger-color: #e17055;
        --warning-color: #f39c12;
        --info-color: #74b9ff;
        --attendance-color: #00cec9;
        --text-dark: #2d3436;
        --text-muted: #636e72;
        --bg-light: #f8f9fa;
        --bg-white: #ffffff;
        --border-color: #e9ecef;
        --shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        --shadow-lg: 0 8px 30px rgba(0, 0, 0, 0.12);
        --border-radius: 12px;
        --border-radius-lg: 16px;
        --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    * {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }

    body {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        min-height: 100vh;
        color: var(--text-dark);
    }

    .student-profile-page {
        min-height: 100vh;
        padding: 2rem 0;
    }

    .profile-container {
        background: var(--bg-white);
        border-radius: var(--border-radius-lg);
        box-shadow: var(--shadow-lg);
        margin: 0 auto;
        max-width: 1400px;
        border: 1px solid var(--border-color);
        overflow: hidden;
    }

    /* Enhanced Header Section */
    .profile-header {
        background: var(--primary-gradient);
        color: white;
        padding: 3rem 2rem;
        position: relative;
        overflow: hidden;
        min-height: 450px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .profile-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>') 0 0;
            opacity: 0.3;
            pointer-events: none;
        }

    /* Header Layout Container */
    .header-layout {
        display: grid;
        grid-template-columns: 1fr auto 1fr;
        grid-template-areas: "left-info main-profile right-info";
        align-items: center;
        gap: 3rem;
        width: 100%;
        max-width: 1200px;
        position: relative;
        z-index: 3;
    }

    /* Left Side Info Cards */
    .left-info-cards {
        grid-area: left-info;
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        align-items: flex-end;
    }

    /* Right Side Info Cards */
    .right-info-cards {
        grid-area: right-info;
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        align-items: flex-start;
    }

    /* Main Profile Section */
    .main-profile {
        grid-area: main-profile;
        text-align: center;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-width: 300px;
    }

    /* Enhanced Info Cards */
    .header-info-card {
        background: rgba(255, 255, 255, 0.15);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: var(--border-radius);
        padding: 1.2rem;
        backdrop-filter: blur(15px);
        transition: var(--transition);
        position: relative;
        overflow: hidden;
        min-width: 250px;
        max-width: 280px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    }

        .header-info-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0.2));
            border-radius: var(--border-radius) var(--border-radius) 0 0;
        }

        .header-info-card:hover {
            transform: translateY(-8px) scale(1.02);
            background: rgba(255, 255, 255, 0.25);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.2);
        }

    .card-content {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .card-icon {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.25);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.4rem;
        color: white;
        flex-shrink: 0;
        border: 2px solid rgba(255, 255, 255, 0.3);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .card-text {
        flex: 1;
        text-align: left;
    }

    .card-label {
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 1px;
        color: rgba(255, 255, 255, 0.7);
        margin-bottom: 0.5rem;
        display: block;
    }

    .card-value {
        font-size: 1rem;
        font-weight: 700;
        color: white;
        line-height: 1.2;
        word-break: break-word;
    }

    /* Enhanced Profile Avatar and Info */
    .profile-avatar {
        width: 140px;
        height: 140px;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.2);
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 2rem;
        border: 5px solid rgba(255, 255, 255, 0.3);
        font-size: 4rem;
        position: relative;
        z-index: 2;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        transition: var(--transition);
    }

        .profile-avatar:hover {
            transform: scale(1.05);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);
        }

    .profile-name {
        font-size: 3rem;
        font-weight: 800;
        margin-bottom: 1rem;
        position: relative;
        z-index: 2;
        text-shadow: 0 3px 15px rgba(0, 0, 0, 0.2);
        line-height: 1.1;
    }

    .profile-subtitle {
        opacity: 0.9;
        font-size: 1.3rem;
        font-weight: 500;
        position: relative;
        z-index: 2;
        margin-bottom: 1.5rem;
        text-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .profile-status {
        display: inline-flex;
        align-items: center;
        gap: 0.75rem;
        padding: 1rem 2rem;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 30px;
        border: 1px solid rgba(255, 255, 255, 0.3);
        position: relative;
        z-index: 2;
        font-weight: 700;
        font-size: 1rem;
        backdrop-filter: blur(10px);
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
        transition: var(--transition);
    }

        .profile-status:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
        }

    /* Floating Animation for Cards */
    @@keyframes float {
        0%, 100%

    {
        transform: translateY(0px);
    }

    50% {
        transform: translateY(-10px);
    }

    }

    .header-info-card:nth-child(1) {
        animation: float 6s ease-in-out infinite;
    }

    .header-info-card:nth-child(2) {
        animation: float 6s ease-in-out infinite 1s;
    }

    .header-info-card:nth-child(3) {
        animation: float 6s ease-in-out infinite 2s;
    }

    .header-info-card:nth-child(4) {
        animation: float 6s ease-in-out infinite 3s;
    }

    /* Content Section */
    .profile-content {
        padding: 2rem;
    }

    /* Section Cards */
    .section-card {
        background: var(--bg-white);
        border-radius: var(--border-radius);
        box-shadow: var(--shadow);
        border: 1px solid var(--border-color);
        margin-bottom: 2rem;
        overflow: hidden;
    }

    .section-header {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 1.5rem;
        border-bottom: 1px solid var(--border-color);
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .section-title {
        font-size: 1.3rem;
        font-weight: 700;
        color: var(--text-dark);
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

        .section-title i {
            font-size: 1.5rem;
            color: var(--primary-color);
        }

    .section-content {
        padding: 1.5rem;
    }

    /* Upcoming Classes Styles */
    .upcoming-classes-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
        gap: 1.5rem;
    }

    .class-card {
        background: var(--bg-white);
        border-radius: var(--border-radius);
        padding: 1.5rem;
        box-shadow: var(--shadow);
        border: 1px solid var(--border-color);
        transition: var(--transition);
        position: relative;
        overflow: hidden;
    }

        .class-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: var(--attendance-gradient);
        }

        .class-card:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        .class-card.attended {
            opacity: 0.7;
            background: var(--bg-light);
        }

            .class-card.attended::before {
                background: var(--success-gradient);
            }

    .class-header {
        display: flex;
        align-items: center;
        margin-bottom: 1rem;
    }

    .class-icon {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: var(--attendance-gradient);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        margin-right: 1rem;
        font-size: 1.3rem;
    }

    .class-info h3 {
        font-weight: 700;
        color: var(--text-dark);
        font-size: 1.1rem;
        margin: 0 0 0.25rem 0;
    }

    .class-subject {
        color: var(--text-muted);
        font-size: 0.9rem;
        font-weight: 500;
    }

    .class-details {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 0.75rem;
        margin-bottom: 1rem;
    }

    .class-detail {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.9rem;
        color: var(--text-muted);
    }

        .class-detail i {
            color: var(--attendance-color);
            width: 16px;
        }

    .class-time {
        background: var(--bg-light);
        border-radius: var(--border-radius);
        padding: 1rem;
        margin-bottom: 1rem;
        border-left: 4px solid var(--attendance-color);
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
    }

    .time-info {
        text-align: center;
    }

    .time-label {
        font-size: 0.8rem;
        color: var(--text-muted);
        text-transform: uppercase;
        font-weight: 600;
        margin-bottom: 0.25rem;
    }

    .time-value {
        font-size: 1.1rem;
        font-weight: 700;
        color: var(--attendance-color);
    }

    /* Attendance Controls */
    .attendance-controls {
        display: flex;
        gap: 0.75rem;
        align-items: center;
    }

    .attendance-type-select {
        flex: 1;
        border: 2px solid var(--border-color);
        border-radius: var(--border-radius);
        padding: 0.75rem;
        font-weight: 500;
        transition: var(--transition);
        background: var(--bg-white);
    }

        .attendance-type-select:focus {
            border-color: var(--attendance-color);
            box-shadow: 0 0 0 0.2rem rgba(0, 206, 201, 0.25);
            outline: none;
        }

    .attend-btn {
        background: var(--attendance-gradient);
        border: none;
        color: white;
        padding: 0.75rem 1.5rem;
        border-radius: var(--border-radius);
        font-weight: 600;
        font-size: 0.9rem;
        transition: var(--transition);
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        min-width: 120px;
        justify-content: center;
    }

        .attend-btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: var(--shadow);
        }

        .attend-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .attend-btn.attending {
            background: var(--warning-gradient);
        }

    .attended-badge {
        background: var(--success-gradient);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: var(--border-radius);
        font-weight: 600;
        font-size: 0.9rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    /* View Weekly Classes Button */
    .view-weekly-btn {
        background: var(--info-gradient);
        border: none;
        color: white;
        padding: 0.75rem 1rem;
        border-radius: var(--border-radius);
        font-weight: 600;
        font-size: 0.9rem;
        transition: var(--transition);
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

        .view-weekly-btn:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow);
        }

    /* Admin-specific styles */
    .admin-section {
        border-left: 4px solid var(--warning-color);
    }

        .admin-section .section-header {
            background: linear-gradient(135deg, #fff7e6 0%, #ffeaa7 20%);
        }

    .admin-badge {
        background: var(--warning-gradient);
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: var(--border-radius);
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    /* Unauthorized message styles */
    .unauthorized-message {
        background: linear-gradient(135deg, #ffeaa7 0%, #fdcb6e 100%);
        color: #d63031;
        padding: 0.75rem 1rem;
        border-radius: var(--border-radius);
        font-weight: 600;
        font-size: 0.9rem;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        border: 1px solid #fdcb6e;
    }

    /* Weekly Classes Modal */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transition: var(--transition);
    }

        .modal-overlay.show {
            opacity: 1;
            visibility: visible;
        }

    .weekly-modal {
        background: var(--bg-white);
        border-radius: var(--border-radius-lg);
        max-width: 90vw;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: var(--shadow-lg);
        transform: translateY(20px);
        transition: var(--transition);
    }

    .modal-overlay.show .weekly-modal {
        transform: translateY(0);
    }

    .modal-header {
        background: var(--info-gradient);
        color: white;
        padding: 1.5rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .modal-title {
        font-size: 1.3rem;
        font-weight: 700;
        margin: 0;
    }

    .close-btn {
        background: none;
        border: none;
        color: white;
        font-size: 1.5rem;
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 50%;
        transition: var(--transition);
    }

        .close-btn:hover {
            background: rgba(255, 255, 255, 0.2);
        }

    .modal-body {
        padding: 1.5rem;
    }

    /* Filter and Search */
    .filter-controls {
        display: flex;
        gap: 1rem;
        margin-bottom: 1.5rem;
        flex-wrap: wrap;
        align-items: center;
    }

    .search-input, .filter-select {
        border: 2px solid var(--border-color);
        border-radius: var(--border-radius);
        padding: 0.75rem 1rem;
        font-weight: 500;
        transition: var(--transition);
        background: var(--bg-white);
    }

        .search-input:focus, .filter-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(108, 92, 231, 0.25);
            outline: none;
        }

    /* Subject Cards */
    .subjects-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 1.5rem;
    }

    .subject-card {
        background: var(--bg-white);
        border-radius: var(--border-radius);
        padding: 1.5rem;
        box-shadow: var(--shadow);
        border: 1px solid var(--border-color);
        transition: var(--transition);
        position: relative;
        overflow: hidden;
    }

        .subject-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: var(--success-gradient);
        }

        .subject-card:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

    .subject-header {
        display: flex;
        align-items: center;
        margin-bottom: 1rem;
    }

    .subject-icon {
        width: 45px;
        height: 45px;
        border-radius: 50%;
        background: var(--success-gradient);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        margin-right: 1rem;
        font-size: 1.2rem;
    }

    .subject-name {
        font-weight: 700;
        color: var(--text-dark);
        font-size: 1.1rem;
        margin: 0;
    }

    .subject-details {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 0.75rem;
        margin-bottom: 1rem;
    }

    .subject-detail {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.9rem;
        color: var(--text-muted);
    }

        .subject-detail i {
            color: var(--primary-color);
            width: 16px;
        }

    .schedule-info {
        background: var(--bg-light);
        border-radius: var(--border-radius);
        padding: 1rem;
        margin-top: 1rem;
        border-left: 4px solid var(--info-color);
    }

    .schedule-day {
        font-weight: 600;
        color: var(--info-color);
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .schedule-time {
        background: rgba(116, 185, 255, 0.1);
        padding: 0.75rem;
        border-radius: var(--border-radius);
        margin-top: 0.5rem;
        font-weight: 600;
        color: var(--primary-color);
    }

        .schedule-time span {
            color: var(--text-dark);
        }

    /* Loading State */
    .loading-spinner {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 3rem;
        color: var(--text-muted);
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 3px solid var(--border-color);
        border-top: 3px solid var(--primary-color);
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-right: 1rem;
    }

    @@keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 3rem;
        color: var(--text-muted);
    }

        .empty-state i {
            font-size: 4rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }

    /* Alert Messages */
    .alert-message {
        padding: 1rem;
        border-radius: var(--border-radius);
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        gap: 0.75rem;
        font-weight: 500;
    }

    .alert-success {
        background: rgba(0, 184, 148, 0.1);
        color: var(--success-color);
        border: 1px solid rgba(0, 184, 148, 0.2);
    }

    .alert-error {
        background: rgba(225, 112, 85, 0.1);
        color: var(--danger-color);
        border: 1px solid rgba(225, 112, 85, 0.2);
    }

    .alert-info {
        background: rgba(116, 185, 255, 0.1);
        color: var(--info-color);
        border: 1px solid rgba(116, 185, 255, 0.2);
    }

    /* Badge Styles */
    .badge-custom {
        padding: 0.4rem 0.8rem;
        border-radius: var(--border-radius);
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .badge-success {
        background: var(--success-gradient);
        color: white;
    }

    .badge-warning {
        background: var(--warning-gradient);
        color: white;
    }

    .badge-danger {
        background: var(--danger-gradient);
        color: white;
    }

    .badge-info {
        background: var(--info-gradient);
        color: white;
    }

    /* Responsive Design */
    @@media (max-width: 1200px) {
        .header-layout

    {
        grid-template-columns: 1fr;
        grid-template-areas:
            "main-profile"
            "left-info"
            "right-info";
        gap: 2rem;
        text-align: center;
    }

    .left-info-cards,
    .right-info-cards {
        align-items: center;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: center;
    }

    .header-info-card {
        min-width: 220px;
        max-width: 250px;
    }

    }

    @@media (max-width: 768px) {
        .profile-container

    {
        margin: 1rem;
    }

    .profile-header {
        padding: 2rem 1rem;
        min-height: auto;
    }

    .profile-content {
        padding: 1rem;
    }

    .header-layout {
        gap: 1.5rem;
    }

    .left-info-cards,
    .right-info-cards {
        flex-direction: column;
        align-items: center;
    }

    .header-info-card {
        min-width: 280px;
        max-width: 100%;
    }

    .profile-name {
        font-size: 2.2rem;
    }

    .profile-subtitle {
        font-size: 1.1rem;
    }

    .upcoming-classes-grid {
        grid-template-columns: 1fr;
    }

    .subjects-grid {
        grid-template-columns: 1fr;
    }

    .filter-controls {
        flex-direction: column;
        align-items: stretch;
    }

    .search-input, .filter-select {
        width: 100%;
    }

    .attendance-controls {
        flex-direction: column;
    }

    .attendance-type-select {
        width: 100%;
    }

    .weekly-modal {
        margin: 1rem;
        max-width: calc(100vw - 2rem);
    }

    }

    @@media (max-width: 480px) {
        .profile-header

    {
        padding: 1.5rem 0.5rem;
    }

    .header-info-card {
        min-width: 260px;
        padding: 1rem;
    }

    .card-content {
        flex-direction: column;
        text-align: center;
        gap: 0.75rem;
    }

    .card-text {
        text-align: center;
    }

    .profile-avatar {
        width: 110px;
        height: 110px;
        font-size: 3rem;
    }

    .profile-name {
        font-size: 1.8rem;
    }

    .profile-subtitle {
        font-size: 1rem;
    }

    }
</style>

<div class="container-fluid student-profile-page">
    <div class="profile-container">
        <!-- Enhanced Profile Header -->
        <div class="profile-header">
            <div class="header-layout">
                <!-- Left Side Info Cards -->
                <div class="left-info-cards">
                    <div class="header-info-card">
                        <div class="card-content">
                            <div class="card-icon">
                                <i class="fas fa-graduation-cap"></i>
                            </div>
                            <div class="card-text">
                                <span class="card-label">Academic Year</span>
                                <div class="card-value">@(Model.YearName ?? "N/A")</div>
                            </div>
                        </div>
                    </div>
                    <div class="header-info-card">
                        <div class="card-content">
                            <div class="card-icon">
                                <i class="fas fa-building"></i>
                            </div>
                            <div class="card-text">
                                <span class="card-label">Branch</span>
                                <div class="card-value">@(Model.BranchName ?? "N/A")</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Main Profile Section -->
                <div class="main-profile">
                    <div class="profile-avatar">
                        <i class="fas fa-user-graduate"></i>
                    </div>
                    <h1 class="profile-name">@Model.StudentName</h1>
                    <p class="profile-subtitle">@Model.YearName @(!string.IsNullOrEmpty(Model.LevelName) ? $"- {Model.LevelName}" : "") Student</p>
                    <div class="profile-status">
                        <i class="fas @(Model.IsActive ? "fa-check-circle" : "fa-times-circle")"></i>
                        <span>@(Model.IsActive ? "Active Student" : "Inactive Student")</span>
                    </div>
                </div>

                <!-- Right Side Info Cards -->
                <div class="right-info-cards">
                    <div class="header-info-card">
                        <div class="card-content">
                            <div class="card-icon">
                                <i class="fas fa-phone-alt"></i>
                            </div>
                            <div class="card-text">
                                <span class="card-label">Parent Phone</span>
                                <div class="card-value">@Model.StudentParentPhone</div>
                            </div>
                        </div>
                    </div>
                    <div class="header-info-card">
                        <div class="card-content">
                            <div class="card-icon">
                                <i class="fas fa-phone"></i>
                            </div>
                            <div class="card-text">
                                <span class="card-label">Student Phone</span>
                                <div class="card-value">@Model.StudentPhone</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Profile Content -->
        <div class="profile-content">
            <!-- Alert Container -->
            <div id="alertContainer"></div>

            <!-- Upcoming Classes Section -->
            <div class="section-card">
                <div class="section-header">
                    <h2 class="section-title">
                        <i class="fas fa-clock"></i>
                        Today's Classes
                        @if (Model.CanMarkAttendance)
                        {
                            <span class="admin-badge">Admin View</span>
                        }
                    </h2>
                </div>
                <div class="section-content">
                    @if (!Model.CanMarkAttendance)
                    {
                        <div class="unauthorized-message">
                            <i class="fas fa-info-circle"></i>
                            <span>Viewing today's classes. Only administrators can mark attendance.</span>
                        </div>
                    }
                    <div id="upcomingClassesGrid" class="upcoming-classes-grid">
                        <div class="loading-spinner">
                            <div class="spinner"></div>
                            <span>Loading today's classes...</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Student Subjects Section -->
            <div class="section-card">
                <div class="section-header">
                    <h2 class="section-title">
                        <i class="fas fa-book-open"></i>
                        Enrolled Subjects
                    </h2>
                    <div class="filter-controls">
                        <input type="text" id="subjectSearch" class="search-input" placeholder="Search subjects..." />
                    </div>
                </div>
                <div class="section-content">
                    <div id="subjectsGrid" class="subjects-grid">
                        <div class="loading-spinner">
                            <div class="spinner"></div>
                            <span>Loading subjects...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Weekly Classes Modal -->
<div id="weeklyModal" class="modal-overlay">
    <div class="weekly-modal">
        <div class="modal-header">
            <h3 class="modal-title" id="modalTitle">Weekly Classes</h3>
            <button class="close-btn" onclick="closeWeeklyModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body" id="modalBody">
            <!-- Dynamic content will be loaded here -->
        </div>
    </div>
</div>

<script>
    // Configuration
    const ITEM_KEY = '@Model.ItemKey';
    const CAN_MARK_ATTENDANCE = @Model.CanMarkAttendance.ToString().ToLower();

    // Global data stores
    let upcomingClassesData = [];
    let subjectsData = [];
    let attendanceTypes = [];

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
        loadAttendanceTypes();
        loadUpcomingClasses();
        loadStudentSubjects();
        setupEventListeners();
    });

    function setupEventListeners() {
        // Subject search
        document.getElementById('subjectSearch').addEventListener('input', function(e) {
            filterSubjects(e.target.value);
        });

        // Close modal when clicking outside
        document.getElementById('weeklyModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeWeeklyModal();
            }
        });
    }

    // Show alert messages
    function showAlert(message, type = 'info') {
        const alertContainer = document.getElementById('alertContainer');
        const alertClass = type === 'success' ? 'alert-success' :
                          type === 'error' ? 'alert-error' : 'alert-info';
        const iconClass = type === 'success' ? 'fa-check-circle' :
                         type === 'error' ? 'fa-exclamation-triangle' : 'fa-info-circle';

        const alertHtml = `
            <div class="alert-message ${alertClass}">
                <i class="fas ${iconClass}"></i>
                <span>${message}</span>
            </div>
        `;

        alertContainer.innerHTML = alertHtml;

        // Auto-hide after 5 seconds
        setTimeout(() => {
            alertContainer.innerHTML = '';
        }, 5000);
    }

    // Load student subjects
    async function loadStudentSubjects() {
        try {
            const response = await fetch(`/Student/GetStudentSubjects/${ITEM_KEY}`);
            const data = await response.json();

            if (data.error) {
                showError('subjectsGrid', 'Error loading subjects: ' + data.error);
                return;
            }

            subjectsData = data;
            renderSubjects(data);

        } catch (error) {
            console.error('Error loading subjects:', error);
            showError('subjectsGrid', 'Failed to load subjects.');
        }
    }

    // Render subjects
    function renderSubjects(subjects) {
        const container = document.getElementById('subjectsGrid');

        if (subjects.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-book-open"></i>
                    <h4>No Subjects Found</h4>
                    <p>This student is not enrolled in any subjects yet.</p>
                </div>
            `;
            return;
        }

        container.innerHTML = subjects.map(subject => `
            <div class="subject-card">
                <div class="subject-header">
                    <div class="subject-icon">
                        <i class="fas fa-book"></i>
                    </div>
                    <h3 class="subject-name">${subject.subjectName}</h3>
                </div>
                <div class="subject-details">
                    <div class="subject-detail">
                        <i class="fas fa-chalkboard-teacher"></i>
                        <span>${subject.teacherName}</span>
                    </div>
                    <div class="subject-detail">
                        <i class="fas fa-phone"></i>
                        <span>${subject.teacherPhone || 'N/A'}</span>
                    </div>
                    <div class="subject-detail">
                        <i class="fas fa-building"></i>
                        <span>${subject.branchName}</span>
                    </div>
                    <div class="subject-detail">
                        <i class="fas fa-graduation-cap"></i>
                        <span>${subject.eduYearName}</span>
                    </div>
                    <div class="subject-detail">
                        <i class="fas fa-dollar-sign"></i>
                        <span>${subject.studentFee ? subject.studentFee + ' EGP' : 'Free'}</span>
                    </div>
                    <div class="subject-detail">
                        <i class="fas fa-${subject.isOnline ? 'laptop' : 'school'}"></i>
                        <span>${subject.isOnline ? 'Online' : 'In-Person'}</span>
                    </div>
                </div>
                ${subject.scheduleDay ? `
                    <div class="schedule-info">
                        <div class="schedule-day">
                            <i class="fas fa-calendar-day"></i>
                            ${subject.scheduleDay}
                        </div>
                        ${subject.scheduleStartTime && subject.scheduleEndTime ? `
                            <div class="schedule-time">
                                <i class="fas fa-clock"></i>
                                <span>${subject.scheduleStartTime} - ${subject.scheduleEndTime}</span>
                            </div>
                        ` : ''}
                        ${subject.hallName ? `
                            <div class="subject-detail" style="margin-top: 0.5rem;">
                                <i class="fas fa-door-open"></i>
                                <span>${subject.hallName}</span>
                            </div>
                        ` : ''}
                    </div>
                ` : ''}
                <div style="margin-top: 1rem;">
                    <button class="view-weekly-btn" onclick="viewWeeklyClasses(${subject.subjectCode}, ${subject.teacherCode}, ${subject.rootCode}, ${subject.branchCode}, '${subject.subjectName}', '${subject.teacherName}')">
                        <i class="fas fa-calendar-week"></i>
                        View Weekly Classes
                    </button>
                </div>
            </div>
        `).join('');
    }

    // Filter subjects
    function filterSubjects(searchTerm) {
        const filtered = subjectsData.filter(subject =>
            subject.subjectName.toLowerCase().includes(searchTerm.toLowerCase()) ||
            subject.teacherName.toLowerCase().includes(searchTerm.toLowerCase()) ||
            subject.branchName.toLowerCase().includes(searchTerm.toLowerCase())
        );
        renderSubjects(filtered);
    }

    // Load attendance types
    async function loadAttendanceTypes() {
        try {
            const response = await fetch('/Student/GetAttendanceTypes');
            const data = await response.json();

            if (data.error) {
                console.error('Error loading attendance types:', data.error);
                return;
            }

            attendanceTypes = data;
        } catch (error) {
            console.error('Error loading attendance types:', error);
        }
    }

    // Load upcoming classes
    async function loadUpcomingClasses() {
        try {
            const response = await fetch(`/Student/GetUpcomingClasses/${ITEM_KEY}`);
            const data = await response.json();

            if (data.error) {
                showError('upcomingClassesGrid', 'Error loading classes: ' + data.error);
                return;
            }

            upcomingClassesData = data;
            renderUpcomingClasses(data);

        } catch (error) {
            console.error('Error loading upcoming classes:', error);
            showError('upcomingClassesGrid', 'Failed to load upcoming classes.');
        }
    }

    // Render upcoming classes
    function renderUpcomingClasses(classes) {
        const container = document.getElementById('upcomingClassesGrid');

        if (classes.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-clock"></i>
                    <h4>No Classes Available</h4>
                    <p>There are no classes available for attendance right now.</p>
                </div>
            `;
            return;
        }

        container.innerHTML = classes.map(classItem => `
            <div class="class-card ${!classItem.canAttend ? 'attended' : ''}">
                <div class="class-header">
                    <div class="class-icon">
                        <i class="fas fa-chalkboard-teacher"></i>
                    </div>
                    <div class="class-info">
                        <h3>${classItem.className}</h3>
                        <div class="class-subject">${classItem.subjectName}</div>
                    </div>
                </div>
                <div class="class-details">
                    <div class="class-detail">
                        <i class="fas fa-user-tie"></i>
                        <span>${classItem.teacherName}</span>
                    </div>
                    <div class="class-detail">
                        <i class="fas fa-building"></i>
                        <span>${classItem.branchName}</span>
                    </div>
                    <div class="class-detail">
                        <i class="fas fa-door-open"></i>
                        <span>${classItem.hallName}</span>
                    </div>
                    <div class="class-detail">
                        <i class="fas fa-dollar-sign"></i>
                        <span>${classItem.totalAmount ? classItem.totalAmount + ' EGP' : 'Free'}</span>
                    </div>
                </div>
                <div class="class-time">
                    <div class="time-info">
                        <div class="time-label">Start Time</div>
                        <div class="time-value">${classItem.startTime}</div>
                    </div>
                    <div class="time-info">
                        <div class="time-label">End Time</div>
                        <div class="time-value">${classItem.endTime}</div>
                    </div>
                </div>
                ${renderAttendanceControls(classItem)}
            </div>
        `).join('');
    }

    // Render attendance controls
    function renderAttendanceControls(classItem) {
        if (!classItem.canAttend) {
            return `
                <div class="attended-badge">
                    <i class="fas fa-check"></i>
                    <span>Already Attended</span>
                </div>
            `;
        }

        if (!CAN_MARK_ATTENDANCE) {
            return `
                <div class="unauthorized-message">
                    <i class="fas fa-lock"></i>
                    <span>Only administrators can mark attendance</span>
                </div>
            `;
        }

        return `
            <div class="attendance-controls">
                <select class="attendance-type-select" id="attendanceType_${classItem.classCode}">
                    ${attendanceTypes.map(type => `
                        <option value="${type.value}">${type.text}</option>
                    `).join('')}
                </select>
                <button class="attend-btn" onclick="markAttendance(${classItem.classCode})" id="attendBtn_${classItem.classCode}">
                    <i class="fas fa-check"></i>
                    <span>Mark Attendance</span>
                </button>
            </div>
        `;
    }

    // Mark attendance
    async function markAttendance(classCode) {
        const button = document.getElementById(`attendBtn_${classCode}`);
        const select = document.getElementById(`attendanceType_${classCode}`);

        if (!button || !select) return;

        const attendanceType = parseInt(select.value);

        // Update button state
        button.disabled = true;
        button.classList.add('attending');
        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i><span>Marking...</span>';

        try {
            const response = await fetch('/Student/MarkAttendance', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    itemKey: ITEM_KEY,
                    classCode: classCode,
                    attendanceType: attendanceType
                })
            });

            const result = await response.json();

            if (result.success) {
                showAlert('Attendance marked successfully!', 'success');
                // Reload the classes to update the UI
                loadUpcomingClasses();
            } else {
                showAlert(result.error || 'Failed to mark attendance.', 'error');
                // Reset button state
                button.disabled = false;
                button.classList.remove('attending');
                button.innerHTML = '<i class="fas fa-check"></i><span>Mark Attendance</span>';
            }
        } catch (error) {
            console.error('Error marking attendance:', error);
            showAlert('An error occurred while marking attendance.', 'error');
            // Reset button state
            button.disabled = false;
            button.classList.remove('attending');
            button.innerHTML = '<i class="fas fa-check"></i><span>Mark Attendance</span>';
        }
    }

    // View weekly classes
    async function viewWeeklyClasses(subjectCode, teacherCode, yearCode, branchCode, subjectName, teacherName) {
        const modal = document.getElementById('weeklyModal');
        const modalTitle = document.getElementById('modalTitle');
        const modalBody = document.getElementById('modalBody');

        modalTitle.textContent = `Weekly Classes - ${subjectName} (${teacherName})`;
        modalBody.innerHTML = `
            <div class="loading-spinner">
                <div class="spinner"></div>
                <span>Loading weekly classes...</span>
            </div>
        `;

        modal.classList.add('show');

        try {
            const response = await fetch(`/Student/GetWeeklyClasses/${ITEM_KEY}?subjectCode=${subjectCode}&teacherCode=${teacherCode}&yearCode=${yearCode}&branchCode=${branchCode}`);
            const classes = await response.json();

            if (classes.error) {
                modalBody.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-exclamation-triangle"></i>
                        <h4>Error</h4>
                        <p>${classes.error}</p>
                    </div>
                `;
                return;
            }

            renderWeeklyClasses(classes);
        } catch (error) {
            console.error('Error loading weekly classes:', error);
            modalBody.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h4>Error</h4>
                    <p>Failed to load weekly classes.</p>
                </div>
            `;
        }
    }

    // Render weekly classes
    function renderWeeklyClasses(classes) {
        const modalBody = document.getElementById('modalBody');

        if (classes.length === 0) {
            modalBody.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-calendar-times"></i>
                    <h4>No Classes This Week</h4>
                    <p>There are no classes scheduled for this week.</p>
                </div>
            `;
            return;
        }

        modalBody.innerHTML = `
            <div class="upcoming-classes-grid">
                ${classes.map(classItem => `
                    <div class="class-card ${classItem.isAttended ? 'attended' : ''}">
                        <div class="class-header">
                            <div class="class-icon">
                                <i class="fas fa-chalkboard-teacher"></i>
                            </div>
                            <div class="class-info">
                                <h3>${classItem.className}</h3>
                                <div class="class-subject">${classItem.subjectName}</div>
                            </div>
                        </div>
                        <div class="class-details">
                            <div class="class-detail">
                                <i class="fas fa-calendar-day"></i>
                                <span>${classItem.dayOfWeek} - ${classItem.classDate}</span>
                            </div>
                            <div class="class-detail">
                                <i class="fas fa-user-tie"></i>
                                <span>${classItem.teacherName}</span>
                            </div>
                            <div class="class-detail">
                                <i class="fas fa-building"></i>
                                <span>${classItem.branchName}</span>
                            </div>
                            <div class="class-detail">
                                <i class="fas fa-door-open"></i>
                                <span>${classItem.hallName}</span>
                            </div>
                        </div>
                        <div class="class-time">
                            <div class="time-info">
                                <div class="time-label">Start Time</div>
                                <div class="time-value">${classItem.startTime}</div>
                            </div>
                            <div class="time-info">
                                <div class="time-label">End Time</div>
                                <div class="time-value">${classItem.endTime}</div>
                            </div>
                        </div>
                        ${classItem.isAttended ?
                            '<div class="attended-badge"><i class="fas fa-check"></i><span>Attended</span></div>' :
                            classItem.isCurrentlyAvailable && CAN_MARK_ATTENDANCE ?
                                `<div class="attendance-controls">
                                    <select class="attendance-type-select" id="weeklyAttendanceType_${classItem.classCode}">
                                        ${attendanceTypes.map(type => `<option value="${type.value}">${type.text}</option>`).join('')}
                                    </select>
                                    <button class="attend-btn" onclick="markWeeklyAttendance(${classItem.classCode})" id="weeklyAttendBtn_${classItem.classCode}">
                                        <i class="fas fa-check"></i>
                                        <span>Mark Attendance</span>
                                    </button>
                                </div>` :
                                '<div class="unauthorized-message"><i class="fas fa-clock"></i><span>Not available for attendance</span></div>'
                        }
                    </div>
                `).join('')}
            </div>
        `;
    }

    // Mark attendance from weekly view
    async function markWeeklyAttendance(classCode) {
        const button = document.getElementById(`weeklyAttendBtn_${classCode}`);
        const select = document.getElementById(`weeklyAttendanceType_${classCode}`);

        if (!button || !select) return;

        const attendanceType = parseInt(select.value);

        // Update button state
        button.disabled = true;
        button.classList.add('attending');
        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i><span>Marking...</span>';

        try {
            const response = await fetch('/Student/MarkAttendance', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    itemKey: ITEM_KEY,
                    classCode: classCode,
                    attendanceType: attendanceType
                })
            });

            const result = await response.json();

            if (result.success) {
                showAlert('Attendance marked successfully!', 'success');
                // Update the button to show attended state
                button.parentElement.innerHTML = '<div class="attended-badge"><i class="fas fa-check"></i><span>Attended</span></div>';
                // Also reload the main upcoming classes
                loadUpcomingClasses();
            } else {
                showAlert(result.error || 'Failed to mark attendance.', 'error');
                // Reset button state
                button.disabled = false;
                button.classList.remove('attending');
                button.innerHTML = '<i class="fas fa-check"></i><span>Mark Attendance</span>';
            }
        } catch (error) {
            console.error('Error marking attendance:', error);
            showAlert('An error occurred while marking attendance.', 'error');
            // Reset button state
            button.disabled = false;
            button.classList.remove('attending');
            button.innerHTML = '<i class="fas fa-check"></i><span>Mark Attendance</span>';
        }
    }

    // Close weekly modal
    function closeWeeklyModal() {
        document.getElementById('weeklyModal').classList.remove('show');
    }

    // Show error in container
    function showError(containerId, message) {
        const container = document.getElementById(containerId);
        container.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-exclamation-triangle"></i>
                <h4>Error</h4>
                <p>${message}</p>
            </div>
        `;
    }
</script>