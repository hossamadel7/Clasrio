@using Microsoft.Extensions.Localization
@using System.Globalization
@inject IStringLocalizerFactory LocalizerFactory
@model centrny.Controllers.StudentProfileViewModel

@{
    var Localizer = LocalizerFactory.Create("Student", System.Reflection.Assembly.GetExecutingAssembly().GetName().Name);
    ViewData["Title"] = Localizer["StudentProfile"];
    var isArabic = CultureInfo.CurrentUICulture.TwoLetterISOLanguageName == "ar";
    var htmlLang = CultureInfo.CurrentUICulture.TwoLetterISOLanguageName;
    var htmlDir = isArabic ? "rtl" : "ltr";
}
<!DOCTYPE html>
<html lang="@htmlLang" dir="@htmlDir">
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"]</title>
    @if (isArabic)
    {
        <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.rtl.min.css" rel="stylesheet" />
    }
    else
    {
        <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet" />
    }
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />
    <link href="~/css/student-profile.css" rel="stylesheet" />
    <style>
        html[dir="rtl"] body,
        html[dir="rtl"] .container-fluid,
        html[dir="rtl"] .profile-content {
            direction: rtl;
            text-align: right;
        }
        </style>
</head>
<body>
    <!-- JS Localization keys -->
    <div id="js-localization"
         data-student-profile="@Localizer["StudentProfile"]"
         data-academic-year="@Localizer["AcademicYear"]"
         data-branch="@Localizer["Branch"]"
         data-student="@Localizer["Student"]"
         data-active-student="@Localizer["ActiveStudent"]"
         data-inactive-student="@Localizer["InactiveStudent"]"
         data-parent-phone="@Localizer["ParentPhone"]"
         data-student-phone="@Localizer["StudentPhone"]"
         data-todays-classes="@Localizer["TodaysClasses"]"
         data-admin-view="@Localizer["AdminView"]"
         data-viewing-todays-classes-only-admins="@Localizer["ViewingTodaysClassesOnlyAdmins"]"
         data-loading-todays-classes="@Localizer["LoadingTodaysClasses"]"
         data-enrolled-subjects="@Localizer["EnrolledSubjects"]"
         data-search-subjects="@Localizer["SearchSubjects"]"
         data-loading-subjects="@Localizer["LoadingSubjects"]"
         data-weekly-classes="@Localizer["WeeklyClasses"]"
         data-no-subjects-found="@Localizer["NoSubjectsFound"]"
         data-no-subjects-found-msg="@Localizer["NoSubjectsFoundMsg"]"
         data-no-classes-available="@Localizer["NoClassesAvailable"]"
         data-no-classes-available-msg="@Localizer["NoClassesAvailableMsg"]"
         data-no-classes-this-week="@Localizer["NoClassesThisWeek"]"
         data-no-classes-this-week-msg="@Localizer["NoClassesThisWeekMsg"]"
         data-loading-weekly-classes="@Localizer["LoadingWeeklyClasses"]"
         data-error="@Localizer["Error"]"
         data-failed-to-load-subjects="@Localizer["FailedToLoadSubjects"]"
         data-failed-to-load-classes="@Localizer["FailedToLoadClasses"]"
         data-attended="@Localizer["Attended"]"
         data-already-attended="@Localizer["AlreadyAttended"]"
         data-mark-attendance="@Localizer["MarkAttendance"]"
         data-not-available-for-attendance="@Localizer["NotAvailableForAttendance"]"
         data-only-admins-attendance="@Localizer["OnlyAdminsAttendance"]"
         data-attendance-marked-successfully="@Localizer["AttendanceMarkedSuccessfully"]"
         data-failed-to-mark-attendance="@Localizer["FailedToMarkAttendance"]"
         data-attendance-error="@Localizer["AttendanceError"]"
         data-marking="@Localizer["Marking"]"
         data-start-time="@Localizer["StartTime"]"
         data-end-time="@Localizer["EndTime"]"
         data-free="@Localizer["Free"]"
         data-online="@Localizer["Online"]"
         data-in-person="@Localizer["InPerson"]"
         data-na="@Localizer["NA"]" />
    <div class="container-fluid student-profile-page">
        <div class="profile-container">
            <!-- Profile Header -->
            <div class="profile-header">
                <div class="container">
                    <div class="row align-items-center justify-content-center g-4">
                        <div class="col-12 main-profile text-center">
                            <div class="profile-avatar"><i class="fas fa-user-graduate"></i></div>
                            <h1 class="profile-name">@Model.StudentName</h1>
                            <p class="profile-subtitle">@Model.YearName @(!string.IsNullOrEmpty(Model.LevelName) ? $"- {Model.LevelName}" : "") <span id="student-label"></span></p>
                            <div class="profile-status">
                                <i class="fas @(Model.IsActive ? "fa-check-circle" : "fa-times-circle")"></i>
                                <span id="status-label"></span>
                            </div>

                            <!-- 4 Info Cards in a Single Row -->
                            <div class="row justify-content-center mt-4">
                                <div class="col-12 col-md-3 mb-3">
                                    <div class="header-info-card">
                                        <div class="card-content">
                                            <div class="card-icon"><i class="fas fa-graduation-cap"></i></div>
                                            <div class="card-text">
                                                <span id="academic-year-label"></span>
                                                <div class="card-value">@(!string.IsNullOrEmpty(Model.YearName) ? Model.YearName : "")</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12 col-md-3 mb-3">
                                    <div class="header-info-card">
                                        <div class="card-content">
                                            <div class="card-icon"><i class="fas fa-building"></i></div>
                                            <div class="card-text">
                                                <span id="branch-label"></span>
                                                <div class="card-value">@(!string.IsNullOrEmpty(Model.BranchName) ? Model.BranchName : "")</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12 col-md-3 mb-3">
                                    <div class="header-info-card">
                                        <div class="card-content">
                                            <div class="card-icon"><i class="fas fa-phone-alt"></i></div>
                                            <div class="card-text">
                                                <span id="parent-phone-label"></span>
                                                <div class="card-value">@Model.StudentParentPhone</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12 col-md-3 mb-3">
                                    <div class="header-info-card">
                                        <div class="card-content">
                                            <div class="card-icon"><i class="fas fa-phone"></i></div>
                                            <div class="card-text">
                                                <span id="student-phone-label"></span>
                                                <div class="card-value">@Model.StudentPhone</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <a href="@Url.Action("StudentData", "Student", new { item_key = Model.ItemKey })" class="modern-link-btn">
                <i class="fas fa-tasks"></i> @Localizer["ViewAssignmentsAndExams"]
            </a>
            <!-- Profile Content -->
            <div class="profile-content">
                <!-- Upcoming Classes -->
                <div class="section-card">
                    <div class="section-header">
                        <h2 class="section-title" id="todays-classes-title"></h2>
                        @if (Model.CanMarkAttendance)
                        {
                            <span id="admin-view-label" class="admin-badge"></span>
                        }
                    </div>
                    <div class="section-content">
                        @if (!Model.CanMarkAttendance)
                        {
                            <div class="unauthorized-message">
                                <i class="fas fa-info-circle"></i>
                                <span id="viewing-todays-classes-only-admins-label"></span>
                            </div>
                        }
                        <div id="upcomingClassesGrid" class="upcoming-classes-grid">
                            <div class="loading-spinner">
                                <div class="spinner"></div>
                                <span id="loading-todays-classes-label"></span>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Student Subjects -->
                <div class="section-card">
                    <div class="section-header">
                        <h2 class="section-title" id="enrolled-subjects-title"></h2>
                        <div class="filter-controls">
                            <input type="text" id="subjectSearch" class="search-input" placeholder="" />
                        </div>
                    </div>
                    <div class="section-content">
                        <div id="subjectsGrid" class="subjects-grid">
                            <div class="loading-spinner">
                                <div class="spinner"></div>
                                <span id="loading-subjects-label"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Weekly Classes Modal -->
    <div id="weeklyModal" class="modal-overlay">
        <div class="weekly-modal">
            <div class="modal-header">
                <h3 class="modal-title" id="modalTitle"></h3>
                <button class="close-btn" onclick="closeWeeklyModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body" id="modalBody">
                <!-- Dynamic content will be loaded here -->
            </div>
        </div>
    </div>
    <!-- Attendance Password Modal -->
    <div id="attendancePasswordModal" class="attendance-password-modal">
        <div class="modal-dialog">
            <div class="modal-header">
                Attendance Authorization
                <button class="close-btn" type="button" onclick="closeAttendancePasswordModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div id="attendancePasswordError" class="error-msg" style="display:none;"></div>
            <form id="attendancePasswordForm" autocomplete="off" onsubmit="return false;">
                <div class="form-group">
                    <label for="attendancePasswordInput">Please enter your password:</label>
                    <input type="password" class="form-control" id="attendancePasswordInput" autocomplete="off" />
                </div>
                <div style="display:flex; justify-content:flex-end; gap:10px;">
                    <button type="button" class="btn btn-secondary" onclick="closeAttendancePasswordModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="attendancePasswordSubmitBtn">
                        Submit
                    </button>
                </div>
            </form>
        </div>
    </div>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script>
        // ---- localStorage branch auth helpers ----
        function isBranchAuthorized(branchCode) {
            let auth = localStorage.getItem('authorizedBranches');
            if (!auth) return false;
            try {
                let obj = JSON.parse(auth);
                return !!obj[branchCode];
            } catch {
                return false;
            }
        }
        function setBranchAuthorized(branchCode) {
            let auth = localStorage.getItem('authorizedBranches');
            let obj = {};
            if (auth) {
                try { obj = JSON.parse(auth); } catch {}
            }
            obj[branchCode] = true;
            localStorage.setItem('authorizedBranches', JSON.stringify(obj));
        }

        function getJsString(key) { return $('#js-localization').data(key); }
        function setStudentLabels() {
            $('#academic-year-label').text(getJsString('academic-year'));
            $('#branch-label').text(getJsString('branch'));
            $('#student-label').text(getJsString('student'));
            $('#parent-phone-label').text(getJsString('parent-phone'));
            $('#student-phone-label').text(getJsString('student-phone'));
            $('#todays-classes-title').text(getJsString('todays-classes'));
            $('#admin-view-label').text(getJsString('admin-view'));
            $('#viewing-todays-classes-only-admins-label').text(getJsString('viewing-todays-classes-only-admins'));
            $('#loading-todays-classes-label').text(getJsString('loading-todays-classes'));
            $('#enrolled-subjects-title').text(getJsString('enrolled-subjects'));
            $('#subjectSearch').attr('placeholder', getJsString('search-subjects'));
            $('#loading-subjects-label').text(getJsString('loading-subjects'));
            $('#modalTitle').text(getJsString('weekly-classes'));
            $('#status-label').text(getJsString('@(Model.IsActive ? "active-student" : "inactive-student")'));
        }
        const ITEM_KEY = '@Model.ItemKey';
        const CAN_MARK_ATTENDANCE = "@Model.CanMarkAttendance.ToString().ToLower()";
        let subjectsData = [];
        let attendanceTypes = [];
        let upcomingClassesData = [];
        let lastBranchCode = null;

        function showError(containerId, key) {
            const container = document.getElementById(containerId);
            container.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h4>${getJsString('error')}</h4>
                    <p>${getJsString(key)}</p>
                </div>
            `;
        }

        function renderEmptyState(icon, titleKey, msgKey) {
            return `<div class="empty-state">
                <i class="fas ${icon}"></i>
                <h4>${getJsString(titleKey)}</h4>
                <p>${getJsString(msgKey)}</p>
            </div>`;
        }

        async function loadAttendanceTypes() {
            try {
                const response = await fetch('/Student/GetAttendanceTypes');
                attendanceTypes = await response.json();
            } catch {}
        }
        async function loadStudentSubjects() {
            try {
                const response = await fetch(`/Student/GetStudentSubjects/${ITEM_KEY}`);
                const data = await response.json();
                subjectsData = data;
                renderSubjects(data);
            } catch {
                showError('subjectsGrid', 'failed-to-load-subjects');
            }
        }
        function renderSubjects(subjects) {
            const container = document.getElementById('subjectsGrid');
            if (subjects.length === 0) {
                container.innerHTML = renderEmptyState('fa-book-open', 'no-subjects-found', 'no-subjects-found-msg');
                return;
            }
            container.innerHTML = subjects.map(subject => `
                <div class="subject-card">
                    <div class="subject-header">
                        <div class="subject-icon">
                            <i class="fas fa-book"></i>
                        </div>
                        <h3 class="subject-name">${subject.subjectName}</h3>
                    </div>
                    <div class="subject-details">
                        <div class="subject-detail">
                            <i class="fas fa-chalkboard-teacher"></i>
                            <span>${subject.teacherName}</span>
                        </div>
                        <div class="subject-detail">
                            <i class="fas fa-phone"></i>
                            <span>${subject.teacherPhone || getJsString('na')}</span>
                        </div>
                        <div class="subject-detail">
                            <i class="fas fa-building"></i>
                            <span>${subject.branchName}</span>
                        </div>
                        <div class="subject-detail">
                            <i class="fas fa-graduation-cap"></i>
                            <span>${subject.eduYearName}</span>
                        </div>
                        <div class="subject-detail">
                            <i class="fas fa-dollar-sign"></i>
                            <span>${subject.studentFee ? subject.studentFee + ' EGP' : getJsString('free')}</span>
                        </div>
                        <div class="subject-detail">
                            <i class="fas fa-${subject.isOnline ? 'laptop' : 'school'}"></i>
                            <span>${subject.isOnline ? getJsString('online') : getJsString('in-person')}</span>
                        </div>
                    </div>
                    ${subject.scheduleDay ? `
                        <div class="schedule-info">
                            <div class="schedule-day">
                                <i class="fas fa-calendar-day"></i>
                                ${subject.scheduleDay}
                            </div>
                            ${subject.scheduleStartTime && subject.scheduleEndTime ? `
                                <div class="schedule-time">
                                    <i class="fas fa-clock"></i>
                                    <span>${subject.scheduleStartTime} - ${subject.scheduleEndTime}</span>
                                </div>
                            ` : ''}
                            ${subject.hallName ? `
                                <div class="subject-detail" style="margin-top: 0.5rem;">
                                    <i class="fas fa-door-open"></i>
                                    <span>${subject.hallName}</span>
                                </div>
                            ` : ''}
                        </div>
                    ` : ''}
                    <div style="margin-top: 1rem;">
                        <button class="view-weekly-btn" onclick="viewWeeklyClasses(${subject.subjectCode}, ${subject.teacherCode}, ${subject.rootCode}, ${subject.branchCode}, '${subject.subjectName}', '${subject.teacherName}')">
                            <i class="fas fa-calendar-week"></i>
                            ${getJsString('weekly-classes')}
                        </button>
                    </div>
                </div>
            `).join('');
        }
        function filterSubjects(searchTerm) {
            const filtered = subjectsData.filter(subject =>
                subject.subjectName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                subject.teacherName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                subject.branchName.toLowerCase().includes(searchTerm.toLowerCase())
            );
            renderSubjects(filtered);
        }
        async function loadUpcomingClasses() {
            try {
                const response = await fetch(`/Student/GetUpcomingClasses/${ITEM_KEY}`);
                const data = await response.json();
                upcomingClassesData = data;
                renderUpcomingClasses(data);
            } catch {
                showError('upcomingClassesGrid', 'failed-to-load-classes');
            }
        }

        function getDiscountAttendanceType() {
            return attendanceTypes.find(type =>
                type.text.toLowerCase().includes('discount') ||
                type.text.includes('خصم')
            );
        }

        function renderAttendanceControls(classItem) {
            if (!classItem.canAttend) {
                return `
                    <div class="attended-badge">
                        <i class="fas fa-check"></i>
                        <span>${getJsString('already-attended')}</span>
                    </div>
                `;
            }
            if (!isBranchAuthorized(classItem.branchCode)) {
                return '';
            }
            const discountType = getDiscountAttendanceType();
            const discountValue = discountType ? discountType.value : null;
            return `
                <div class="attendance-controls">
                    <select class="attendance-type-select" id="attendanceType_${classItem.classCode}" onchange="onAttendanceTypeChange(${classItem.classCode})">
                        ${attendanceTypes.map(type => `<option value="${type.value}">${type.text}</option>`).join('')}
                    </select>
                    <input type="number" min="0" step="1" placeholder="Session price" class="discount-price-input" id="discountPrice_${classItem.classCode}" style="display:none;" />
                    <button class="attend-btn" onclick="markAttendance(${classItem.classCode})" id="attendBtn_${classItem.classCode}">
                        <i class="fas fa-check"></i>
                        <span>${getJsString('mark-attendance')}</span>
                    </button>
                </div>
            `;
        }

               function onAttendanceTypeChange(classCode) {
            const select = document.getElementById(`attendanceType_${classCode}`);
            const input = document.getElementById(`discountPrice_${classCode}`);
            const discountType = getDiscountAttendanceType();
            const discountValue = discountType ? discountType.value.toString() : null;
            if (select.value === discountValue) {
                input.style.display = 'inline-block'; // <-- FIXED
            } else {
                input.style.display = 'none';
                input.value = '';
            }
        }

               async function markAttendance(classCode) {
            const button = document.getElementById(`attendBtn_${classCode}`);
            const select = document.getElementById(`attendanceType_${classCode}`);
            const discountInput = document.getElementById(`discountPrice_${classCode}`);
            if (!button || !select) return;
            const attendanceType = parseInt(select.value);
            const discountType = getDiscountAttendanceType();
            const discountValue = discountType ? Number(discountType.value) : null;
            let sessionPrice = null;
            if (attendanceType === discountValue && discountInput && discountInput.value) {
                sessionPrice = parseInt(discountInput.value);
            }
            button.disabled = true;
            button.classList.add('attending');
            button.innerHTML = `<i class="fas fa-spinner fa-spin"></i><span>${getJsString('marking')}</span>`;
            try {
                const payload = { itemKey: ITEM_KEY, classCode: classCode, attendanceType: attendanceType };
                if (sessionPrice !== null) {
                    payload.sessionPrice = sessionPrice;
                }
                const response = await fetch('/Student/MarkAttendance', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                const result = await response.json();
                if (result.success) {
                    alert(getJsString('attendance-marked-successfully'));
                    loadUpcomingClasses();
                } else {
                    alert(result.error || getJsString('failed-to-mark-attendance'));
                    button.disabled = false;
                    button.classList.remove('attending');
                    button.innerHTML = `<i class="fas fa-check"></i><span>${getJsString('mark-attendance')}</span>`;
                }
            } catch {
                alert(getJsString('attendance-error'));
                button.disabled = false;
                button.classList.remove('attending');
                button.innerHTML = `<i class="fas fa-check"></i><span>${getJsString('mark-attendance')}</span>`;
            }
        }

        function renderUpcomingClasses(classes) {
            const container = document.getElementById('upcomingClassesGrid');
            if (classes.length === 0) {
                container.innerHTML = renderEmptyState('fa-clock', 'no-classes-available', 'no-classes-available-msg');
                return;
            }
            container.innerHTML = classes.map(classItem => `
                <div class="class-card ${!classItem.canAttend ? 'attended' : ''}"
                    style="cursor:pointer;"
                    data-class='${JSON.stringify(classItem).replace(/'/g, "&apos;")}'
                    onclick='onClassCardClick(this.getAttribute("data-class"))'>
                    <div class="class-header">
                        <div class="class-icon">
                            <i class="fas fa-chalkboard-teacher"></i>
                        </div>
                        <div class="class-info">
                            <h3>${classItem.className}</h3>
                            <div class="class-subject">${classItem.subjectName}</div>
                        </div>
                    </div>
                    <div class="class-details">
                        <div class="class-detail">
                            <i class="fas fa-user-tie"></i>
                            <span>${classItem.teacherName}</span>
                        </div>
                        <div class="class-detail">
                            <i class="fas fa-building"></i>
                            <span>${classItem.branchName}</span>
                        </div>
                        <div class="class-detail">
                            <i class="fas fa-door-open"></i>
                            <span>${classItem.hallName}</span>
                        </div>
                        <div class="class-detail">
                            <i class="fas fa-dollar-sign"></i>
                            <span>${classItem.totalAmount ? classItem.totalAmount + ' EGP' : getJsString('free')}</span>
                        </div>
                    </div>
                    <div class="class-time">
                        <div class="time-info">
                            <div class="time-label">${getJsString('start-time')}</div>
                            <div class="time-value">${classItem.startTime}</div>
                        </div>
                        <div class="time-info">
                            <div class="time-label">${getJsString('end-time')}</div>
                            <div class="time-value">${classItem.endTime}</div>
                        </div>
                    </div>
                    ${renderAttendanceControls(classItem)}
                </div>
            `).join('');
        }

        function onClassCardClick(classItemJson) {
            let classItem;
            try {
                classItem = JSON.parse(classItemJson.replace(/&apos;/g, "'"));
            } catch {
                classItem = null;
            }
            lastBranchCode = classItem ? classItem.branchCode : null;
            if (!isBranchAuthorized(lastBranchCode)) {
                $('#attendancePasswordInput').val('');
                $('#attendancePasswordError').hide();
                $('#attendancePasswordModal').addClass('show');
                setTimeout(() => {
                    $('#attendancePasswordInput').focus();
                }, 200);
            }
        }

        function closeAttendancePasswordModal() {
            $('#attendancePasswordModal').removeClass('show');
        }

        $('#attendancePasswordForm').on('submit', async function() {
            const password = $('#attendancePasswordInput').val();
            if (!password) return;
            $('#attendancePasswordSubmitBtn').attr('disabled', true);
            $('#attendancePasswordError').hide();
            try {
                const res = await fetch('/Student/CheckAttendancePassword', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        Password: password,
                        BranchCode: lastBranchCode
                    })
                });
                const result = await res.json();
                if (result.success) {
                    $('#attendancePasswordModal').removeClass('show');
                    setBranchAuthorized(lastBranchCode);
                    renderUpcomingClasses(upcomingClassesData);
                } else {
                    $('#attendancePasswordError').text(result.error || 'Wrong password or not authorized.').show();
                    $('#attendancePasswordInput').val('').focus();
                }
            } finally {
                $('#attendancePasswordSubmitBtn').attr('disabled', false);
            }
        });

        async function viewWeeklyClasses(subjectCode, teacherCode, yearCode, branchCode, subjectName, teacherName) {
            const modal = document.getElementById('weeklyModal');
            const modalTitle = document.getElementById('modalTitle');
            const modalBody = document.getElementById('modalBody');
            modalTitle.textContent = `${getJsString('weekly-classes')} - ${subjectName} (${teacherName})`;
            modalBody.innerHTML = `
                <div class="loading-spinner">
                    <div class="spinner"></div>
                    <span>${getJsString('loading-weekly-classes')}</span>
                </div>
            `;
            modal.classList.add('show');
            try {
                const response = await fetch(`/Student/GetWeeklyClasses/${ITEM_KEY}?subjectCode=${subjectCode}&teacherCode=${teacherCode}&yearCode=${yearCode}&branchCode=${branchCode}`);
                const classes = await response.json();
                if (classes.error) {
                    modalBody.innerHTML = `
                        <div class="empty-state">
                            <i class="fas fa-exclamation-triangle"></i>
                            <h4>${getJsString('error')}</h4>
                            <p>${classes.error}</p>
                        </div>
                    `;
                    return;
                }
                renderWeeklyClasses(classes);
            } catch {
                modalBody.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-exclamation-triangle"></i>
                        <h4>${getJsString('error')}</h4>
                        <p>${getJsString('failed-to-load-classes')}</p>
                    </div>
                `;
            }
        }
        function renderWeeklyClasses(classes) {
            const modalBody = document.getElementById('modalBody');
            if (classes.length === 0) {
                modalBody.innerHTML = renderEmptyState('fa-calendar-times', 'no-classes-this-week', 'no-classes-this-week-msg');
                return;
            }
            modalBody.innerHTML = `
                <div class="upcoming-classes-grid">
                    ${classes.map(classItem => `
                        <div class="class-card ${classItem.isAttended ? 'attended' : ''}"
                            style="cursor:pointer;"
                            data-class='${JSON.stringify(classItem).replace(/'/g, "&apos;")}'
                            onclick='onWeeklyClassCardClick(this.getAttribute("data-class"))'>
                            <div class="class-header">
                                <div class="class-icon">
                                    <i class="fas fa-chalkboard-teacher"></i>
                                </div>
                                <div class="class-info">
                                    <h3>${classItem.className}</h3>
                                    <div class="class-subject">${classItem.subjectName}</div>
                                </div>
                            </div>
                            <div class="class-details">
                                <div class="class-detail">
                                    <i class="fas fa-calendar-day"></i>
                                    <span>${classItem.dayOfWeek} - ${classItem.classDate}</span>
                                </div>
                                <div class="class-detail">
                                    <i class="fas fa-user-tie"></i>
                                    <span>${classItem.teacherName}</span>
                                </div>
                                <div class="class-detail">
                                    <i class="fas fa-building"></i>
                                    <span>${classItem.branchName}</span>
                                </div>
                                <div class="class-detail">
                                    <i class="fas fa-door-open"></i>
                                    <span>${classItem.hallName}</span>
                                </div>
                            </div>
                            <div class="class-time">
                                <div class="time-info">
                                    <div class="time-label">${getJsString('start-time')}</div>
                                    <div class="time-value">${classItem.startTime}</div>
                                </div>
                                <div class="time-info">
                                    <div class="time-label">${getJsString('end-time')}</div>
                                    <div class="time-value">${classItem.endTime}</div>
                                </div>
                            </div>
                            ${renderAttendanceControls(classItem)}
                        </div>
                    `).join('')}
                </div>
            `;
        }
        function onWeeklyClassCardClick(classItemJson) {
            let classItem;
            try {
                classItem = JSON.parse(classItemJson.replace(/&apos;/g, "'"));
            } catch {
                classItem = null;
            }
            lastBranchCode = classItem ? classItem.branchCode : null;
            if (!isBranchAuthorized(lastBranchCode)) {
                $('#attendancePasswordInput').val('');
                $('#attendancePasswordError').hide();
                $('#attendancePasswordModal').addClass('show');
                setTimeout(() => {
                    $('#attendancePasswordInput').focus();
                }, 200);
            }
        }

        function closeWeeklyModal() {
            document.getElementById('weeklyModal').classList.remove('show');
        }
        function setupEventListeners() {
            document.getElementById('subjectSearch').addEventListener('input', function(e) {
                filterSubjects(e.target.value);
            });
            document.getElementById('weeklyModal').addEventListener('click', function(e) {
                if (e.target === this) closeWeeklyModal();
            });
        }
        document.addEventListener('DOMContentLoaded', async function() {
            setStudentLabels();
            await loadAttendanceTypes();
            loadUpcomingClasses();
            loadStudentSubjects();
            setupEventListeners();
        });
    </script>
</body>
</html>