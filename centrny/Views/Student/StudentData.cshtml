@using Microsoft.Extensions.Localization
@using System.Globalization
@inject IStringLocalizerFactory LocalizerFactory
@model centrny.Controllers.StudentProfileViewModel

@{
    var Localizer = LocalizerFactory.Create("Student", System.Reflection.Assembly.GetExecutingAssembly().GetName().Name);
    ViewData["Title"] = Localizer["StudentProfile"];
    var isArabic = CultureInfo.CurrentUICulture.TwoLetterISOLanguageName == "ar";
    var htmlLang = CultureInfo.CurrentUICulture.TwoLetterISOLanguageName;
    var htmlDir = isArabic ? "rtl" : "ltr";
}
<!DOCTYPE html>
<html lang="@htmlLang" dir="@htmlDir">
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"]</title>
    @if (isArabic)
    {
        <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.rtl.min.css" rel="stylesheet" />
    }
    else
    {
        <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet" />
    }
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />
    <link href="~/css/student-profile.css" rel="stylesheet" />
    <link href="~/css/studentData.css" rel="stylesheet" />
</head>
<body>
    <!-- JS Localization keys -->
    <div id="js-localization"
         data-student-profile="@Localizer["StudentProfile"]"
         data-academic-year="@Localizer["AcademicYear"]"
         data-branch="@Localizer["Branch"]"
         data-student="@Localizer["Student"]"
         data-active-student="@Localizer["ActiveStudent"]"
         data-inactive-student="@Localizer["InactiveStudent"]"
         data-parent-phone="@Localizer["ParentPhone"]"
         data-student-phone="@Localizer["StudentPhone"]"
         data-upcoming-exams="@Localizer["UpcomingExams"]"
         data-loading-upcoming-exams="@Localizer["LoadingUpcomingExams"]"
         data-attended-exams="@Localizer["AttendedExams"]"
         data-loading-attended-exams="@Localizer["LoadingAttendedExams"]"
         data-assignments="@Localizer["Assignments"]"
         data-loading-assignments="@Localizer["LoadingAssignments"]"
         data-no-upcoming-exams="@Localizer["NoUpcomingExams"]"
         data-no-upcoming-exams-msg="@Localizer["NoUpcomingExamsMsg"]"
         data-no-assignments="@Localizer["NoAssignments"]"
         data-no-assignments-msg="@Localizer["NoAssignmentsMsg"]"
         data-no-attended-exams="@Localizer["NoAttendedExams"]"
         data-no-attended-exams-msg="@Localizer["NoAttendedExamsMsg"]"
         data-error="@Localizer["Error"]"
         data-failed-to-load-exams="@Localizer["FailedToLoadExams"]"
         data-failed-to-load-assignments="@Localizer["FailedToLoadAssignments"]"
         data-attended="@Localizer["Attended"]"
         data-attend-assignment="@Localizer["AttendAssignment"]"
         data-attend-exam="@Localizer["AttendExam"]"
         data-degree="@Localizer["Degree"]"
         data-na="@Localizer["NA"]" />
    <div class="container-fluid student-profile-page">
        <div class="profile-container">
            <!-- Profile Header -->
            <div class="profile-header">
                <div class="container">
                    <div class="row align-items-center justify-content-center g-4">
                        <div class="col-12 main-profile text-center">
                            <div class="profile-avatar"><i class="fas fa-user-graduate"></i></div>
                            <h1 class="profile-name">@Model.StudentName</h1>
                            <p class="profile-subtitle">@Model.YearName @(!string.IsNullOrEmpty(Model.LevelName) ? $"- {Model.LevelName}" : "") <span id="student-label"></span></p>
                            <div class="profile-status">
                                <i class="fas @(Model.IsActive ? "fa-check-circle" : "fa-times-circle")"></i>
                                <span id="status-label"></span>
                            </div>
                            <!-- 4 Info Cards in a Single Row -->
                            <div class="row justify-content-center mt-4">
                                <div class="col-12 col-md-3 mb-3">
                                    <div class="header-info-card">
                                        <div class="card-content">
                                            <div class="card-icon"><i class="fas fa-graduation-cap"></i></div>
                                            <div class="card-text">
                                                <span id="academic-year-label"></span>
                                                <div class="card-value">@(!string.IsNullOrEmpty(Model.YearName) ? Model.YearName : "")</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12 col-md-3 mb-3">
                                    <div class="header-info-card">
                                        <div class="card-content">
                                            <div class="card-icon"><i class="fas fa-building"></i></div>
                                            <div class="card-text">
                                                <span id="branch-label"></span>
                                                <div class="card-value">@(!string.IsNullOrEmpty(Model.BranchName) ? Model.BranchName : "")</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12 col-md-3 mb-3">
                                    <div class="header-info-card">
                                        <div class="card-content">
                                            <div class="card-icon"><i class="fas fa-phone-alt"></i></div>
                                            <div class="card-text">
                                                <span id="parent-phone-label"></span>
                                                <div class="card-value">@Model.StudentParentPhone</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12 col-md-3 mb-3">
                                    <div class="header-info-card">
                                        <div class="card-content">
                                            <div class="card-icon"><i class="fas fa-phone"></i></div>
                                            <div class="card-text">
                                                <span id="student-phone-label"></span>
                                                <div class="card-value">@Model.StudentPhone</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Student Data Content -->
            <div class="profile-content">
                <!-- Upcoming Exams -->
                <div class="section-card">
                    <div class="section-header">
                        <h2 class="section-title" id="upcoming-exams-title"></h2>
                    </div>
                    <div class="section-content">
                        <div id="upcomingExamsGrid" class="exams-grid">
                            <div class="loading-spinner">
                                <div class="spinner"></div>
                                <span id="loading-upcoming-exams-label"></span>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Attended Exams -->
                <div class="section-card">
                    <div class="section-header">
                        <h2 class="section-title" id="attended-exams-title"></h2>
                    </div>
                    <div class="section-content">
                        <div id="attendedExamsGrid" class="attended-exams-flex">
                            <div class="loading-spinner">
                                <div class="spinner"></div>
                                <span id="loading-attended-exams-label"></span>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Assignments -->
                <div class="section-card">
                    <div class="section-header">
                        <h2 class="section-title" id="assignments-title"></h2>
                    </div>
                    <div class="section-content">
                        <div id="assignmentsGrid" class="exams-grid">
                            <div class="loading-spinner">
                                <div class="spinner"></div>
                                <span id="loading-assignments-label"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script>
        // --- Localization Helper ---
        function getJsString(key) { return $('#js-localization').data(key); }

        // --- Set all static and header labels on page load ---
        function setStudentLabels() {
            $('#academic-year-label').text(getJsString('academic-year'));
            $('#branch-label').text(getJsString('branch'));
            $('#student-label').text(getJsString('student'));
            $('#parent-phone-label').text(getJsString('parent-phone'));
            $('#student-phone-label').text(getJsString('student-phone'));
            $('#upcoming-exams-title').text(getJsString('upcoming-exams'));
            $('#loading-upcoming-exams-label').text(getJsString('loading-upcoming-exams'));
            $('#attended-exams-title').text(getJsString('attended-exams'));
            $('#loading-attended-exams-label').text(getJsString('loading-attended-exams'));
            $('#assignments-title').text(getJsString('assignments'));
            $('#loading-assignments-label').text(getJsString('loading-assignments'));
            $('#status-label').text(getJsString('@(Model.IsActive ? "active-student" : "inactive-student")'));
        }

        const ITEM_KEY = '@Model.ItemKey';

        let upcomingExamsData = [];
        let attendedExamsData = [];
        let assignmentsData = [];

        function showAlert(message, type = 'info') {
            const alertContainer = document.getElementById('alertContainer');
            const alertClass = type === 'success' ? 'alert-success'
                            : type === 'error' ? 'alert-error'
                            : 'alert-info';
            const iconClass = type === 'success' ? 'fa-check-circle'
                           : type === 'error' ? 'fa-exclamation-triangle'
                           : 'fa-info-circle';

            alertContainer.innerHTML = `
                <div class="alert-message ${alertClass}">
                    <i class="fas ${iconClass}"></i>
                    <span>${message}</span>
                </div>
            `;
            setTimeout(() => { alertContainer.innerHTML = ''; }, 5000);
        }

        function showError(containerId, key) {
            const container = document.getElementById(containerId);
            container.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h4>${getJsString('error')}</h4>
                    <p>${getJsString(key)}</p>
                </div>
            `;
        }

        function renderEmptyState(icon, titleKey, msgKey) {
            return `<div class="empty-state">
                <i class="fas ${icon}"></i>
                <h4>${getJsString(titleKey)}</h4>
                <p>${getJsString(msgKey)}</p>
            </div>`;
        }

        // ---- Exams ----
        async function loadUpcomingExams() {
            try {
                const response = await fetch(`/Student/GetUpcomingExams/${ITEM_KEY}`);
                const data = await response.json();
                upcomingExamsData = data.filter(e => !e.attended);
                renderUpcomingExams(upcomingExamsData);
            } catch {
                showError('upcomingExamsGrid', 'failed-to-load-exams');
            }
        }
        function renderUpcomingExams(exams) {
            const container = document.getElementById('upcomingExamsGrid');
            if (!exams || exams.length === 0) {
                container.innerHTML = renderEmptyState('fa-file-alt', 'no-upcoming-exams', 'no-upcoming-exams-msg');
                return;
            }
            container.innerHTML = exams.map(exam => {
                const hideAttendBtn = exam.isDone && !exam.attended;
                return `
                <div class="exam-card">
                    <div class="exam-header">
                        <div class="exam-icon"><i class="fas fa-file-alt"></i></div>
                        <h3 class="exam-name">${exam.examName}</h3>
                    </div>
                    <div class="exam-details">
                        <div class="exam-detail"><i class="fas fa-book"></i> <span>${exam.subjectName}</span></div>
                        <div class="exam-detail"><i class="fas fa-chalkboard-teacher"></i> <span>${exam.teacherName}</span></div>
                    </div>
                    <div style="margin-top: 1rem;">
                        ${
                            hideAttendBtn
                            ? `<div class="alert-error" style="margin-top:10px;">This exam is closed and cannot be attended.</div>`
                            : `<button class="attend-exam-btn" onclick="attendExam(${exam.examCode})">
                                 <i class="fas fa-play"></i> ${getJsString('attend-exam')}
                               </button>`
                        }
                    </div>
                </div>
                `;
            }).join('');
        }
        function attendExam(examCode) {
            const studentCode = '@Model.StudentCode';
            window.location.href = `/StudentExam?studentCode=${studentCode}&examCode=${examCode}&itemKey=${ITEM_KEY}`;
        }
        async function loadAttendedExams() {
            try {
                const response = await fetch(`/Student/GetAttendedExams/${ITEM_KEY}`);
                const data = await response.json();
                attendedExamsData = data;
                renderAttendedExams(data);
            } catch {
                showError('attendedExamsGrid', 'failed-to-load-exams');
            }
        }
        function renderAttendedExams(exams) {
            const container = document.getElementById('attendedExamsGrid');
            if (!exams || exams.length === 0) {
                container.innerHTML = renderEmptyState('fa-check-double', 'no-attended-exams', 'no-attended-exams-msg');
                return;
            }
            container.innerHTML = exams.map(exam => `
                <div class="exam-card attended">
                    <div class="exam-header">
                        <div class="exam-icon"><i class="fas fa-check-double"></i></div>
                        <h3 class="exam-name">${exam.examName}</h3>
                    </div>
                    <div class="exam-details">
                        <div class="exam-detail"><i class="fas fa-book"></i> <span>${exam.subjectName}</span></div>
                        <div class="exam-detail"><i class="fas fa-chalkboard-teacher"></i> <span>${exam.teacherName}</span></div>
                        <div class="exam-detail"><i class="fas fa-star"></i> <span>${getJsString('degree')}: ${exam.degree ?? getJsString('na')} / ${exam.examDegree ?? getJsString('na')}</span></div>
                        ${exam.examDate ? `<div class="exam-detail"><i class="fas fa-calendar"></i> <span>${exam.examDate}</span></div>` : ''}
                    </div>
                </div>
            `).join('');
        }
        // ---- Assignments ----
        async function loadAssignments() {
            try {
                const response = await fetch(`/Student/GetAssignments/${ITEM_KEY}`);
                const data = await response.json();
                assignmentsData = data;
                renderAssignments(data);
            } catch {
                showError('assignmentsGrid', 'failed-to-load-assignments');
            }
        }
        function renderAssignments(assignments) {
            const container = document.getElementById('assignmentsGrid');
            if (!assignments || assignments.length === 0) {
                container.innerHTML = renderEmptyState('fa-tasks', 'no-assignments', 'no-assignments-msg');
                return;
            }
            container.innerHTML = assignments.map(assignment => {
                const hideAttendBtn = assignment.isDone && !assignment.attended;
                return `
                <div class="exam-card ${assignment.attended ? 'attended' : ''}">
                    <div class="exam-header">
                        <div class="exam-icon"><i class="fas fa-tasks"></i></div>
                        <h3 class="exam-name">${assignment.examName}</h3>
                    </div>
                    <div class="exam-details">
                        <div class="exam-detail"><i class="fas fa-book"></i> <span>${assignment.subjectName}</span></div>
                        <div class="exam-detail"><i class="fas fa-chalkboard-teacher"></i> <span>${assignment.teacherName}</span></div>
                    </div>
                    <div style="margin-top: 1rem;">
                        ${
                            assignment.attended
                            ? `<button class="attend-exam-btn" disabled><i class="fas fa-check"></i> ${getJsString('attended')}</button>`
                            : (
                                hideAttendBtn
                                ? `<div class="alert-error" style="margin-top:10px;">This assignment is closed and cannot be attended.</div>`
                                : `<button class="attend-exam-btn" onclick="attendExam(${assignment.examCode})"><i class="fas fa-play"></i> ${getJsString('attend-assignment')}</button>`
                            )
                        }
                    </div>
                </div>
                `;
            }).join('');
        }

        function setupEventListeners() {
            // No input listeners needed here for split view
        }

        document.addEventListener('DOMContentLoaded', function() {
            setStudentLabels();
            loadUpcomingExams();
            loadAttendedExams();
            loadAssignments();
            setupEventListeners();
        });
    </script>
</body>
</html>