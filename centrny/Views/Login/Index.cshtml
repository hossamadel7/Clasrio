@using centrny.Resources
@{
    ViewData["Title"] = Login.Title_Login;
    Layout = null;
}
<!DOCTYPE html>
<html lang="@System.Threading.Thread.CurrentThread.CurrentUICulture.TwoLetterISOLanguageName" dir="@(System.Threading.Thread.CurrentThread.CurrentUICulture.TextInfo.IsRightToLeft ? "rtl" : "ltr")">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@Login.Title_LoginPage</title>

    <!-- External CSS Libraries -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet" />

    <!-- Custom CSS -->
    <link rel="stylesheet" href="~/css/clasrio-login.css" asp-append-version="true" />

    <!-- Favicon -->
    <link rel="icon" type="image/png" href="~/Image/clasrio-high-resolution-logoo.png">
</head>
<body>
    <div class="login-container">
        <!-- Login Header with Logo -->
        <div class="login-header">
            <div class="logo-container">
                <img src="~/image/clasrio-high-resolution-logo-transparent (2).png" alt="Clasrio" />
            </div>
            <h1>@Login.Login_WelcomeBack</h1>
            <p>@Login.Login_CenterManagementSystem</p>
        </div>

        <!-- Error Messages -->
        @if (ViewBag.Error != null && !string.IsNullOrEmpty(ViewBag.Error.ToString()))
        {
            <div class="alert alert-danger" role="alert">
                <i class="fas fa-exclamation-circle me-2"></i>
                @ViewBag.Error
            </div>
        }

        <!-- Success Messages -->
        @if (ViewBag.Success != null && !string.IsNullOrEmpty(ViewBag.Success.ToString()))
        {
            <div class="alert alert-success" role="alert">
                <i class="fas fa-check-circle me-2"></i>
                @ViewBag.Success
            </div>
        }

        <!-- System Information -->
      

        <!-- Login Form -->
        <form method="post" asp-action="Login" asp-controller="Login" id="loginForm" novalidate>
            @Html.AntiForgeryToken()

            <!-- Return URL Hidden Field -->
            @if (Context.Request.Query.ContainsKey("returnUrl") && !string.IsNullOrEmpty(Context.Request.Query["returnUrl"]))
            {
                <input type="hidden" name="returnUrl" value="@Context.Request.Query["returnUrl"]" />
            }

            <!-- Username Input -->
            <div class="input-group">
                <input type="text"
                       name="username"
                       id="username"
                       class="form-control has-icon"
                       placeholder="@Login.Login_UsernamePlaceholder"
                       required
                       autocomplete="username"
                       maxlength="50"
                       value="@(ViewBag.Username ?? "")" />
                <i class="fas fa-user input-icon"></i>
                <div class="invalid-feedback" id="username-error"></div>
            </div>

            <!-- Password Input -->
            <div class="input-group">
                <input type="password"
                       name="password"
                       id="password"
                       class="form-control has-icon"
                       placeholder="@Login.Login_PasswordPlaceholder"
                       required
                       autocomplete="current-password"
                       maxlength="100" />
                <i class="fas fa-lock input-icon"></i>
                <i class="fas fa-eye password-toggle" id="passwordToggle" title="@Login.Login_PasswordToggle"></i>
                <div class="invalid-feedback" id="password-error"></div>
            </div>

            <!-- Remember Me Checkbox -->
            <div class="form-check">
                <input class="form-check-input" type="checkbox" name="rememberMe" id="rememberMe">
                <label class="form-check-label" for="rememberMe">
                    <i class="fas fa-clock me-1"></i>
                    @Login.Login_RememberMe
                </label>
            </div>

            <!-- Login Button -->
            <button type="submit" class="btn btn-login" id="loginBtn">
                <span class="btn-text">
                    <i class="fas fa-sign-in-alt me-2"></i>
                    @Login.Login_SignIn
                </span>
            </button>

            <!-- Troubleshooting Link -->
          
        </form>
    </div>

    <!-- JavaScript Libraries -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Login Form JavaScript -->
    <script>
        // Localized strings from resources
        const usernameRequiredText = '@Login.Login_UsernameRequired';
        const usernameMinLengthText = '@Login.Login_UsernameMinLength';
        const usernamePatternText = '@Login.Login_UsernamePattern';
        const passwordRequiredText = '@Login.Login_PasswordRequired';
        const passwordMinLengthText = '@Login.Login_PasswordMinLength';
        const signingInText = '@Login.Login_SigningIn';
        const showPasswordText = '@Login.Login_ShowPassword';
        const hidePasswordText = '@Login.Login_HidePassword';
        const findUsernameText = '@Login.Login_FindUsername';
        const runSqlQueryText = '@Login.Login_RunSqlQuery';
        const commonTestCredentialsText = '@Login.Login_CommonTestCredentials';
        const closeText = '@Login.Login_Close';
        const troubleshootingStepsText = '@Login.Login_TroubleshootingSteps';
        const step1Text = '@Login.Login_Step1';
        const step2Text = '@Login.Login_Step2';
        const step3Text = '@Login.Login_Step3';
        const noteText = '@Login.Login_TroubleshootingNote';

        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('loginForm');
            const loginBtn = document.getElementById('loginBtn');
            const usernameInput = document.getElementById('username');
            const passwordInput = document.getElementById('password');
            const passwordToggle = document.getElementById('passwordToggle');

            // Focus username input on page load
            usernameInput.focus();

            // Password toggle functionality
            passwordToggle.addEventListener('click', function() {
                const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                passwordInput.setAttribute('type', type);
                this.classList.toggle('fa-eye');
                this.classList.toggle('fa-eye-slash');
                this.title = type === 'password' ? showPasswordText : hidePasswordText;
            });

            // Real-time validation
            usernameInput.addEventListener('input', validateUsername);
            passwordInput.addEventListener('input', validatePassword);

            // Form submission
            form.addEventListener('submit', function(e) {
                if (!validateForm()) {
                    e.preventDefault();
                    showValidationErrors();
                    return;
                }
                showLoadingState();
            });

            // Keyboard navigation
            usernameInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    passwordInput.focus();
                }
            });

            passwordInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter' && validateForm()) {
                    form.submit();
                }
            });

            // Validation functions
            function validateUsername() {
                const username = usernameInput.value.trim();
                const errorElement = document.getElementById('username-error');

                if (username.length === 0) {
                    setFieldError(usernameInput, errorElement, usernameRequiredText);
                    return false;
                } else if (username.length < 3) {
                    setFieldError(usernameInput, errorElement, usernameMinLengthText);
                    return false;
                } else if (!/^[a-zA-Z0-9_]+$/.test(username)) {
                    setFieldError(usernameInput, errorElement, usernamePatternText);
                    return false;
                } else {
                    clearFieldError(usernameInput, errorElement);
                    return true;
                }
            }

            function validatePassword() {
                const password = passwordInput.value;
                const errorElement = document.getElementById('password-error');

                if (password.length === 0) {
                    setFieldError(passwordInput, errorElement, passwordRequiredText);
                    return false;
                } else if (password.length < 3) {
                    setFieldError(passwordInput, errorElement, passwordMinLengthText);
                    return false;
                } else {
                    clearFieldError(passwordInput, errorElement);
                    return true;
                }
            }

            function validateForm() {
                const isUsernameValid = validateUsername();
                const isPasswordValid = validatePassword();
                return isUsernameValid && isPasswordValid;
            }

            function setFieldError(field, errorElement, message) {
                field.classList.add('is-invalid');
                errorElement.textContent = message;
                errorElement.style.display = 'block';
            }

            function clearFieldError(field, errorElement) {
                field.classList.remove('is-invalid');
                errorElement.textContent = '';
                errorElement.style.display = 'none';
            }

            function showValidationErrors() {
                const container = document.querySelector('.login-container');
                container.classList.add('shake');
                setTimeout(() => container.classList.remove('shake'), 500);
            }

            function showLoadingState() {
                loginBtn.classList.add('loading');
                loginBtn.disabled = true;
                loginBtn.querySelector('.btn-text').innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>' + signingInText;
            }

            function hideLoadingState() {
                loginBtn.classList.remove('loading');
                loginBtn.disabled = false;
                loginBtn.querySelector('.btn-text').innerHTML = '<i class="fas fa-sign-in-alt me-2"></i>@Login.Login_SignIn';
            }

            // Reset loading state on page load
            window.addEventListener('load', hideLoadingState);

            // Helper functions for troubleshooting
            window.fillDemoCredentials = function() {
                showUsernameHelper();
            };

            function showUsernameHelper() {
                const helper = `
                    <div class="alert alert-warning mt-3" id="usernameHelper">
                        <h6><i class="fas fa-search me-2"></i>${findUsernameText}</h6>
                        <p class="mb-2"><strong>${runSqlQueryText}</strong></p>
                        <code style="display: block; background: #f8f9fa; padding: 10px; border-radius: 5px; margin: 10px 0;">
        SELECT Username, [Name], IsActive FROM [User] WHERE IsActive = 1 ORDER BY User_Code;
                        </code>
                        <p class="mb-2"><strong>${commonTestCredentialsText}</strong></p>
                        <div class="row">
                            <div class="col-md-6">
                                <button type="button" class="btn btn-sm btn-outline-primary w-100 mb-2" onclick="fillCredentials('testuser', '123456789')">
                                    testuser / 123456789
                                </button>
                            </div>
                            <div class="col-md-6">
                                <button type="button" class="btn btn-sm btn-outline-primary w-100 mb-2" onclick="fillCredentials('admin', '123456789')">
                                    admin / 123456789
                                </button>
                            </div>
                        </div>
                        <button type="button" class="btn btn-sm btn-outline-secondary mt-2" onclick="document.getElementById('usernameHelper').remove()">
                            <i class="fas fa-times"></i> ${closeText}
                        </button>
                    </div>
                `;

                const existing = document.getElementById('usernameHelper');
                if (existing) existing.remove();
                document.querySelector('.forgot-password').insertAdjacentHTML('afterend', helper);
            }

            function fillCredentials(username, password) {
                usernameInput.value = username;
                passwordInput.value = password;
                usernameInput.dispatchEvent(new Event('input'));
                passwordInput.dispatchEvent(new Event('input'));
                document.getElementById('usernameHelper').remove();
            }
        });

        // Troubleshooting modal function
        function showContactAdmin() {
            const troubleshootingInfo = `
                <div class="alert alert-info mt-3" id="troubleshootingInfo">
                    <h6><i class="fas fa-tools me-2"></i>${troubleshootingStepsText}</h6>
                    <p class="mb-2"><strong>${step1Text}</strong></p>
                    <code style="display: block; background: #f8f9fa; padding: 8px; border-radius: 5px; margin: 5px 0; font-size: 12px;">
        SELECT Username, [Name], IsActive FROM [User] WHERE IsActive = 1;
                    </code>
                    <p class="mb-2 mt-3"><strong>${step2Text}</strong></p>
                    <code style="display: block; background: #f8f9fa; padding: 8px; border-radius: 5px; margin: 5px 0; font-size: 12px;">
        SELECT Username, Password, LEN(Password) FROM [User] WHERE Username = 'your_username';
                    </code>
                    <p class="mb-2 mt-3"><strong>${step3Text}</strong></p>
                    <code style="display: block; background: #f8f9fa; padding: 8px; border-radius: 5px; margin: 5px 0; font-size: 12px;">
        INSERT INTO [User] (User_Code, [Name], Username, [Password], Group_Code, IsActive, Insert_User, Insert_Time)
        VALUES (999, 'Test User', 'testuser', '123456789', 1, 1, 1, GETDATE());
                    </code>
                    <div class="alert alert-warning mt-3">
                        <small><strong>${noteText}</strong></small>
                    </div>
                    <button type="button" class="btn btn-sm btn-outline-secondary mt-2" onclick="document.getElementById('troubleshootingInfo').remove()">
                        <i class="fas fa-times"></i> ${closeText}
                    </button>
                </div>
            `;

            const existing = document.getElementById('troubleshootingInfo');
            if (existing) {
                existing.remove();
            } else {
                document.querySelector('.forgot-password').insertAdjacentHTML('afterend', troubleshootingInfo);
            }
        }

        // Keyboard shortcut for demo credentials
        document.addEventListener('keydown', function(e) {
            if (e.ctrlKey && e.key === 'd') {
                e.preventDefault();
                window.fillDemoCredentials();
            }
        });
    </script>
</body>
</html>