@{
    ViewData["Title"] = "Login";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Login - Center Management System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />

    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --success-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --border-radius: 15px;
            --box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        }

        body {
            background: var(--primary-gradient);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .login-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 3rem;
            width: 100%;
            max-width: 450px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .login-header {
            text-align: center;
            margin-bottom: 2rem;
        }

            .login-header h1 {
                background: var(--primary-gradient);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                background-clip: text;
                font-size: 2.5rem;
                font-weight: 700;
                margin-bottom: 0.5rem;
            }

            .login-header p {
                color: #6c757d;
                font-size: 1.1rem;
            }

        .login-icon {
            width: 80px;
            height: 80px;
            background: var(--success-gradient);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1.5rem;
            box-shadow: 0 10px 25px rgba(79, 172, 254, 0.3);
        }

            .login-icon i {
                color: white;
                font-size: 2rem;
            }

        .form-control {
            border-radius: 12px;
            border: 2px solid #e9ecef;
            padding: 1rem 1.25rem;
            font-size: 1rem;
            transition: var(--transition);
            background: rgba(255, 255, 255, 0.9);
        }

            .form-control:focus {
                border-color: #667eea;
                box-shadow: 0 0 0 0.25rem rgba(102, 126, 234, 0.25);
                background: white;
            }

            .form-control.is-invalid {
                border-color: #dc3545;
            }

                .form-control.is-invalid:focus {
                    border-color: #dc3545;
                    box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25);
                }

        .input-group {
            position: relative;
            margin-bottom: 1.5rem;
        }

        .input-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
            z-index: 5;
            transition: var(--transition);
        }

        .form-control.has-icon {
            padding-left: 3rem;
        }

        .form-control:focus + .input-icon {
            color: #667eea;
        }

        .password-toggle {
            position: absolute;
            right: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
            cursor: pointer;
            z-index: 5;
            transition: var(--transition);
        }

            .password-toggle:hover {
                color: #667eea;
            }

        .btn-login {
            background: var(--primary-gradient);
            border: none;
            color: white;
            padding: 1rem 2rem;
            border-radius: 12px;
            font-weight: 600;
            font-size: 1.1rem;
            width: 100%;
            transition: var(--transition);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
            text-transform: uppercase;
            letter-spacing: 0.5px;
            position: relative;
            overflow: hidden;
        }

            .btn-login:hover:not(:disabled) {
                transform: translateY(-2px);
                box-shadow: 0 15px 35px rgba(102, 126, 234, 0.4);
                color: white;
            }

            .btn-login:disabled {
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
            }

            .btn-login.loading::after {
                content: '';
                position: absolute;
                top: 50%;
                left: 50%;
                width: 20px;
                height: 20px;
                margin: -10px 0 0 -10px;
                border: 2px solid rgba(255, 255, 255, 0.3);
                border-top: 2px solid white;
                border-radius: 50%;
                animation: spin 1s linear infinite;
            }

        .alert {
            border-radius: 12px;
            border: none;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5rem;
        }

        .forgot-password {
            text-align: center;
            margin-top: 1.5rem;
        }

            .forgot-password a {
                color: #667eea;
                text-decoration: none;
                font-weight: 500;
                transition: var(--transition);
            }

                .forgot-password a:hover {
                    color: #764ba2;
                    text-decoration: underline;
                }

        .form-check {
            margin: 1.5rem 0;
        }

        .form-check-input:checked {
            background-color: #667eea;
            border-color: #667eea;
        }

        .form-check-label {
            color: #495057;
            font-weight: 500;
        }

        .invalid-feedback {
            display: block;
            font-size: 0.875rem;
            color: #dc3545;
            margin-top: 0.25rem;
        }

        .system-info {
            background: rgba(102, 126, 234, 0.1);
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1.5rem;
            text-align: center;
            font-size: 0.9rem;
            color: #495057;
        }

        /* Animations */
        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        @@keyframes shake {
            0%, 100% {
                transform: translateX(0);
            }

            25% {
                transform: translateX(-5px);
            }

            75% {
                transform: translateX(5px);
            }
        }

        @@keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .shake {
            animation: shake 0.5s ease-in-out;
        }

        .login-container {
            animation: fadeIn 0.8s ease-out;
        }

        /* Responsive */
        @@media (max-width: 576px) {
            .login-container {
                padding: 2rem 1.5rem;
                margin: 1rem;
            }

            .login-header h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="login-container">
        <div class="login-header">
            <div class="login-icon">
                <i class="fas fa-graduation-cap"></i>
            </div>
            <h1>Welcome Back</h1>
            <p>Center Management System</p>
        </div>

        @* Display any error messages *@
        @if (ViewBag.Error != null && !string.IsNullOrEmpty(ViewBag.Error.ToString()))
        {
            <div class="alert alert-danger" role="alert">
                <i class="fas fa-exclamation-circle me-2"></i>
                @ViewBag.Error
            </div>
        }

        @* Display success messages *@
        @if (ViewBag.Success != null && !string.IsNullOrEmpty(ViewBag.Success.ToString()))
        {
            <div class="alert alert-success" role="alert">
                <i class="fas fa-check-circle me-2"></i>
                @ViewBag.Success
            </div>
        }

        <div class="system-info">
            <i class="fas fa-info-circle me-2"></i>
            <strong>Troubleshooting Login Issues</strong>
            <br>
            <small class="text-muted">Press Ctrl+D to find your username • Check database for actual user records</small>
        </div>

        <form method="post" asp-action="Login" asp-controller="Login" id="loginForm" novalidate>
            @Html.AntiForgeryToken()

            @* Include returnUrl if provided *@
            @if (Context.Request.Query.ContainsKey("returnUrl") && !string.IsNullOrEmpty(Context.Request.Query["returnUrl"]))
            {
                <input type="hidden" name="returnUrl" value="@Context.Request.Query["returnUrl"]" />
            }

            <div class="input-group">
                <input type="text"
                       name="username"
                       id="username"
                       class="form-control has-icon"
                       placeholder="Enter your username"
                       required
                       autocomplete="username"
                       maxlength="50"
                       value="@(ViewBag.Username ?? "")" />
                <i class="fas fa-user input-icon"></i>
                <div class="invalid-feedback" id="username-error"></div>
            </div>

            <div class="input-group">
                <input type="password"
                       name="password"
                       id="password"
                       class="form-control has-icon"
                       placeholder="Enter your password"
                       required
                       autocomplete="current-password"
                       maxlength="100" />
                <i class="fas fa-lock input-icon"></i>
                <i class="fas fa-eye password-toggle" id="passwordToggle" title="Show/Hide Password"></i>
                <div class="invalid-feedback" id="password-error"></div>
            </div>

            <div class="form-check">
                <input class="form-check-input" type="checkbox" name="rememberMe" id="rememberMe">
                <label class="form-check-label" for="rememberMe">
                    <i class="fas fa-clock me-1"></i>
                    Keep me signed in for 8 hours
                </label>
            </div>

            <button type="submit" class="btn btn-login" id="loginBtn">
                <span class="btn-text">
                    <i class="fas fa-sign-in-alt me-2"></i>
                    Sign In
                </span>
            </button>

            <div class="forgot-password">
                <a href="#" onclick="showContactAdmin()">
                    <i class="fas fa-tools me-1"></i>
                    Troubleshooting Login Issues
                </a>
            </div>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
                /*
                 * LOGIN SYSTEM EXPLANATION:
                 *
                 * 1. When a Root is created, triggers automatically create:
                 *    - Center record (if isCenter = 1)
                 *    - Group record named "Administration"
                 *    - User record with username: {Root_Name}_{Root_Code}
                 *
                 * 2. Default password is set to "123456789" (plain text)
                 *
                 * 3. User table trigger automatically hashes passwords:
                 *    - Uses MD5 hashing: HASHBYTES('MD5', password)
                 *    - Stores as UPPERCASE 32-character hex string
                 *    - Only hashes if password isn't already a valid MD5 hash
                 *
                 * 4. Login verification:
                 *    - User enters plain text password
                 *    - Controller hashes it with MD5
                 *    - Compares with database hash (case-insensitive)
                 */
                document.addEventListener('DOMContentLoaded', function() {
                    const form = document.getElementById('loginForm');
                    const loginBtn = document.getElementById('loginBtn');
                    const usernameInput = document.getElementById('username');
                    const passwordInput = document.getElementById('password');
                    const passwordToggle = document.getElementById('passwordToggle');

                    // Focus on username field
                    usernameInput.focus();

                    // Password visibility toggle
                    passwordToggle.addEventListener('click', function() {
                        const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                        passwordInput.setAttribute('type', type);

                        // Toggle icon
                        this.classList.toggle('fa-eye');
                        this.classList.toggle('fa-eye-slash');

                        // Update title
                        this.title = type === 'password' ? 'Show Password' : 'Hide Password';
                    });

                    // Real-time validation
                    usernameInput.addEventListener('input', function() {
                        validateUsername();
                    });

                    passwordInput.addEventListener('input', function() {
                        validatePassword();
                    });

                    // Handle form submission
                    form.addEventListener('submit', function(e) {
                        if (!validateForm()) {
                            e.preventDefault();
                            showValidationErrors();
                            return;
                        }

                        // Show loading state
                        showLoadingState();
                    });

                    // Handle Enter key navigation
                    usernameInput.addEventListener('keypress', function(e) {
                        if (e.key === 'Enter') {
                            e.preventDefault();
                            passwordInput.focus();
                        }
                    });

                    passwordInput.addEventListener('keypress', function(e) {
                        if (e.key === 'Enter' && validateForm()) {
                            form.submit();
                        }
                    });

                    function validateUsername() {
                        const username = usernameInput.value.trim();
                        const errorElement = document.getElementById('username-error');

                        if (username.length === 0) {
                            setFieldError(usernameInput, errorElement, 'Username is required');
                            return false;
                        } else if (username.length < 3) {
                            setFieldError(usernameInput, errorElement, 'Username must be at least 3 characters');
                            return false;
                        } else if (!/^[a-zA-Z0-9_]+$/.test(username)) {
                            setFieldError(usernameInput, errorElement, 'Username can only contain letters, numbers, and underscores');
                            return false;
                        } else {
                            clearFieldError(usernameInput, errorElement);
                            return true;
                        }
                    }

                    function validatePassword() {
                        const password = passwordInput.value;
                        const errorElement = document.getElementById('password-error');

                        if (password.length === 0) {
                            setFieldError(passwordInput, errorElement, 'Password is required');
                            return false;
                        } else if (password.length < 3) {
                            setFieldError(passwordInput, errorElement, 'Password must be at least 3 characters');
                            return false;
                        } else {
                            clearFieldError(passwordInput, errorElement);
                            return true;
                        }
                    }

                    function validateForm() {
                        const isUsernameValid = validateUsername();
                        const isPasswordValid = validatePassword();
                        return isUsernameValid && isPasswordValid;
                    }

                    function setFieldError(field, errorElement, message) {
                        field.classList.add('is-invalid');
                        errorElement.textContent = message;
                        errorElement.style.display = 'block';
                    }

                    function clearFieldError(field, errorElement) {
                        field.classList.remove('is-invalid');
                        errorElement.textContent = '';
                        errorElement.style.display = 'none';
                    }

                    function showValidationErrors() {
                        const container = document.querySelector('.login-container');
                        container.classList.add('shake');

                        setTimeout(() => {
                            container.classList.remove('shake');
                        }, 500);
                    }

                    function showLoadingState() {
                        loginBtn.classList.add('loading');
                        loginBtn.disabled = true;
                        loginBtn.querySelector('.btn-text').innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Signing In...';
                    }

                    function hideLoadingState() {
                        loginBtn.classList.remove('loading');
                        loginBtn.disabled = false;
                        loginBtn.querySelector('.btn-text').innerHTML = '<i class="fas fa-sign-in-alt me-2"></i>Sign In';
                    }

                    // Auto-hide loading state on page load (in case of server errors)
                    window.addEventListener('load', function() {
                        hideLoadingState();
                    });

                    // Demo credentials helper
                    window.fillDemoCredentials = function() {
                        // Show a dialog to help find the right username
                        showUsernameHelper();
                    };

                    function showUsernameHelper() {
                        const helper = `
                            <div class="alert alert-warning mt-3" id="usernameHelper">
                                <h6><i class="fas fa-search me-2"></i>Find Your Username</h6>
                                <p class="mb-2"><strong>Run this SQL query in your database:</strong></p>
                                <code style="display: block; background: #f8f9fa; padding: 10px; border-radius: 5px; margin: 10px 0;">
        SELECT Username, [Name], IsActive FROM [User] WHERE IsActive = 1 ORDER BY User_Code;
                                </code>
                                <p class="mb-2"><strong>Common Test Credentials:</strong></p>
                                <div class="row">
                                    <div class="col-md-6">
                                        <button type="button" class="btn btn-sm btn-outline-primary w-100 mb-2" onclick="fillCredentials('testuser', '123456789')">
                                            testuser / 123456789
                                        </button>
                                    </div>
                                    <div class="col-md-6">
                                        <button type="button" class="btn btn-sm btn-outline-primary w-100 mb-2" onclick="fillCredentials('admin', '123456789')">
                                            admin / 123456789
                                        </button>
                                    </div>
                                </div>
                                <button type="button" class="btn btn-sm btn-outline-secondary mt-2" onclick="document.getElementById('usernameHelper').remove()">
                                    <i class="fas fa-times"></i> Close
                                </button>
                            </div>
                        `;

                        // Remove existing helper
                        const existing = document.getElementById('usernameHelper');
                        if (existing) existing.remove();

                        // Add new helper
                        document.querySelector('.forgot-password').insertAdjacentHTML('afterend', helper);
                    }

                    function fillCredentials(username, password) {
                        usernameInput.value = username;
                        passwordInput.value = password;
                        usernameInput.dispatchEvent(new Event('input'));
                        passwordInput.dispatchEvent(new Event('input'));
                        document.getElementById('usernameHelper').remove();
                    }
                });

                function showContactAdmin() {
                    const troubleshootingInfo = `
                        <div class="alert alert-info mt-3" id="troubleshootingInfo">
                            <h6><i class="fas fa-tools me-2"></i>Troubleshooting Steps</h6>

                            <p class="mb-2"><strong>Step 1: Check if users exist</strong></p>
                            <code style="display: block; background: #f8f9fa; padding: 8px; border-radius: 5px; margin: 5px 0; font-size: 12px;">
        SELECT Username, [Name], IsActive FROM [User] WHERE IsActive = 1;
                            </code>

                            <p class="mb-2 mt-3"><strong>Step 2: Verify password hashes</strong></p>
                            <code style="display: block; background: #f8f9fa; padding: 8px; border-radius: 5px; margin: 5px 0; font-size: 12px;">
        SELECT Username, Password, LEN(Password) FROM [User] WHERE Username = 'your_username';
                            </code>

                            <p class="mb-2 mt-3"><strong>Step 3: Create a test user</strong></p>
                            <code style="display: block; background: #f8f9fa; padding: 8px; border-radius: 5px; margin: 5px 0; font-size: 12px;">
        INSERT INTO [User] (User_Code, [Name], Username, [Password], Group_Code, IsActive, Insert_User, Insert_Time)
        VALUES (999, 'Test User', 'testuser', '123456789', 1, 1, 1, GETDATE());
                            </code>

                            <div class="alert alert-warning mt-3">
                                <small><strong>Note:</strong> Password should automatically hash to MD5. If Group_Code 1 doesn't exist, create a group first or use an existing Group_Code from your database.</small>
                            </div>

                            <button type="button" class="btn btn-sm btn-outline-secondary mt-2" onclick="document.getElementById('troubleshootingInfo').remove()">
                                <i class="fas fa-times"></i> Close
                            </button>
                        </div>
                    `;

                    // Remove existing info
                    const existing = document.getElementById('troubleshootingInfo');
                    if (existing) {
                        existing.remove();
                    } else {
                        document.querySelector('.forgot-password').insertAdjacentHTML('afterend', troubleshootingInfo);
                    }
                }

                // Add keyboard shortcut for demo (Ctrl + D)
                document.addEventListener('keydown', function(e) {
                    if (e.ctrlKey && e.key === 'd') {
                        e.preventDefault();
                        window.fillDemoCredentials();
                    }
                });
    </script>
</body>
</html>