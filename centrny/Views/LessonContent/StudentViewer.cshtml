@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>Lesson Access</title>
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #6c5ce7 0%, #a29bfe 100%);
            --primary-color: #6c5ce7;
            --border-radius-lg: 16px;
            --shadow-lg: 0 8px 36px rgba(108,92,231,0.18);
        }

        body {
            background: #f8f9fa;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .access-container {
            max-width: 500px;
            width: 100%;
            padding: 2rem;
        }

        .access-card {
            background: white;
            border-radius: var(--border-radius-lg);
            box-shadow: var(--shadow-lg);
            padding: 3rem 2rem;
            text-align: center;
        }

        .access-header {
            background: var(--primary-gradient);
            color: white;
            padding: 2rem;
            border-radius: var(--border-radius-lg);
            margin-bottom: 2rem;
        }

        .pin-input {
            font-family: 'Courier New', monospace;
            font-size: 1.3rem;
            text-align: center;
            letter-spacing: 3px;
            height: 60px;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            transition: all 0.3s ease;
        }

            .pin-input:focus {
                border-color: var(--primary-color);
                box-shadow: 0 0 0 0.2rem rgba(108, 92, 231, 0.25);
            }

        .lesson-input {
            font-size: 1.2rem;
            text-align: center;
            height: 60px;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            transition: all 0.3s ease;
        }

            .lesson-input:focus {
                border-color: var(--primary-color);
                box-shadow: 0 0 0 0.2rem rgba(108, 92, 231, 0.25);
            }

            .lesson-input:read-only {
                background-color: #f8f9fa;
                border-color: #28a745;
                color: #28a745;
                font-weight: 600;
            }

        .access-btn {
            background: var(--primary-gradient);
            border: none;
            border-radius: 12px;
            color: white;
            padding: 1rem 3rem;
            font-weight: 600;
            font-size: 1.1rem;
            height: 60px;
            transition: all 0.3s ease;
            width: 100%;
        }

            .access-btn:hover {
                color: white;
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(108, 92, 231, 0.3);
            }

            .access-btn:disabled {
                opacity: 0.6;
                transform: none;
            }

        .info-section {
            background: #e8f2ff;
            border: 1px solid #b3d9ff;
            border-radius: 12px;
            padding: 1.5rem;
            margin-top: 2rem;
            text-align: left;
        }

        .lesson-info-section {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            border-radius: 12px;
            padding: 1.5rem;
            margin-top: 1rem;
            text-align: left;
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 9999;
        }

        .loading-content {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            text-align: center;
        }

        .error-message {
            animation: slideIn 0.3s ease-out;
        }

        .back-to-learning {
            background: linear-gradient(135deg, #17a2b8 0%, #20c997 100%);
            border: none;
            border-radius: 10px;
            color: white;
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
            font-weight: 500;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.2s ease;
            margin-bottom: 1rem;
        }

            .back-to-learning:hover {
                color: white;
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(23, 162, 184, 0.3);
            }

        /* Enhanced alert styles for access checking */
        .access-check-message {
            animation: slideIn 0.3s ease-out;
            margin-bottom: 1.5rem !important;
        }

        .alert-success {
            background: #d1e7dd;
            border-color: #badbcc;
            color: #0f5132;
        }

        .alert-info {
            background: #d1ecf1;
            border-color: #bee5eb;
            color: #0c5460;
        }

        .alert-warning {
            background: #fff3cd;
            border-color: #ffecb5;
            color: #664d03;
        }

        .alert-danger {
            background: #f8d7da;
            border-color: #f5c2c7;
            color: #842029;
        }

        /* Pulse animation for access checking */
        .checking-access {
            animation: pulse 1.5s ease-in-out infinite;
        }

        @@keyframes slideIn {
            from

        {
            opacity: 0;
            transform: translateY(-10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        @@keyframes pulse {
            0%

        {
            opacity: 1;
        }

        50% {
            opacity: 0.7;
        }

        100% {
            opacity: 1;
        }

        }
    </style>
</head>
<body>
    <div class="access-container">
        <div class="access-header">
            <h1><i class="fas fa-graduation-cap me-2"></i>Lesson Access</h1>
            <p class="mb-0">
                @if (ViewBag.PreFilledLessonCode != null)
                {
                    <span>Enter your PIN code to access the selected lesson</span>
                }
                else
                {
                    <span>Enter your PIN code and lesson number</span>
                }
            </p>
        </div>

        <div class="access-card">
            @if (ViewBag.PreFilledLessonCode != null)
            {
                <a href="/OnlineStudent/Learning" class="back-to-learning">
                    <i class="fas fa-arrow-left"></i>
                    Back to Learning
                </a>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger error-message mb-4">
                    <i class="fas fa-exclamation-circle me-2"></i>
                    @TempData["ErrorMessage"]
                </div>
            }

            <form method="post" action="/LessonContent/AccessLesson" id="accessForm">
                <div class="mb-4">
                    <label for="pinCode" class="form-label fs-5 fw-bold text-start w-100">
                        <i class="fas fa-key me-2"></i>PIN Code
                    </label>
                    <input type="text"
                           class="form-control pin-input"
                           id="pinCode"
                           name="pinCode"
                           placeholder="Enter PIN code"
                           maxlength="20"
                           required
                           autocomplete="off">
                    <small class="form-text text-muted">Enter the access code provided by your teacher</small>
                </div>

                <div class="mb-4">
                    <label for="lessonCode" class="form-label fs-5 fw-bold text-start w-100">
                        <i class="fas fa-book me-2"></i>Lesson Code
                    </label>
                    <input type="number"
                           class="form-control lesson-input"
                           id="lessonCode"
                           name="lessonCode"
                           placeholder="Enter lesson number"
                           min="1"
                           value="@(ViewBag.PreFilledLessonCode ?? "")"
                           @(ViewBag.PreFilledLessonCode != null ? "readonly" : "")
                           required>
                    <small class="form-text text-muted">
                        @if (ViewBag.PreFilledLessonCode != null)
                        {
                            <span class="text-success">
                                <i class="fas fa-check me-1"></i>Lesson selected from learning page
                            </span>
                        }
                        else
                        {
                            <span>Enter the lesson number you want to access</span>
                        }
                    </small>
                </div>

                <button type="submit" class="btn access-btn" id="accessBtn">
                    <i class="fas fa-unlock me-2"></i>
                    <span id="btnText">Access Lesson</span>
                </button>
            </form>


            
        </div>
    </div>

    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loadingOverlay">
        <div class="loading-content">
            <i class="fas fa-spinner fa-spin fa-2x text-primary mb-3"></i>
            <h5>Validating Access...</h5>
            <p class="mb-0">Please wait while we verify your credentials and PIN validity</p>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>
        console.log('🎓 Enhanced StudentViewer PIN Entry loaded at @DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss") UTC');

        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('accessForm');
            const accessBtn = document.getElementById('accessBtn');
            const btnText = document.getElementById('btnText');
            const loadingOverlay = document.getElementById('loadingOverlay');
            const pinInput = document.getElementById('pinCode');
            const lessonInput = document.getElementById('lessonCode');

            const isPreFilled = @(ViewBag.PreFilledLessonCode != null ? "true" : "false");

            // Auto-focus PIN input
            pinInput.focus();

            // Handle Enter key navigation
            pinInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    if (!isPreFilled) {
                        lessonInput.focus();
                    } else {
                        form.submit();
                    }
                }
            });

            if (!isPreFilled) {
                lessonInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        form.submit();
                    }
                });
            }

            // Handle form submission
            form.addEventListener('submit', function(e) {
                const pinCode = pinInput.value.trim();
                const lessonCode = lessonInput.value.trim();

                if (!pinCode || !lessonCode) {
                    e.preventDefault();
                    alert('Please enter both PIN code and lesson code');
                    return;
                }

                // Show loading overlay
                loadingOverlay.style.display = 'flex';
                accessBtn.disabled = true;
                btnText.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Validating PIN...';

                console.log('🔐 Enhanced access attempt:', {
                    pin: pinCode,
                    lesson: lessonCode,
                    preFilled: isPreFilled,
                    timestamp: new Date().toISOString()
                });
            });

            // Real-time input validation
            function validateInputs() {
                const pinCode = pinInput.value.trim();
                const lessonCode = lessonInput.value.trim();

                accessBtn.disabled = !pinCode || !lessonCode;

                if (pinCode && lessonCode) {
                    btnText.textContent = 'Access Lesson';
                } else if (isPreFilled && pinCode) {
                    btnText.textContent = 'Access Lesson';
                } else {
                    btnText.textContent = isPreFilled ? 'Enter PIN Code' : 'Enter PIN and Lesson Code';
                }
            }

            pinInput.addEventListener('input', validateInputs);
            if (!isPreFilled) {
                lessonInput.addEventListener('input', validateInputs);
            }

            // Initial validation
            validateInputs();

            // Handle page visibility change (if user comes back from another tab)
            document.addEventListener('visibilitychange', function() {
                if (!document.hidden && loadingOverlay.style.display === 'flex') {
                    // Reset loading state if page becomes visible again
                    setTimeout(() => {
                        loadingOverlay.style.display = 'none';
                        accessBtn.disabled = false;
                        btnText.innerHTML = '<i class="fas fa-unlock me-2"></i>Access Lesson';
                    }, 1000);
                }
            });

            // Show pre-filled lesson info
            if (isPreFilled) {
                console.log('📚 Lesson pre-filled from learning page:', @(ViewBag.PreFilledLessonCode ?? 0));
            }

            // ============ AUTOMATIC ACCESS CHECK FUNCTIONALITY ============

            // Function to check lesson access automatically
            function checkLessonAccess(lessonCode) {
                console.log('🔍 Checking automatic access for lesson:', lessonCode);

                fetch(`/LessonContent/CheckLessonAccess?lessonCode=${lessonCode}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('✅ Access check response:', data);

                        if (data.result === 'DirectAccess') {
                            console.log('🎯 Direct access granted - redirecting to lesson');

                            // Show success message
                            showAccessMessage('🎉 You already have access to this lesson! Redirecting...', 'success');

                            // Hide the PIN form with fade effect
                            form.style.opacity = '0.5';
                            form.style.pointerEvents = 'none';
                            accessBtn.disabled = true;
                            btnText.innerHTML = '<i class="fas fa-check-circle me-2"></i>Access Granted';

                            // Redirect after delay
                            setTimeout(() => {
                                console.log('🚀 Redirecting to:', data.redirectUrl);
                                window.location.href = data.redirectUrl;
                            }, 2500);

                        } else if (data.result === 'RequirePIN') {
                            console.log('🔐 PIN required - showing PIN form');
                            showAccessMessage(data.message || 'Please enter your PIN to access this lesson.', 'info');

                            // Ensure form is visible and enabled
                            form.style.opacity = '1';
                            form.style.pointerEvents = 'auto';

                        } else if (data.result === 'AccessDenied') {
                            console.log('❌ Access denied');
                            showAccessMessage(data.message || 'Access denied for this lesson.', 'danger');

                            // Disable the form
                            form.style.opacity = '0.5';
                            form.style.pointerEvents = 'none';
                            accessBtn.disabled = true;
                            btnText.innerHTML = '<i class="fas fa-times-circle me-2"></i>Access Denied';
                        }
                    })
                    .catch(error => {
                        console.error('❌ Error checking lesson access:', error);
                        showAccessMessage('Unable to check access status. Please try entering your PIN manually.', 'warning');

                        // Ensure form remains accessible
                        form.style.opacity = '1';
                        form.style.pointerEvents = 'auto';
                    });
            }

            function showAccessMessage(message, type) {
                // Remove any existing access messages
                const existingMessages = document.querySelectorAll('.access-check-message');
                existingMessages.forEach(msg => msg.remove());

                // Create new message
                const messageDiv = document.createElement('div');
                messageDiv.className = `alert alert-${type} access-check-message mb-4`;

                const iconMap = {
                    'success': 'fa-check-circle',
                    'info': 'fa-info-circle',
                    'warning': 'fa-exclamation-triangle',
                    'danger': 'fa-times-circle'
                };

                const icon = iconMap[type] || 'fa-info-circle';
                messageDiv.innerHTML = `<i class="fas ${icon} me-2"></i>${message}`;

                // Insert before the form
                form.parentNode.insertBefore(messageDiv, form);

                // Auto-remove info/warning messages after delay
                if (type === 'info' || type === 'warning') {
                    setTimeout(() => {
                        if (messageDiv.parentNode) {
                            messageDiv.style.opacity = '0';
                            setTimeout(() => messageDiv.remove(), 300);
                        }
                    }, 4000);
                }
            }

            // Automatic access check for pre-filled lessons
            if (isPreFilled) {
                const preFilledLessonCode = @(ViewBag.PreFilledLessonCode ?? 0);
                if (preFilledLessonCode > 0) {
                    console.log('📚 Pre-filled lesson detected, checking access automatically');

                    // Show initial checking message
                    showAccessMessage('🔍 Checking your access status...', 'info');

                    // Add checking animation to the access card
                    document.querySelector('.access-card').classList.add('checking-access');

                    // Delay to let page finish loading
                    setTimeout(() => {
                        checkLessonAccess(preFilledLessonCode);

                        // Remove checking animation after check completes
                        setTimeout(() => {
                            document.querySelector('.access-card')?.classList.remove('checking-access');
                        }, 1500);
                    }, 1200);
                }
            }
        });
    </script>
</body>
</html>