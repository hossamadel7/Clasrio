<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>Lesson Content Management</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.css" />
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #6c5ce7 0%, #a29bfe 100%);
            --primary-color: #6c5ce7;
            --border-radius-lg: 16px;
            --shadow-lg: 0 8px 36px rgba(108,92,231,0.18);
        }

        .content-header {
            background: var(--primary-gradient);
            color: white;
            padding: 2rem 0;
            border-radius: var(--border-radius-lg);
            margin-bottom: 2rem;
            text-align: center;
        }

        .lesson-selector {
            background: white;
            border-radius: var(--border-radius-lg);
            padding: 1.5rem;
            box-shadow: var(--shadow-lg);
            margin-bottom: 2rem;
        }

        .content-section {
            background: white;
            border-radius: var(--border-radius-lg);
            padding: 1.5rem;
            box-shadow: var(--shadow-lg);
            margin-bottom: 1.5rem;
        }

        .content-item {
            background: #f8f9fa;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 1rem;
            margin-bottom: 1rem;
            cursor: default;
            transition: all 0.3s ease;
            position: relative;
        }

            .content-item:hover {
                border-color: var(--primary-color);
                box-shadow: 0 4px 12px rgba(108,92,231,0.15);
            }

            .content-item.sortable-ghost {
                opacity: 0.4;
                background: #e9ecef;
                border: 2px dashed #6c757d;
            }

            .content-item.sortable-drag {
                cursor: grabbing;
                transform: rotate(2deg);
                box-shadow: 0 8px 32px rgba(0,0,0,0.3);
                z-index: 1000;
            }

        .video-item {
            border-left: 4px solid #e74c3c;
        }

        .file-item {
            border-left: 4px solid #3498db;
        }

        .exam-item {
            border-left: 4px solid #f39c12;
        }

        .content-badge {
            font-size: 0.8rem;
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
        }

        .video-badge {
            background: #e74c3c;
            color: white;
        }

        .file-badge {
            background: #3498db;
            color: white;
        }

        .exam-badge {
            background: #f39c12;
            color: white;
        }

        .add-content-btn {
            background: var(--primary-gradient);
            border: none;
            border-radius: 12px;
            color: white;
            padding: 0.8rem 1.5rem;
            font-weight: 600;
            transition: transform 0.2s ease;
        }

            .add-content-btn:hover {
                transform: translateY(-2px);
                color: white;
            }

        .drag-handle {
            color: #6c757d;
            cursor: grab;
            transition: all 0.2s ease;
            padding: 0.5rem;
            margin: -0.5rem;
            border-radius: 4px;
        }

            .drag-handle:hover {
                color: var(--primary-color);
                background: rgba(108, 92, 231, 0.1);
            }

            .drag-handle:active {
                cursor: grabbing;
            }

        .empty-state {
            text-align: center;
            padding: 3rem;
            color: #6c757d;
        }

            .empty-state i {
                font-size: 3rem;
                margin-bottom: 1rem;
                opacity: 0.3;
            }

        .modal-content {
            border-radius: var(--border-radius-lg);
        }

        .duration-input {
            font-family: 'Courier New', monospace;
        }

        #lessonContentList {
            min-height: 200px;
        }

        .sort-indicator {
            font-weight: 500;
            color: var(--primary-color) !important;
        }

        .drag-instructions {
            background: #e8f2ff;
            border: 1px solid #b3d9ff;
            border-radius: 8px;
            padding: 0.75rem;
            margin-bottom: 1rem;
            font-size: 0.9rem;
            color: #0066cc;
        }

        /* Success notification styles */
        .alert-success {
            border-left: 4px solid #28a745;
            animation: slideInRight 0.3s ease-out;
        }

        @@keyframes slideInRight {
            from

        {
            transform: translateX(100%);
            opacity: 0;
        }

        to {
            transform: translateX(0);
            opacity: 1;
        }

        }

        .user-info {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: rgba(255,255,255,0.9);
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.85rem;
            color: #666;
        }
    </style>
</head>
<body>
    <div class="container-fluid py-4">
        <div class="content-header position-relative">
            <h1><i class="fas fa-play-circle me-2"></i>Lesson Content Management</h1>
            <p class="mb-0">Add videos, files, and exams to your lessons with drag-and-drop organization</p>
        </div>

        <!-- Lesson Selector -->
        <div class="lesson-selector">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <label for="lessonSelect" class="form-label fw-bold">Select Lesson:</label>
                    <select class="form-select" id="lessonSelect">
                        <option value="">Choose a lesson to manage...</option>
                    </select>
                </div>
                <div class="col-md-6 text-end">
                    <button class="btn add-content-btn me-2" id="addVideoBtn" disabled>
                        <i class="fas fa-video me-1"></i> Add Video
                    </button>
                    <button class="btn add-content-btn me-2" id="addFileBtn" disabled>
                        <i class="fas fa-file me-1"></i> Add File
                    </button>
                    <button class="btn add-content-btn" id="addExamBtn" disabled>
                        <i class="fas fa-clipboard-check me-1"></i> Add Exam
                    </button>
                </div>
            </div>
        </div>

        <!-- Content List -->
        <div class="content-section">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h4><i class="fas fa-list me-2"></i>Lesson Content</h4>
                <small class="text-muted">Drag items by the grip handle to reorder</small>
            </div>

            <!-- Drag Instructions -->
            <div class="drag-instructions" id="dragInstructions" style="display: none;">
                <i class="fas fa-info-circle me-2"></i>
                <strong>Drag & Drop Instructions:</strong> Use the grip handle (<i class="fas fa-grip-vertical"></i>) to drag items to reorder them. Changes are saved automatically to the database.
            </div>

            <div id="lessonContentList">
                <div class="empty-state" id="emptyState">
                    <i class="fas fa-folder-open"></i>
                    <h5>No content yet</h5>
                    <p>Select a lesson and start adding videos, files, and exams</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Video Modal -->
    <div class="modal fade" id="addVideoModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-video me-2"></i>Add Video to Lesson</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form id="addVideoForm">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="videoDisplayName" class="form-label">Display Name *</label>
                            <input type="text" class="form-control" id="videoDisplayName" required
                                   placeholder="e.g., Introduction to Algebra">
                        </div>
                        <div class="mb-3">
                            <label for="videoUrl" class="form-label">Video URL *</label>
                            <input type="url" class="form-control" id="videoUrl" required
                                   placeholder="https://youtube.com/watch?v=... or Bunny CDN URL">
                            <div class="form-text">Paste the full URL from YouTube or Bunny CDN</div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <label for="videoProvider" class="form-label">Video Provider *</label>
                                <select class="form-select" id="videoProvider" required>
                                    <option value="0">YouTube</option>
                                    <option value="1">Bunny CDN</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="videoDuration" class="form-label">Duration (optional)</label>
                                <input type="text" class="form-control duration-input" id="videoDuration"
                                       placeholder="00:05:30" pattern="^[0-9]{2}:[0-9]{2}:[0-9]{2}$">
                                <div class="form-text">Format: HH:MM:SS</div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn add-content-btn">
                            <i class="fas fa-plus me-1"></i> Add Video
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Add File Modal -->
    <div class="modal fade" id="addFileModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-file me-2"></i>Add File to Lesson</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form id="addFileForm" enctype="multipart/form-data">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="fileDisplayName" class="form-label">Display Name *</label>
                            <input type="text" class="form-control" id="fileDisplayName" required
                                   placeholder="e.g., Lesson Notes PDF">
                        </div>
                        <div class="mb-3">
                            <label for="fileUpload" class="form-label">Choose File *</label>
                            <input type="file" class="form-control" id="fileUpload" required>
                            <div class="form-text">Maximum file size: 10MB</div>
                        </div>
                        <div id="filePreview" class="mt-3" style="display: none;">
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle me-2"></i>
                                <span id="fileInfo"></span>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn add-content-btn">
                            <i class="fas fa-upload me-1"></i> Upload File
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Add Exam Modal -->
    <div class="modal fade" id="addExamModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-clipboard-check me-2"></i>Link Exam to Lesson</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="examSelect" class="form-label">Select Exam *</label>
                        <select class="form-select" id="examSelect" required>
                            <option value="">Choose an exam to link...</option>
                        </select>
                    </div>
                    <div id="examDetails" class="mt-3" style="display: none;">
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            <div id="examInfo"></div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn add-content-btn" id="linkExamBtn" disabled>
                        <i class="fas fa-link me-1"></i> Link Exam
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
    <script>
        let currentLessonCode = null;
        let sortable = null;
        let lessonContent = [];

        document.addEventListener('DOMContentLoaded', function() {
            loadTeacherLessons();
            initializeEventHandlers();
        });

        async function loadTeacherLessons() {
            try {
                const response = await fetch('/LessonContent/GetTeacherLessons');
                const lessons = await response.json();

                const select = document.getElementById('lessonSelect');
                select.innerHTML = '<option value="">Choose a lesson to manage...</option>';

                lessons.forEach(lesson => {
                    const option = document.createElement('option');
                    option.value = lesson.lessonCode;
                    option.textContent = `${lesson.lessonName} - ${lesson.subjectName} (${lesson.eduYearName})`;
                    select.appendChild(option);
                });
            } catch (error) {
                console.error('Error loading lessons:', error);
                alert('Error loading lessons. Please refresh the page.');
            }
        }

        async function loadLessonContent(lessonCode, showLoader = true) {
            try {
                // Show loading indicator
                if (showLoader) {
                    const container = document.getElementById('lessonContentList');
                    container.innerHTML = `
                        <div class="text-center py-4">
                            <i class="fas fa-spinner fa-spin fa-2x text-primary"></i>
                            <p class="mt-2">Loading content...</p>
                        </div>
                    `;
                }

                // Add cache buster to prevent caching issues
                const timestamp = new Date().getTime();
                const response = await fetch(`/LessonContent/GetLessonContent?lessonCode=${lessonCode}&_t=${timestamp}`);

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                const content = await response.json();
                console.log(`✅ Loaded ${content.length} content items for lesson ${lessonCode} at ${new Date().toISOString()}`);

                lessonContent = content;
                renderContentList(content);
                initializeSortable();

                // Show/hide drag instructions
                const dragInstructions = document.getElementById('dragInstructions');
                if (dragInstructions) {
                    dragInstructions.style.display = content.length > 0 ? 'block' : 'none';
                }

                return true; // Success indicator

            } catch (error) {
                console.error('❌ Error loading lesson content:', error);
                const container = document.getElementById('lessonContentList');
                container.innerHTML = `
                    <div class="alert alert-danger text-center">
                        <i class="fas fa-exclamation-triangle"></i>
                        <p class="mb-2">Error loading content</p>
                        <button class="btn btn-sm btn-outline-danger" onclick="loadLessonContent(${lessonCode})">
                            <i class="fas fa-redo"></i> Retry
                        </button>
                    </div>
                `;
                return false; // Failure indicator
            }
        }

        function renderContentList(content) {
            const container = document.getElementById('lessonContentList');

            if (content.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-folder-open"></i>
                        <h5>No content yet</h5>
                        <p>Add videos, files, and exams to see them here</p>
                    </div>
                `;
                return;
            }

            // Sort content by sortOrder
            const sortedContent = [...content].sort((a, b) => {
                const sortA = a.sortOrder || 999;
                const sortB = b.sortOrder || 999;
                return sortA - sortB;
            });

            console.log(`📋 Rendering ${sortedContent.length} items in sort order`);

            container.innerHTML = sortedContent.map((item, index) => {
                const isVideo = item.fileType === 1;
                const isFile = item.fileType === 0 || item.fileType === 2;
                const isExam = item.fileType === 3;

                let itemClass = 'file-item';
                let badgeClass = 'file-badge';
                let typeName = 'File';
                let iconClass = 'fas fa-file-alt';
                let metaInfo = '';
                let actionButton = '';

                if (isVideo) {
                    itemClass = 'video-item';
                    badgeClass = 'video-badge';
                    typeName = 'Video';
                    iconClass = 'fas fa-play-circle';
                    metaInfo = `${item.videoProviderName || 'Unknown Provider'}${item.durationFormatted ? ` • ${item.durationFormatted}` : ''}`;
                    actionButton = `<button class="btn btn-sm btn-outline-danger" onclick="deleteContent(${item.itemCode}, 'video')" title="Delete Video">
                                     <i class="fas fa-trash"></i>
                                   </button>`;
                } else if (isExam) {
                    itemClass = 'exam-item';
                    badgeClass = 'exam-badge';
                    typeName = 'Exam';
                    iconClass = 'fas fa-clipboard-check';
                    metaInfo = `${item.examTimer ? `Duration: ${item.examTimer}` : ''}${item.examDegree ? ` • Total: ${item.examDegree} marks` : ''}`;
                    actionButton = `<button class="btn btn-sm btn-outline-warning" onclick="unlinkExam(${item.itemCode})" title="Unlink Exam">
                                     <i class="fas fa-unlink"></i> Unlink
                                   </button>`;
                } else {
                    metaInfo = `${item.fileExtension}${item.fileSizeFormatted ? ` • ${item.fileSizeFormatted}` : ''}`;
                    actionButton = `<button class="btn btn-sm btn-outline-danger" onclick="deleteContent(${item.itemCode}, 'file')" title="Delete File">
                                     <i class="fas fa-trash"></i>
                                   </button>`;
                }

                return `
                    <div class="content-item ${itemClass}"
                         data-item-code="${item.itemCode}"
                         data-item-type="${isExam ? 'exam' : 'file'}"
                         data-current-sort="${item.sortOrder || 999}">
                        <div class="d-flex align-items-center">
                            <div class="drag-handle me-3" title="Drag to reorder">
                                <i class="fas fa-grip-vertical"></i>
                            </div>
                            <div class="me-3" style="color: ${isVideo ? '#e74c3c' : isExam ? '#f39c12' : '#3498db'}; font-size: 1.5rem;">
                                <i class="${iconClass}"></i>
                            </div>
                            <div class="flex-grow-1">
                                <div class="d-flex align-items-center justify-content-between">
                                    <div>
                                        <h6 class="mb-1">
                                            <span class="content-badge ${badgeClass}">
                                                ${typeName} #${index + 1}
                                            </span>
                                            ${item.displayName}
                                            <small class="text-muted sort-indicator">(Sort: ${item.sortOrder || 'None'})</small>
                                        </h6>
                                        <small class="text-muted">
                                            <i class="fas fa-info-circle me-1"></i>
                                            ${metaInfo}
                                        </small>
                                    </div>
                                    <div>
                                        ${actionButton}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');

            console.log(`✅ Content rendered successfully at ${new Date().toLocaleTimeString()}`);
        }

        function initializeSortable() {
            const container = document.getElementById('lessonContentList');

            if (sortable) {
                sortable.destroy();
            }

            sortable = new Sortable(container, {
                handle: '.drag-handle',
                animation: 150,
                ghostClass: 'sortable-ghost',
                dragClass: 'sortable-drag',
                onEnd: function(evt) {
                    if (evt.oldIndex !== evt.newIndex) {
                        updateSortOrderAfterDrag();
                    }
                }
            });
        }

        async function updateSortOrderAfterDrag() {
            const items = document.querySelectorAll('.content-item');
            const sortData = Array.from(items).map((item, index) => ({
                itemCode: parseInt(item.dataset.itemCode),
                itemType: item.dataset.itemType,
                sortOrder: index + 1
            }));

            try {
                const response = await fetch('/LessonContent/UpdateSortOrder', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(sortData)
                });

                if (response.ok) {
                    // Update visual indicators
                    items.forEach((item, index) => {
                        const sortIndicator = item.querySelector('.sort-indicator');
                        if (sortIndicator) {
                            sortIndicator.textContent = `(Sort: ${index + 1})`;
                        }

                        const badge = item.querySelector('.content-badge');
                        if (badge) {
                            const badgeText = badge.textContent;
                            badge.textContent = badgeText.replace(/#\d+/, `#${index + 1}`);
                        }
                    });

                    showSuccessMessage('Content order updated successfully!');
                } else {
                    throw new Error('Failed to update sort order');
                }
            } catch (error) {
                console.error('Error updating sort order:', error);
                alert('Error updating order. Please refresh the page.');
            }
        }

        function showSuccessMessage(message) {
            // Remove existing messages
            document.querySelectorAll('.alert-success.position-fixed').forEach(msg => msg.remove());

            const successDiv = document.createElement('div');
            successDiv.className = 'alert alert-success position-fixed';
            successDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; width: auto; max-width: 400px;';
            successDiv.innerHTML = `<i class="fas fa-check-circle me-2"></i>${message}`;

            document.body.appendChild(successDiv);

            setTimeout(() => {
                if (successDiv.parentNode) {
                    successDiv.parentNode.removeChild(successDiv);
                }
            }, 3000);
        }

        async function deleteContent(itemCode, itemType) {
            if (!confirm(`Are you sure you want to delete this ${itemType}?`)) {
                return;
            }

            console.log(`🗑️ Deleting ${itemType} with code: ${itemCode} by hossamadel7 at ${new Date().toISOString()}`);

            try {
                // Show loading state for the specific item
                const itemElement = document.querySelector(`[data-item-code="${itemCode}"]`);
                if (itemElement) {
                    itemElement.style.opacity = '0.5';
                    itemElement.style.pointerEvents = 'none';
                }

                const response = await fetch(`/LessonContent/DeleteContent?fileCode=${itemCode}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    console.log(`✅ ${itemType} deleted successfully`);
                    showSuccessMessage(`${itemType.charAt(0).toUpperCase() + itemType.slice(1)} deleted successfully!`);

                    // Force immediate reload
                    await forceReloadContent();
                } else {
                    throw new Error(`Delete failed: ${response.status}`);
                }
            } catch (error) {
                console.error('❌ Error deleting content:', error);
                alert(`Error deleting ${itemType}. Please try again.`);

                // Restore item state on error
                const itemElement = document.querySelector(`[data-item-code="${itemCode}"]`);
                if (itemElement) {
                    itemElement.style.opacity = '1';
                    itemElement.style.pointerEvents = 'auto';
                }
            }
        }

        async function unlinkExam(examCode) {
            if (!confirm('Are you sure you want to unlink this exam from the lesson?')) {
                return;
            }

            console.log(`🔗 Unlinking exam with code: ${examCode} by hossamadel7 at ${new Date().toISOString()}`);

            try {
                const response = await fetch('/LessonContent/UnlinkExamFromLesson', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(examCode)
                });

                if (response.ok) {
                    console.log('✅ Exam unlinked successfully');
                    showSuccessMessage('Exam unlinked successfully!');
                    await forceReloadContent();
                } else {
                    throw new Error(`Unlink failed: ${response.status}`);
                }
            } catch (error) {
                console.error('❌ Error unlinking exam:', error);
                alert('Error unlinking exam. Please try again.');
            }
        }

        async function forceReloadContent() {
            console.log(`🔄 Force reloading content for lesson ${currentLessonCode} at ${new Date().toISOString()}`);

            // Wait a bit for database to update
            await new Promise(resolve => setTimeout(resolve, 1000));

            // Try multiple times if needed
            for (let attempt = 1; attempt <= 3; attempt++) {
                console.log(`📡 Reload attempt ${attempt}/3`);

                const success = await loadLessonContent(currentLessonCode, true);
                if (success) {
                    console.log(`✅ Content reloaded successfully on attempt ${attempt}`);
                    return;
                }

                if (attempt < 3) {
                    console.log(`⏳ Waiting before retry attempt ${attempt + 1}`);
                    await new Promise(resolve => setTimeout(resolve, 2000));
                }
            }

            console.log('❌ All reload attempts failed');
            alert('Content updated but display refresh failed. Please refresh the page manually.');
        }

        async function loadAvailableExams() {
            try {
                const response = await fetch(`/LessonContent/GetAvailableExams?lessonCode=${currentLessonCode}`);
                const exams = await response.json();

                const select = document.getElementById('examSelect');
                select.innerHTML = '<option value="">Choose an exam to link...</option>';

                exams.forEach(exam => {
                    const option = document.createElement('option');
                    option.value = exam.examCode;
                    option.textContent = `${exam.examName} (${exam.examDegree} marks, ${exam.examTimer})`;
                    option.dataset.examData = JSON.stringify(exam);
                    select.appendChild(option);
                });
            } catch (error) {
                console.error('Error loading available exams:', error);
                alert('Error loading available exams.');
            }
        }

        function initializeEventHandlers() {
            // Lesson selection
            document.getElementById('lessonSelect').addEventListener('change', function() {
                currentLessonCode = this.value ? parseInt(this.value) : null;
                const addBtns = document.querySelectorAll('#addVideoBtn, #addFileBtn, #addExamBtn');

                if (currentLessonCode) {
                    addBtns.forEach(btn => btn.disabled = false);
                    loadLessonContent(currentLessonCode);
                } else {
                    addBtns.forEach(btn => btn.disabled = true);
                    document.getElementById('lessonContentList').innerHTML = `
                        <div class="empty-state">
                            <i class="fas fa-folder-open"></i>
                            <h5>No lesson selected</h5>
                            <p>Choose a lesson from the dropdown to manage its content</p>
                        </div>
                    `;
                }
            });

            // Add buttons
            document.getElementById('addVideoBtn').addEventListener('click', () => {
                new bootstrap.Modal(document.getElementById('addVideoModal')).show();
            });

            document.getElementById('addFileBtn').addEventListener('click', () => {
                new bootstrap.Modal(document.getElementById('addFileModal')).show();
            });

            document.getElementById('addExamBtn').addEventListener('click', () => {
                loadAvailableExams();
                new bootstrap.Modal(document.getElementById('addExamModal')).show();
            });

            // Exam selection
            document.getElementById('examSelect').addEventListener('change', function() {
                const examDetails = document.getElementById('examDetails');
                const examInfo = document.getElementById('examInfo');
                const linkBtn = document.getElementById('linkExamBtn');

                if (this.value) {
                    const examData = JSON.parse(this.selectedOptions[0].dataset.examData);
                    examInfo.innerHTML = `
                        <strong>${examData.examName}</strong><br>
                        Total Marks: ${examData.examDegree}<br>
                        Duration: ${examData.examTimer}<br>
                        Teacher: ${examData.teacherName}<br>
                        Type: ${examData.isOnline ? 'Online' : 'Offline'}
                    `;
                    examDetails.style.display = 'block';
                    linkBtn.disabled = false;
                } else {
                    examDetails.style.display = 'none';
                    linkBtn.disabled = true;
                }
            });

            // Link exam button
            document.getElementById('linkExamBtn').addEventListener('click', async function() {
                const examCode = parseInt(document.getElementById('examSelect').value);
                const currentContentCount = document.querySelectorAll('.content-item').length;

                console.log(`🔗 Linking exam ${examCode} by hossamadel7 at ${new Date().toISOString()}`);

                try {
                    const response = await fetch('/LessonContent/LinkExamToLesson', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            examCode: examCode,
                            lessonCode: currentLessonCode,
                            sortOrder: currentContentCount + 1
                        })
                    });

                    if (response.ok) {
                        bootstrap.Modal.getInstance(document.getElementById('addExamModal')).hide();
                        console.log('✅ Exam linked successfully');
                        showSuccessMessage('Exam linked successfully!');
                        await forceReloadContent();
                    } else {
                        throw new Error(`Link failed: ${response.status}`);
                    }
                } catch (error) {
                    console.error('❌ Error linking exam:', error);
                    alert('Error linking exam. Please try again.');
                }
            });

            // File upload preview
            document.getElementById('fileUpload').addEventListener('change', function() {
                const file = this.files[0];
                const preview = document.getElementById('filePreview');
                const fileInfo = document.getElementById('fileInfo');

                if (file) {
                    const sizeFormatted = formatFileSize(file.size);
                    fileInfo.textContent = `${file.name} (${sizeFormatted})`;
                    preview.style.display = 'block';

                    if (file.size > 10 * 1024 * 1024) {
                        preview.className = 'mt-3 alert alert-danger';
                        fileInfo.innerHTML = `<i class="fas fa-exclamation-triangle me-2"></i>File too large! Maximum size is 10MB.`;
                    } else {
                        preview.className = 'mt-3 alert alert-info';
                    }
                } else {
                    preview.style.display = 'none';
                }
            });

            // Form submissions
            document.getElementById('addVideoForm').addEventListener('submit', handleVideoSubmit);
            document.getElementById('addFileForm').addEventListener('submit', handleFileSubmit);
        }

        async function handleVideoSubmit(e) {
            e.preventDefault();

            const currentContentCount = document.querySelectorAll('.content-item').length;
            const formData = {
                lessonCode: currentLessonCode,
                displayName: document.getElementById('videoDisplayName').value,
                videoUrl: document.getElementById('videoUrl').value,
                videoProvider: parseInt(document.getElementById('videoProvider').value),
                sortOrder: currentContentCount + 1,
                duration: document.getElementById('videoDuration').value || null
            };

            console.log(`🎥 Adding video by hossamadel7 at ${new Date().toISOString()}:`, formData);

            try {
                const response = await fetch('/LessonContent/AddVideo', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });

                if (response.ok) {
                    bootstrap.Modal.getInstance(document.getElementById('addVideoModal')).hide();
                    e.target.reset();
                    console.log('✅ Video added successfully');
                    showSuccessMessage('Video added successfully!');
                    await forceReloadContent();
                } else {
                    const error = await response.text();
                    throw new Error(error || `Add video failed: ${response.status}`);
                }
            } catch (error) {
                console.error('❌ Error adding video:', error);
                alert(`Error adding video: ${error.message}`);
            }
        }

        async function handleFileSubmit(e) {
            e.preventDefault();

            const fileInput = document.getElementById('fileUpload');
            const file = fileInput.files[0];

            if (!file || file.size > 10 * 1024 * 1024) {
                alert('Please select a file under 10MB');
                return;
            }

            const currentContentCount = document.querySelectorAll('.content-item').length;
            const formData = new FormData();
            formData.append('lessonCode', currentLessonCode);
            formData.append('displayName', document.getElementById('fileDisplayName').value);
            formData.append('sortOrder', currentContentCount + 1);
            formData.append('file', file);

            console.log(`📄 Adding file by hossamadel7 at ${new Date().toISOString()}: ${file.name}`);

            try {
                const response = await fetch('/LessonContent/AddFile', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    bootstrap.Modal.getInstance(document.getElementById('addFileModal')).hide();
                    e.target.reset();
                    document.getElementById('filePreview').style.display = 'none';
                    console.log('✅ File added successfully');
                    showSuccessMessage('File uploaded successfully!');
                    await forceReloadContent();
                } else {
                    const error = await response.text();
                    throw new Error(error || `File upload failed: ${response.status}`);
                }
            } catch (error) {
                console.error('❌ Error uploading file:', error);
                alert(`Error uploading file: ${error.message}`);
            }
        }

        function formatFileSize(bytes) {
            const sizes = ['B', 'KB', 'MB', 'GB'];
            if (bytes === 0) return '0 B';
            const i = Math.floor(Math.log(bytes) / Math.log(1024));
            return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
        }

        console.log('✅ Lesson Content Management loaded at 2025-08-30 21:50:53 UTC by hossamadel7');
    </script>
</body>
</html>