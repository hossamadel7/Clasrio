<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>Lesson Content Management</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.css" />
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #6c5ce7 0%, #a29bfe 100%);
            --primary-color: #6c5ce7;
            --border-radius-lg: 16px;
            --shadow-lg: 0 8px 36px rgba(108,92,231,0.18);
        }

        body {
            background: #f5f7fb;
        }

        .content-header {
            background: var(--primary-gradient);
            color: white;
            padding: 2rem 0;
            border-radius: var(--border-radius-lg);
            margin-bottom: 2rem;
            text-align: center;
        }

        .panel {
            background: white;
            border-radius: var(--border-radius-lg);
            padding: 1.25rem 1.5rem 1.5rem;
            box-shadow: var(--shadow-lg);
            margin-bottom: 1.5rem;
        }

            .panel h6 {
                font-size: .85rem;
                letter-spacing: .5px;
                text-transform: uppercase;
                font-weight: 600;
                color: #6c5ce7;
                margin-bottom: .75rem;
            }

        .content-section {
            background: white;
            border-radius: var(--border-radius-lg);
            padding: 1.5rem;
            box-shadow: var(--shadow-lg);
            margin-bottom: 1.5rem;
        }

        .content-item {
            background: #f8f9fa;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 1rem;
            margin-bottom: 1rem;
            cursor: default;
            transition: all 0.25s ease;
            position: relative;
        }

            .content-item:hover {
                border-color: var(--primary-color);
                box-shadow: 0 4px 12px rgba(108,92,231,0.15);
            }

            .content-item.sortable-ghost {
                opacity: 0.4;
                background: #e9ecef;
                border: 2px dashed #6c757d;
            }

            .content-item.sortable-drag {
                cursor: grabbing;
                transform: rotate(2deg);
                box-shadow: 0 8px 32px rgba(0,0,0,0.3);
                z-index: 1000;
            }

        .video-item {
            border-left: 4px solid #e74c3c;
        }

        .file-item {
            border-left: 4px solid #3498db;
        }

        .exam-item {
            border-left: 4px solid #f39c12;
        }

        .content-badge {
            font-size: 0.7rem;
            padding: 0.25rem 0.65rem;
            border-radius: 20px;
            font-weight: 600;
            letter-spacing: .5px;
        }

        .video-badge {
            background: #e74c3c;
            color: #fff;
        }

        .file-badge {
            background: #3498db;
            color: #fff;
        }

        .exam-badge {
            background: #f39c12;
            color: #fff;
        }

        .add-content-btn {
            background: var(--primary-gradient);
            border: none;
            border-radius: 10px;
            color: white;
            padding: 0.65rem 1.25rem;
            font-weight: 600;
            font-size: .85rem;
            transition: transform 0.2s ease, box-shadow .2s;
        }

            .add-content-btn:hover {
                transform: translateY(-2px);
                color: white;
                box-shadow: 0 4px 14px rgba(108,92,231,.35);
            }

        .drag-handle {
            color: #6c757d;
            cursor: grab;
            transition: all 0.2s ease;
            padding: 0.5rem;
            margin: -0.5rem;
            border-radius: 4px;
        }

            .drag-handle:hover {
                color: var(--primary-color);
                background: rgba(108, 92, 231, 0.1);
            }

            .drag-handle:active {
                cursor: grabbing;
            }

        .empty-state {
            text-align: center;
            padding: 3rem 1rem;
            color: #6c757d;
        }

            .empty-state i {
                font-size: 3rem;
                margin-bottom: 1rem;
                opacity: 0.3;
            }

        .modal-content {
            border-radius: var(--border-radius-lg);
        }

        .duration-input {
            font-family: 'Courier New', monospace;
        }

        #lessonContentList {
            min-height: 200px;
        }

        .sort-indicator {
            font-weight: 500;
            color: var(--primary-color) !important;
        }

        .drag-instructions {
            background: #eef2ff;
            border: 1px solid #d6ddff;
            border-radius: 10px;
            padding: 0.75rem .9rem;
            margin-bottom: 1rem;
            font-size: 0.85rem;
            color: #3d4b91;
        }

        .alert-success {
            border-left: 4px solid #28a745;
            animation: slideInRight 0.3s ease-out;
        }

        @@keyframes slideInRight {
            from

        {
            transform: translateX(100%);
            opacity: 0;
        }

        to {
            transform: translateX(0);
            opacity: 1;
        }

        }

        .filter-badge {
            font-size: .65rem;
            background: #6c5ce722;
            color: #6c5ce7;
            border: 1px solid #6c5ce733;
            padding: .35rem .6rem;
            border-radius: 30px;
            margin-right: .4rem;
            margin-top: .35rem;
            display: inline-flex;
            align-items: center;
            gap: .4rem;
        }

            .filter-badge i {
                font-size: .7rem;
            }

        .filters-row .form-select {
            font-size: .8rem;
        }

        .fade-in {
            animation: fadeIn .25s ease;
        }
        @@keyframes fadeIn {
            from

        {
            opacity: 0;
            transform: translateY(6px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }
    </style>
</head>
<body>
    <div class="container-fluid py-4">
        <div class="content-header position-relative">
            <h1 class="h3 mb-2"><i class="fas fa-play-circle me-2"></i>Lesson Content Management</h1>
            <p class="mb-0 opacity-75">Add videos, files, and exams to your lessons with drag-and-drop organization</p>
        </div>

        <!-- Filters -->
        <div class="panel fade-in" id="filtersPanel">
            <h6><i class="fas fa-filter me-1"></i> Filters</h6>
            <div class="row g-3 filters-row">
                <div class="col-md-3 col-sm-6">
                    <label class="form-label small fw-semibold mb-1" for="filterYear">
                        <i class="fas fa-calendar-alt me-1 text-primary"></i>Year
                    </label>
                    <select id="filterYear" class="form-select form-select-sm">
                        <option value="">All Years</option>
                    </select>
                </div>
                <div class="col-md-3 col-sm-6">
                    <label class="form-label small fw-semibold mb-1" for="filterSubject">
                        <i class="fas fa-book me-1 text-primary"></i>Subject
                    </label>
                    <select id="filterSubject" class="form-select form-select-sm">
                        <option value="">All Subjects</option>
                    </select>
                </div>
                <div class="col-md-3 col-sm-6">
                    <label class="form-label small fw-semibold mb-1 invisible d-block">Apply</label>
                    <button id="resetFiltersBtn" class="btn btn-outline-secondary btn-sm w-100">
                        <i class="fas fa-undo me-1"></i> Reset Filters
                    </button>
                </div>
                <div class="col-md-3 col-sm-6">
                    <label class="form-label small fw-semibold mb-1 invisible d-block">Refresh</label>
                    <button id="refreshFiltersBtn" class="btn btn-outline-primary btn-sm w-100">
                        <i class="fas fa-sync-alt me-1"></i> Refresh Lists
                    </button>
                </div>
            </div>
            <div id="activeFilters" class="mt-2 d-flex flex-wrap"></div>
        </div>

        <!-- Lesson Selector & Actions -->
        <div class="panel fade-in">
            <h6><i class="fas fa-layer-group me-1"></i> Select Lesson</h6>
            <div class="row align-items-end gy-3">
                <div class="col-lg-6">
                    <label for="lessonSelect" class="form-label small fw-semibold mb-1">Lesson</label>
                    <select class="form-select" id="lessonSelect">
                        <option value="">Choose a lesson to manage...</option>
                    </select>
                    <div class="form-text" id="lessonsCountHelp"></div>
                </div>
                <div class="col-lg-6 text-lg-end">
                    <div class="d-flex flex-wrap gap-2 justify-content-lg-end">
                        <button class="btn add-content-btn" id="addVideoBtn" disabled>
                            <i class="fas fa-video me-1"></i> Video
                        </button>
                        <button class="btn add-content-btn" id="addFileBtn" disabled>
                            <i class="fas fa-file me-1"></i> File
                        </button>
                        <button class="btn add-content-btn" id="addExamBtn" disabled>
                            <i class="fas fa-clipboard-check me-1"></i> Exam
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Content List -->
        <div class="content-section fade-in">
            <div class="d-flex flex-wrap justify-content-between align-items-center mb-3">
                <h4 class="h6 mb-2 mb-sm-0"><i class="fas fa-list me-2 text-primary"></i>Lesson Content</h4>
                <small class="text-muted">Drag items by the grip handle to reorder</small>
            </div>

            <div class="drag-instructions" id="dragInstructions" style="display:none;">
                <i class="fas fa-info-circle me-2"></i>
                <strong>Drag & Drop:</strong> Use the grip handle (<i class="fas fa-grip-vertical"></i>) to reorder items. Changes save automatically.
            </div>

            <div id="lessonContentList">
                <div class="empty-state" id="emptyState">
                    <i class="fas fa-folder-open"></i>
                    <h5>No content yet</h5>
                    <p>Select a lesson and start adding videos, files, and exams</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Video Modal -->
    <div class="modal fade" id="addVideoModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-video me-2"></i>Add Video to Lesson</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form id="addVideoForm">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="videoDisplayName" class="form-label">Display Name *</label>
                            <input type="text" class="form-control" id="videoDisplayName" required placeholder="e.g., Introduction to Algebra">
                        </div>
                        <div class="mb-3">
                            <label for="videoUrl" class="form-label">Video URL *</label>
                            <input type="url" class="form-control" id="videoUrl" required placeholder="https://youtube.com/watch?v=...">
                            <div class="form-text">Paste the full URL (YouTube or Bunny CDN)</div>
                        </div>
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label for="videoProvider" class="form-label">Video Provider *</label>
                                <select class="form-select" id="videoProvider" required>
                                    <option value="0">YouTube</option>
                                    <option value="1">Bunny CDN</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="videoDuration" class="form-label">Duration (optional)</label>
                                <input type="text" class="form-control duration-input" id="videoDuration" placeholder="00:05:30" pattern="^[0-9]{2}:[0-9]{2}:[0-9]{2}$">
                                <div class="form-text">Format: HH:MM:SS</div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn add-content-btn btn-sm">
                            <i class="fas fa-plus me-1"></i> Add Video
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Add File Modal -->
    <div class="modal fade" id="addFileModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas a-file me-2 fa-file"></i>Add File to Lesson</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form id="addFileForm" enctype="multipart/form-data">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="fileDisplayName" class="form-label">Display Name *</label>
                            <input type="text" class="form-control" id="fileDisplayName" required placeholder="e.g., Lesson Notes PDF">
                        </div>
                        <div class="mb-3">
                            <label for="fileUpload" class="form-label">Choose File *</label>
                            <input type="file" class="form-control" id="fileUpload" required>
                            <div class="form-text">Maximum file size: 10MB</div>
                        </div>
                        <div id="filePreview" class="mt-3" style="display:none;">
                            <div class="alert alert-info mb-0">
                                <i class="fas fa-info-circle me-2"></i>
                                <span id="fileInfo"></span>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn add-content-btn btn-sm">
                            <i class="fas fa-upload me-1"></i> Upload File
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Add Exam Modal -->
    <div class="modal fade" id="addExamModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-clipboard-check me-2"></i>Link Exam to Lesson</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="examSelect" class="form-label">Select Exam *</label>
                        <select class="form-select" id="examSelect" required>
                            <option value="">Choose an exam to link...</option>
                        </select>
                    </div>
                    <div id="examDetails" class="mt-3" style="display:none;">
                        <div class="alert alert-info mb-0">
                            <i class="fas fa-info-circle me-2"></i>
                            <div id="examInfo"></div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn add-content-btn btn-sm" id="linkExamBtn" disabled>
                        <i class="fas fa-link me-1"></i> Link Exam
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
    <script>
        let currentLessonCode = null;
        let sortable = null;
        let lessonContent = [];
        let filtersLoaded = false;

        let currentSubjectFilter = '';
        let currentYearFilter = '';

        document.addEventListener('DOMContentLoaded', () => {
            loadFilters().then(() => {
                filtersLoaded = true;
                loadTeacherLessons();
            });
            initializeEventHandlers();
        });

        /* ================== FILTERS ================== */

        async function loadFilters() {
            try {
                const res = await fetch('/LessonContent/GetLessonFilters');
                if (!res.ok) throw new Error('Failed to load filters');
                const data = await res.json();
                populateFilterSelects(data);
            } catch (e) {
                console.error('Error loading filters', e);
                document.getElementById('activeFilters').innerHTML =
                    '<span class="text-danger small">Failed to load filters</span>';
            }
        }

        function populateFilterSelects(data) {
            const subjSel = document.getElementById('filterSubject');
            const yearSel = document.getElementById('filterYear');

            const prevSubject = subjSel.value;
            const prevYear = yearSel.value;

            subjSel.innerHTML = '<option value="">All Subjects</option>';
            yearSel.innerHTML = '<option value="">All Years</option>';

            (data.subjects || []).forEach(s => {
                const opt = document.createElement('option');
                opt.value = s.subjectCode;
                opt.textContent = s.subjectName;
                subjSel.appendChild(opt);
            });

            // FIXED: use data.years instead of data.eduYears
            (data.years || []).forEach(y => {
                const opt = document.createElement('option');
                opt.value = y.yearCode;
                opt.textContent = y.yearName;
                yearSel.appendChild(opt);
            });

            if ([...subjSel.options].some(o => o.value === prevSubject)) subjSel.value = prevSubject;
            if ([...yearSel.options].some(o => o.value === prevYear)) yearSel.value = prevYear;

            updateActiveFiltersBadges();
        }

        function updateActiveFiltersBadges() {
            const container = document.getElementById('activeFilters');
            container.innerHTML = '';
            currentSubjectFilter = document.getElementById('filterSubject').value;
            currentYearFilter = document.getElementById('filterYear').value;

            const subjectText = document.getElementById('filterSubject').selectedOptions[0]?.text;
            const yearText = document.getElementById('filterYear').selectedOptions[0]?.text;

            if (!currentSubjectFilter && !currentYearFilter) {
                container.innerHTML = '<span class="text-muted small"><i class="fas fa-info-circle me-1"></i>No active filters</span>';
                return;
            }

            if (currentYearFilter) {
                container.appendChild(createFilterBadge('Year', yearText, () => {
                    document.getElementById('filterYear').value = '';
                    filtersChanged();
                }));
            }
            if (currentSubjectFilter) {
                container.appendChild(createFilterBadge('Subject', subjectText, () => {
                    document.getElementById('filterSubject').value = '';
                    filtersChanged();
                }));
            }
        }

        function createFilterBadge(label, value, onRemove) {
            const span = document.createElement('span');
            span.className = 'filter-badge';
            span.innerHTML = `<i class="fas fa-tag"></i><strong>${label}:</strong> ${value} <button type="button" class="btn btn-link p-0 m-0 text-decoration-none text-danger ms-1" style="line-height:1" title="Remove"><i class="fas fa-times"></i></button>`;
            span.querySelector('button').addEventListener('click', onRemove);
            return span;
        }

        function filtersChanged() {
            updateActiveFiltersBadges();
            currentLessonCode = null;
            document.getElementById('lessonSelect').value = '';
            disableActionButtons(true);
            setContentEmptyState('Choose a lesson and manage its content');
            loadTeacherLessons();
        }

        function disableActionButtons(disabled) {
            document.querySelectorAll('#addVideoBtn,#addFileBtn,#addExamBtn')
                .forEach(btn => btn.disabled = disabled);
        }

        /* ================== LESSONS DROPDOWN ================== */

        async function loadTeacherLessons() {
            try {
                const params = [];
                if (currentSubjectFilter) params.push('subjectCode=' + encodeURIComponent(currentSubjectFilter));
                if (currentYearFilter) params.push('yearCode=' + encodeURIComponent(currentYearFilter)); // FIXED param name
                const query = params.length ? ('?' + params.join('&')) : '';
                const response = await fetch('/LessonContent/GetTeacherLessons' + query);
                if (!response.ok) throw new Error(`HTTP ${response.status}`);

                const chapters = await response.json();
                const select = document.getElementById('lessonSelect');
                select.innerHTML = '<option value="">Choose a lesson to manage...</option>';

                let totalLessons = 0;
                chapters.forEach(chapter => {
                    const lessonsArr = chapter.lessons || chapter.Lessons || [];
                    if (lessonsArr.length > 0) {
                        const optgroup = document.createElement('optgroup');
                        const chapterName = chapter.chapterName || chapter.ChapterName || 'Chapter';
                        const subjectName = chapter.subjectName || chapter.SubjectName || 'Subject';
                        const eduYearName = chapter.eduYearName || chapter.EduYearName || '';
                        optgroup.label = `${chapterName} - ${subjectName} (${eduYearName})`;
                        lessonsArr.forEach(lesson => {
                            const option = document.createElement('option');
                            option.value = lesson.lessonCode || lesson.LessonCode;
                            option.textContent = lesson.lessonName || lesson.LessonName;
                            optgroup.appendChild(option);
                        });
                        select.appendChild(optgroup);
                        totalLessons += lessonsArr.length;
                    }
                });

                document.getElementById('lessonsCountHelp').textContent =
                    totalLessons > 0
                        ? `${totalLessons} lesson${totalLessons === 1 ? '' : 's'} found`
                        : 'No lessons match current filters';

                if (totalLessons === 0) {
                    select.innerHTML = '<option value="">No lessons available for filters</option>';
                }
            } catch (error) {
                console.error('Error loading lessons:', error);
                alert('Error loading lessons. Please refresh the page.');
            }
        }

        /* ================== CONTENT LIST ================== */

        async function loadLessonContent(lessonCode, showLoader = true) {
            try {
                if (showLoader) {
                    document.getElementById('lessonContentList').innerHTML = `
                        <div class="text-center py-4">
                            <i class="fas fa-spinner fa-spin fa-2x text-primary"></i>
                            <p class="mt-2 mb-0 small">Loading content...</p>
                        </div>
                    `;
                }
                const timestamp = Date.now();
                const response = await fetch(`/LessonContent/GetLessonContent?lessonCode=${lessonCode}&_t=${timestamp}`);
                if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);

                const content = await response.json();
                lessonContent = content;
                renderContentList(content);
                initializeSortable();
                document.getElementById('dragInstructions').style.display = content.length > 0 ? 'block' : 'none';
                return true;
            } catch (error) {
                console.error('Error loading lesson content:', error);
                document.getElementById('lessonContentList').innerHTML = `
                    <div class="alert alert-danger text-center">
                        <i class="fas fa-exclamation-triangle me-1"></i>
                        Error loading content
                        <div class="mt-2">
                            <button class="btn btn-sm btn-outline-danger" onclick="loadLessonContent(${lessonCode})">
                                <i class="fas fa-redo"></i> Retry
                            </button>
                        </div>
                    </div>
                `;
                return false;
            }
        }

        function setContentEmptyState(message) {
            document.getElementById('lessonContentList').innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-folder-open"></i>
                    <h5>No lesson selected</h5>
                    <p>${message}</p>
                </div>
            `;
        }

        function renderContentList(content) {
            const container = document.getElementById('lessonContentList');

            if (content.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-folder-open"></i>
                        <h5>No content yet</h5>
                        <p>Add videos, files, and exams to see them here</p>
                    </div>
                `;
                return;
            }

            const sortedContent = [...content].sort((a, b) => (a.sortOrder || 999) - (b.sortOrder || 999));

            container.innerHTML = sortedContent.map((item, index) => {
                const isVideo = item.fileType === 1;
                const isExam = item.fileType === 3;

                let itemClass = isVideo ? 'video-item' : isExam ? 'exam-item' : 'file-item';
                let badgeClass = isVideo ? 'video-badge' : isExam ? 'exam-badge' : 'file-badge';
                let typeName = isVideo ? 'Video' : isExam ? 'Exam' : 'File';
                let iconClass = isVideo ? 'fas fa-play-circle' : isExam ? 'fas fa-clipboard-check' : 'fas fa-file-alt';

                let metaInfo = '';
                let actionButton = '';

                if (isVideo) {
                    metaInfo = `${item.videoProviderName || 'Unknown Provider'}${item.durationFormatted ? ' • ' + item.durationFormatted : ''}`;
                    actionButton = `<button class="btn btn-sm btn-outline-danger" onclick="deleteContent(${item.itemCode}, 'video')" title="Delete Video">
                                        <i class="fas fa-trash"></i>
                                    </button>`;
                } else if (isExam) {
                    metaInfo = `${item.examTimer ? 'Duration: ' + item.examTimer : ''}${item.examDegree ? ' • Total: ' + item.examDegree + ' marks' : ''}`;
                    actionButton = `<button class="btn btn-sm btn-outline-warning" onclick="unlinkExam(${item.itemCode})" title="Unlink Exam">
                                        <i class="fas fa-unlink"></i> Unlink
                                    </button>`;
                } else {
                    metaInfo = `${item.fileExtension || ''}${item.fileSizeFormatted ? ' • ' + item.fileSizeFormatted : ''}`;
                    actionButton = `<button class="btn btn-sm btn-outline-danger" onclick="deleteContent(${item.itemCode}, 'file')" title="Delete File">
                                        <i class="fas fa-trash"></i>
                                    </button>`;
                }

                return `
                    <div class="content-item ${itemClass}"
                         data-item-code="${item.itemCode}"
                         data-item-type="${isExam ? 'exam' : 'file'}"
                         data-current-sort="${item.sortOrder || 999}">
                        <div class="d-flex align-items-center">
                            <div class="drag-handle me-3" title="Drag to reorder">
                                <i class="fas fa-grip-vertical"></i>
                            </div>
                            <div class="me-3" style="color:${isVideo ? '#e74c3c' : isExam ? '#f39c12' : '#3498db'}; font-size:1.4rem;">
                                <i class="${iconClass}"></i>
                            </div>
                            <div class="flex-grow-1">
                                <div class="d-flex align-items-center justify-content-between">
                                    <div>
                                        <h6 class="mb-1">
                                            <span class="content-badge ${badgeClass}">
                                                ${typeName} #${index + 1}
                                            </span>
                                            ${item.displayName}
                                            <small class="text-muted sort-indicator">(Sort: ${item.sortOrder || 'None'})</small>
                                        </h6>
                                        <small class="text-muted">
                                            <i class="fas fa-info-circle me-1"></i>${metaInfo}
                                        </small>
                                    </div>
                                    <div>${actionButton}</div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        /* ================== SORTABLE ================== */
        function initializeSortable() {
            const container = document.getElementById('lessonContentList');
            if (sortable) sortable.destroy();

            sortable = new Sortable(container, {
                handle: '.drag-handle',
                animation: 150,
                ghostClass: 'sortable-ghost',
                dragClass: 'sortable-drag',
                onEnd: evt => {
                    if (evt.oldIndex !== evt.newIndex) updateSortOrderAfterDrag();
                }
            });
        }

        async function updateSortOrderAfterDrag() {
            const items = document.querySelectorAll('.content-item');
            const sortData = Array.from(items).map((item, index) => ({
                itemCode: parseInt(item.dataset.itemCode),
                itemType: item.dataset.itemType,
                sortOrder: index + 1
            }));

            try {
                const response = await fetch('/LessonContent/UpdateSortOrder', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(sortData)
                });
                if (!response.ok) throw new Error('Failed to update sort order');

                items.forEach((item, index) => {
                    const sortIndicator = item.querySelector('.sort-indicator');
                    if (sortIndicator) sortIndicator.textContent = `(Sort: ${index + 1})`;
                    const badge = item.querySelector('.content-badge');
                    if (badge) badge.textContent = badge.textContent.replace(/#\d+/, `#${index + 1}`);
                });

                showSuccessMessage('Content order updated successfully!');
            } catch (err) {
                console.error(err);
                alert('Error updating order. Please refresh the page.');
            }
        }

        /* ================== CRUD ACTIONS ================== */

        async function deleteContent(itemCode, itemType) {
            if (!confirm(`Are you sure you want to delete this ${itemType}?`)) return;

            const itemElement = document.querySelector(`[data-item-code="${itemCode}"]`);
            if (itemElement) {
                itemElement.style.opacity = '0.5';
                itemElement.style.pointerEvents = 'none';
            }

            try {
                const response = await fetch(`/LessonContent/DeleteContent?fileCode=${itemCode}`, { method: 'DELETE' });
                if (!response.ok) throw new Error('Delete failed');
                showSuccessMessage(`${itemType.charAt(0).toUpperCase() + itemType.slice(1)} deleted successfully!`);
                await forceReloadContent();
            } catch (e) {
                alert(`Error deleting ${itemType}. Please try again.`);
                if (itemElement) {
                    itemElement.style.opacity = '1';
                    itemElement.style.pointerEvents = 'auto';
                }
            }
        }

        async function unlinkExam(examCode) {
            if (!confirm('Are you sure you want to unlink this exam from the lesson?')) return;
            try {
                const response = await fetch('/LessonContent/UnlinkExamFromLesson', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(examCode)
                });
                if (!response.ok) throw new Error('Unlink failed');
                showSuccessMessage('Exam unlinked successfully!');
                await forceReloadContent();
            } catch {
                alert('Error unlinking exam. Please try again.');
            }
        }

        async function forceReloadContent() {
            if (!currentLessonCode) return;
            await new Promise(r => setTimeout(r, 500));
            for (let attempt = 1; attempt <= 3; attempt++) {
                const ok = await loadLessonContent(currentLessonCode, true);
                if (ok) return;
                await new Promise(r => setTimeout(r, 700));
            }
            alert('Content updated but display did not refresh. Please reload the page.');
        }

        async function loadAvailableExams() {
            try {
                const response = await fetch(`/LessonContent/GetAvailableExams?lessonCode=${currentLessonCode}`);
                if (!response.ok) throw new Error();
                const exams = await response.json();
                const select = document.getElementById('examSelect');
                select.innerHTML = '<option value="">Choose an exam to link...</option>';
                exams.forEach(exam => {
                    const option = document.createElement('option');
                    option.value = exam.examCode;
                    option.textContent = `${exam.examName} (${exam.examDegree} marks, ${exam.examTimer})`;
                    option.dataset.examData = JSON.stringify(exam);
                    select.appendChild(option);
                });
            } catch {
                alert('Error loading available exams.');
            }
        }

        /* ================== EVENT HANDLERS ================== */

        function initializeEventHandlers() {
            document.getElementById('filterSubject').addEventListener('change', filtersChanged);
            document.getElementById('filterYear').addEventListener('change', filtersChanged);
            document.getElementById('resetFiltersBtn').addEventListener('click', () => {
                document.getElementById('filterSubject').value = '';
                document.getElementById('filterYear').value = '';
                filtersChanged();
            });
            document.getElementById('refreshFiltersBtn').addEventListener('click', async () => {
                await loadFilters();
                loadTeacherLessons();
            });

            document.getElementById('lessonSelect').addEventListener('change', function () {
                currentLessonCode = this.value ? parseInt(this.value) : null;
                if (currentLessonCode) {
                    disableActionButtons(false);
                    loadLessonContent(currentLessonCode);
                } else {
                    disableActionButtons(true);
                    setContentEmptyState('Choose a lesson from the dropdown to manage its content');
                }
            });

            document.getElementById('addVideoBtn').addEventListener('click', () =>
                new bootstrap.Modal(document.getElementById('addVideoModal')).show()
            );
            document.getElementById('addFileBtn').addEventListener('click', () =>
                new bootstrap.Modal(document.getElementById('addFileModal')).show()
            );
            document.getElementById('addExamBtn').addEventListener('click', () => {
                loadAvailableExams();
                new bootstrap.Modal(document.getElementById('addExamModal')).show();
            });

            document.getElementById('examSelect').addEventListener('change', function () {
                const examDetails = document.getElementById('examDetails');
                const examInfo = document.getElementById('examInfo');
                const linkBtn = document.getElementById('linkExamBtn');

                if (this.value) {
                    const examData = JSON.parse(this.selectedOptions[0].dataset.examData);
                    examInfo.innerHTML = `
                        <strong>${examData.examName}</strong><br>
                        Total Marks: ${examData.examDegree}<br>
                        Duration: ${examData.examTimer}<br>
                        Teacher: ${examData.teacherName}<br>
                        Type: ${examData.isOnline ? 'Online' : 'Offline'}
                    `;
                    examDetails.style.display = 'block';
                    linkBtn.disabled = false;
                } else {
                    examDetails.style.display = 'none';
                    linkBtn.disabled = true;
                }
            });

            document.getElementById('linkExamBtn').addEventListener('click', async () => {
                const examCode = parseInt(document.getElementById('examSelect').value);
                const currentContentCount = document.querySelectorAll('.content-item').length;
                try {
                    const response = await fetch('/LessonContent/LinkExamToLesson', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            examCode: examCode,
                            lessonCode: currentLessonCode,
                            sortOrder: currentContentCount + 1
                        })
                    });
                    if (!response.ok) throw new Error();
                    bootstrap.Modal.getInstance(document.getElementById('addExamModal')).hide();
                    showSuccessMessage('Exam linked successfully!');
                    await forceReloadContent();
                } catch {
                    alert('Error linking exam. Please try again.');
                }
            });

            document.getElementById('fileUpload').addEventListener('change', function () {
                const file = this.files[0];
                const preview = document.getElementById('filePreview');
                const fileInfo = document.getElementById('fileInfo');
                if (file) {
                    const sizeFormatted = formatFileSize(file.size);
                    fileInfo.textContent = `${file.name} (${sizeFormatted})`;
                    preview.style.display = 'block';
                    preview.className = file.size > 10 * 1024 * 1024
                        ? 'mt-3 alert alert-danger'
                        : 'mt-3 alert alert-info';
                    if (file.size > 10 * 1024 * 1024) {
                        fileInfo.innerHTML = `<i class="fas fa-exclamation-triangle me-2"></i>File too large! Maximum size is 10MB.`;
                    }
                } else {
                    preview.style.display = 'none';
                }
            });

            document.getElementById('addVideoForm').addEventListener('submit', handleVideoSubmit);
            document.getElementById('addFileForm').addEventListener('submit', handleFileSubmit);
        }

        /* ================== VIDEO & FILE SUBMISSION ================== */

        async function handleVideoSubmit(e) {
            e.preventDefault();
            const currentContentCount = document.querySelectorAll('.content-item').length;
            const formData = {
                lessonCode: currentLessonCode,
                displayName: document.getElementById('videoDisplayName').value,
                videoUrl: document.getElementById('videoUrl').value,
                videoProvider: parseInt(document.getElementById('videoProvider').value),
                sortOrder: currentContentCount + 1,
                duration: document.getElementById('videoDuration').value || null
            };
            try {
                const response = await fetch('/LessonContent/AddVideo', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });
                if (!response.ok) throw new Error(await response.text());
                bootstrap.Modal.getInstance(document.getElementById('addVideoModal')).hide();
                e.target.reset();
                showSuccessMessage('Video added successfully!');
                await forceReloadContent();
            } catch (err) {
                alert(`Error adding video: ${err.message}`);
            }
        }

        async function handleFileSubmit(e) {
            e.preventDefault();
            const fileInput = document.getElementById('fileUpload');
            const file = fileInput.files[0];
            if (!file || file.size > 10 * 1024 * 1024) {
                alert('Please select a file under 10MB');
                return;
            }
            const currentContentCount = document.querySelectorAll('.content-item').length;
            const formData = new FormData();
            formData.append('lessonCode', currentLessonCode);
            formData.append('displayName', document.getElementById('fileDisplayName').value);
            formData.append('sortOrder', currentContentCount + 1);
            formData.append('file', file);
            try {
                const response = await fetch('/LessonContent/AddFile', { method: 'POST', body: formData });
                if (!response.ok) throw new Error(await response.text());
                bootstrap.Modal.getInstance(document.getElementById('addFileModal')).hide();
                e.target.reset();
                document.getElementById('filePreview').style.display = 'none';
                showSuccessMessage('File uploaded successfully!');
                await forceReloadContent();
            } catch (err) {
                alert(`Error uploading file: ${err.message}`);
            }
        }

        /* ================== UTILITIES ================== */

        function showSuccessMessage(message) {
            document.querySelectorAll('.alert-success.position-fixed').forEach(x => x.remove());
            const successDiv = document.createElement('div');
            successDiv.className = 'alert alert-success position-fixed';
            successDiv.style.cssText = 'top:20px;right:20px;z-index:9999;max-width:400px;';
            successDiv.innerHTML = `<i class="fas fa-check-circle me-2"></i>${message}`;
            document.body.appendChild(successDiv);
            setTimeout(() => successDiv.remove(), 3000);
        }

        function formatFileSize(bytes) {
            const sizes = ['B', 'KB', 'MB', 'GB'];
            if (bytes === 0) return '0 B';
            const i = Math.floor(Math.log(bytes) / Math.log(1024));
            return (bytes / Math.pow(1024, i)).toFixed(2) + ' ' + sizes[i];
        }

        console.log('✅ Lesson Content Management (Year filter fixed) loaded UTC ' + new Date().toISOString());
    </script>
</body>
</html>