@using Microsoft.Extensions.Localization
@inject IStringLocalizerFactory LocalizerFactory
@{
    var Localizer = LocalizerFactory.Create("Reports", System.Reflection.Assembly.GetExecutingAssembly().GetName().Name);
    ViewData["Title"] = Localizer["MyClassesReport"];
}

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12 text-center mb-4">
            <h2><i class="fas fa-calendar-alt"></i> @Localizer["MyClassesReport"]</h2>
            <p class="text-muted">@Localizer["MyClassesReportSubtitle"]</p>
        </div>
    </div>

    <!-- Filter Panel -->
    <div class="card mb-4">
        <div class="card-body">
            <form method="get" asp-action="MyClassesReport">
                <div class="row align-items-end">
                    <div class="col-md-2">
                        <label for="startDate" class="form-label">@Localizer["StartDate"]</label>
                        <input type="date" name="startDate" id="startDate" class="form-control"
                               value="@(Model.StartDate?.ToString("yyyy-MM-dd"))" />
                    </div>

                    <div class="col-md-2">
                        <label for="endDate" class="form-label">@Localizer["EndDate"]</label>
                        <input type="date" name="endDate" id="endDate" class="form-control"
                               value="@(Model.EndDate?.ToString("yyyy-MM-dd"))" />
                    </div>

                    <div class="col-md-3">
                        <label for="subjectCode" class="form-label">@Localizer["Subject"]</label>
                        <select name="subjectCode" id="subjectCode" class="form-select">
                            <option value="">@Localizer["AllSubjects"]</option>
                            @if (ViewBag.Subjects != null)
                            {
                                @foreach (var subject in ViewBag.Subjects as List<Subject>)
                                {
                                    <option value="@subject.SubjectCode" selected="@(Model.SubjectCode == subject.SubjectCode)">
                                        @subject.SubjectName
                                    </option>
                                }
                            }
                        </select>
                    </div>

                    <div class="col-md-2">
                        <label for="pageSize" class="form-label">@Localizer["PerPage"]</label>
                        <select name="pageSize" id="pageSize" class="form-select">
                            <option value="20" selected="@(Model.PageSize == 20)">20</option>
                            <option value="50" selected="@(Model.PageSize == 50)">50</option>
                            <option value="100" selected="@(Model.PageSize == 100)">100</option>
                        </select>
                    </div>

                    <div class="col-md-3">
                        <button type="submit" class="btn btn-primary me-2">
                            <i class="fas fa-search"></i> @Localizer["Filter"]
                        </button>
                        <a href="@Url.Action("MyClassesReport")" class="btn btn-secondary">
                            <i class="fas fa-times"></i> @Localizer["Clear"]
                        </a>
                    </div>
                </div>

                <!-- Quick Date Range Buttons -->
                <div class="row mt-3">
                    <div class="col-12">
                        <small class="text-muted">@Localizer["QuickRanges"]</small>
                        <button type="button" class="btn btn-sm btn-outline-primary ms-2" onclick="setDateRange('week')">@Localizer["ThisWeek"]</button>
                        <button type="button" class="btn btn-sm btn-outline-primary ms-1" onclick="setDateRange('month')">@Localizer["ThisMonth"]</button>
                        <button type="button" class="btn btn-sm btn-outline-primary ms-1" onclick="setDateRange('lastMonth')">@Localizer["LastMonth"]</button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Summary Cards -->
    @if (Model.Classes.Any())
    {
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card text-center border-primary">
                    <div class="card-body">
                        <div class="text-primary mb-2">
                            <i class="fas fa-calendar-check fa-2x"></i>
                        </div>
                        <h5 class="card-title">@Localizer["TotalClasses"]</h5>
                        <p class="text-primary fs-4">@Model.TotalCount</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center border-info">
                    <div class="card-body">
                        <div class="text-info mb-2">
                            <i class="fas fa-users fa-2x"></i>
                        </div>
                        <h5 class="card-title">@Localizer["AvgStudents"]</h5>
                        <p class="text-info fs-4">@(Model.Classes.Any() ? Model.Classes.Average(c => c.ScheduledStudents).ToString("F1") : "0")</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center border-warning">
                    <div class="card-body">
                        <div class="text-warning mb-2">
                            <i class="fas fa-percentage fa-2x"></i>
                        </div>
                        <h5 class="card-title">@Localizer["AvgAttendance"]</h5>
                        <p class="text-warning fs-4">
                            @{
                                var avgAttendance = Model.Classes.Any() && Model.Classes.Sum(c => c.ScheduledStudents) > 0 ?
                                (decimal)Model.Classes.Sum(c => c.AttendedStudents) / Model.Classes.Sum(c => c.ScheduledStudents) * 100 : 0;
                            }
                            @avgAttendance.ToString("F1")%
                        </p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center border-success">
                    <div class="card-body">
                        <div class="text-success mb-2">
                            <i class="fas fa-dollar-sign fa-2x"></i>
                        </div>
                        <h5 class="card-title">@Localizer["TotalEarnings"]</h5>
                        <p class="text-success fs-4">@Localizer["CurrencySymbol"]@Model.Classes.Sum(c => c.TeacherAmount).ToString("N2")</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Classes by Date -->
        @foreach (var groupedClasses in Model.Classes.GroupBy(c => c.ClassDate?.ToString("yyyy-MM-dd") ?? Localizer["NoDate"]))
        {
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        @if (DateTime.TryParse(groupedClasses.Key, out var date))
                        {
                            <i class="fas fa-calendar-day"></i> @date.ToString("MMMM dd, yyyy") <small class="text-muted">(@date.ToString("dddd"))</small>
                        }
                        else
                        {
                            <i class="fas fa-calendar-times"></i> @groupedClasses.Key
                        }
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        @foreach (var cls in groupedClasses.OrderBy(c => c.ClassStartTime))
                        {
                            var attendanceRate = cls.ScheduledStudents > 0 ? (decimal)cls.AttendedStudents / cls.ScheduledStudents * 100 : 0;
                            var cardClass = "card h-100 ";
                            var badgeClass = "badge ";

                            if (attendanceRate >= 80)
                            {
                                cardClass += "border-success";
                                badgeClass += "bg-success";
                            }
                            else if (attendanceRate >= 60)
                            {
                                cardClass += "border-warning";
                                badgeClass += "bg-warning text-dark";
                            }
                            else
                            {
                                cardClass += "border-danger";
                                badgeClass += "bg-danger";
                            }

                            <div class="col-md-6 col-lg-4 mb-3">
                                <div class="@cardClass">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0">@cls.ClassName</h6>
                                        <span class="@badgeClass">@attendanceRate.ToString("F0")%</span>
                                    </div>
                                    <div class="card-body">
                                        <div class="mb-2">
                                            <i class="fas fa-clock text-primary"></i>
                                            <strong>@Localizer["Time"]:</strong>
                                            @cls.ClassStartTime?.ToString("HH:mm") - @cls.ClassEndTime?.ToString("HH:mm")
                                        </div>
                                        <div class="mb-2">
                                            <i class="fas fa-book text-info"></i>
                                            <strong>@Localizer["Subject"]:</strong> @cls.SubjectName
                                        </div>
                                        <div class="mb-2">
                                            <i class="fas fa-building text-secondary"></i>
                                            <strong>@Localizer["Branch"]:</strong> @cls.BranchName
                                        </div>
                                        <div class="mb-2">
                                            <i class="fas fa-door-open text-warning"></i>
                                            <strong>@Localizer["Hall"]:</strong> @cls.HallName
                                        </div>
                                        <div class="mb-2">
                                            <i class="fas fa-users text-info"></i>
                                            <strong>@Localizer["Students"]:</strong>
                                            @cls.AttendedStudents/@cls.ScheduledStudents
                                        </div>
                                        <div class="mb-3">
                                            <i class="fas fa-dollar-sign text-success"></i>
                                            <strong>@Localizer["Earning"]:</strong>
                                            <span class="text-success">@Localizer["CurrencySymbol"]@cls.TeacherAmount.ToString("N2")</span>
                                        </div>
                                    </div>
                                    <div class="card-footer">
                                        <div class="btn-group w-100" role="group">
                                            <button type="button" class="btn btn-outline-primary btn-sm"
                                                    onclick="viewClassDetails(@cls.ClassCode)">
                                                <i class="fas fa-eye"></i> @Localizer["Details"]
                                            </button>
                                            <button type="button" class="btn btn-outline-success btn-sm"
                                                    onclick="viewAttendance(@cls.ClassCode)">
                                                <i class="fas fa-list-check"></i> @Localizer["Attendance"]
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }

        <!-- Pagination -->
        @if (Model.TotalPages > 1)
        {
            <nav aria-label="Page navigation" class="mt-4">
                <ul class="pagination justify-content-center">
                    @if (Model.HasPreviousPage)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("MyClassesReport", new {
                                page = Model.CurrentPage - 1,
                                startDate = Model.StartDate?.ToString("yyyy-MM-dd"),
                                endDate = Model.EndDate?.ToString("yyyy-MM-dd"),
                                subjectCode = Model.SubjectCode,
                                pageSize = Model.PageSize
                            })">
                                <i class="fas fa-chevron-left"></i> @Localizer["Previous"]
                            </a>
                        </li>
                    }

                    @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                    {
                        var activeClass = i == Model.CurrentPage ? "active" : "";
                        <li class="page-item @activeClass">
                            <a class="page-link" href="@Url.Action("MyClassesReport", new {
                                page = i,
                                startDate = Model.StartDate?.ToString("yyyy-MM-dd"),
                                endDate = Model.EndDate?.ToString("yyyy-MM-dd"),
                                subjectCode = Model.SubjectCode,
                                pageSize = Model.PageSize
                            })">@i</a>
                        </li>
                    }

                    @if (Model.HasNextPage)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("MyClassesReport", new {
                                page = Model.CurrentPage + 1,
                                startDate = Model.StartDate?.ToString("yyyy-MM-dd"),
                                endDate = Model.EndDate?.ToString("yyyy-MM-dd"),
                                subjectCode = Model.SubjectCode,
                                pageSize = Model.PageSize
                            })">
                                @Localizer["Next"] <i class="fas fa-chevron-right"></i>
                            </a>
                        </li>
                    }
                </ul>
            </nav>
        }

        <!-- Export Options -->
        <div class="mt-4 text-center">
            <button type="button" class="btn btn-info me-2" onclick="exportMyClassesPDF()">
                <i class="fas fa-file-pdf"></i> @Localizer["ExportPDF"]
            </button>
            <button type="button" class="btn btn-success" onclick="exportMyClassesExcel()">
                <i class="fas fa-file-excel"></i> @Localizer["ExportExcel"]
            </button>
        </div>
    }
    else
    {
        <div class="card text-center py-5">
            <div class="card-body">
                <div class="text-muted mb-3">
                    <i class="fas fa-calendar-times fa-3x"></i>
                </div>
                <h4 class="text-muted">@Localizer["NoClassesFound"]</h4>
                <p class="text-muted">@Localizer["NoClassesHint"]</p>
                <a href="@Url.Action("MyClassesReport")" class="btn btn-primary">
                    <i class="fas fa-refresh"></i> @Localizer["ResetFilters"]
                </a>
            </div>
        </div>
    }
</div>

<!-- Class Details Modal -->
<div class="modal fade" id="classDetailsModal" tabindex="-1" aria-labelledby="classDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="classDetailsModalLabel">@Localizer["ClassDetails"]</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="@Localizer["Close"]"></button>
            </div>
            <div class="modal-body" id="classDetailsBody">
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">@Localizer["Loading"]</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
    function viewClassDetails(classCode) {
        $('#classDetailsModal').modal('show');

        // For now, show basic info - you can implement actual AJAX call later
        $('#classDetailsBody').html(`
            <div class="alert alert-info">
                <h6>@Localizer["ClassCode"]: ${classCode}</h6>
                <p>@Localizer["ClassDetailsInfo"]</p>
                <p>@Localizer["ClassDetailsInclude"]</p>
                <ul>
                    <li>@Localizer["ClassDetailsStudentList"]</li>
                    <li>@Localizer["ClassDetailsLessonPlan"]</li>
                    <li>@Localizer["ClassDetailsAssignments"]</li>
                    <li>@Localizer["ClassDetailsMetrics"]</li>
                </ul>
            </div>
        `);

        // TODO: Implement actual AJAX call
        /*
        $.ajax({
            url: '@Url.Action("GetClassDetails", "Reports")',
            type: 'GET',
            data: { classCode: classCode },
            success: function(data) {
                $('#classDetailsBody').html(data);
            },
            error: function() {
                $('#classDetailsBody').html('<div class="alert alert-danger">@Localizer["ErrorLoadingClassDetails"]</div>');
            }
        });
        */
    }

    function viewAttendance(classCode) {
        window.location.href = '@Url.Action("ClassAttendanceReport", "Reports")?classCode=' + classCode;
    }

    function exportMyClassesPDF() {
        const params = new URLSearchParams({
            format: 'pdf',
            startDate: '@Model.StartDate?.ToString("yyyy-MM-dd")',
            endDate: '@Model.EndDate?.ToString("yyyy-MM-dd")',
            subjectCode: '@Model.SubjectCode'
        });

        window.location.href = '@Url.Action("ExportMyClasses", "Reports")?' + params.toString();
    }

    function exportMyClassesExcel() {
        const params = new URLSearchParams({
            format: 'excel',
            startDate: '@Model.StartDate?.ToString("yyyy-MM-dd")',
            endDate: '@Model.EndDate?.ToString("yyyy-MM-dd")',
            subjectCode: '@Model.SubjectCode'
        });

        window.location.href = '@Url.Action("ExportMyClasses", "Reports")?' + params.toString();
    }

    // Quick date range functions
    function setDateRange(range) {
        const today = new Date();
        let startDate, endDate;

        switch(range) {
            case 'week':
                const weekStart = new Date(today.setDate(today.getDate() - today.getDay()));
                startDate = weekStart.toISOString().split('T')[0];
                endDate = new Date().toISOString().split('T')[0];
                break;
            case 'month':
                startDate = new Date(today.getFullYear(), today.getMonth(), 1).toISOString().split('T')[0];
                endDate = new Date().toISOString().split('T')[0];
                break;
            case 'lastMonth':
                const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);
                startDate = lastMonth.toISOString().split('T')[0];
                endDate = new Date(today.getFullYear(), today.getMonth(), 0).toISOString().split('T')[0];
                break;
        }

        document.getElementById('startDate').value = startDate;
        document.getElementById('endDate').value = endDate;
    }
</script>