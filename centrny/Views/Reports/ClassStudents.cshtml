@model ClassStudentsViewModel
@{
    ViewData["Title"] = $"Students - {Model.ClassName}";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="class-students-container">
    <!-- Compact Class Header -->
    <div class="class-header">
        <div class="header-content">
            <div class="class-info">
                <h1 class="class-title">
                    <i class="fas fa-users"></i>
                    @Model.ClassName
                </h1>
                <div class="class-meta">
                    <span class="meta-item">
                        <i class="fas fa-calendar"></i>
                        @Model.ClassDate
                    </span>
                    <span class="meta-item">
                        <i class="fas fa-clock"></i>
                        @Model.ClassStartTime - @Model.ClassEndTime
                    </span>
                    <span class="meta-item">
                        <i class="fas fa-chalkboard-teacher"></i>
                        @Model.TeacherName
                    </span>
                    <span class="meta-item">
                        <i class="fas fa-book"></i>
                        @Model.SubjectName
                    </span>
                </div>
            </div>
            <div class="header-actions">
                <button class="btn-close" onclick="window.close()">
                    <i class="fas fa-times"></i>
                    Close
                </button>
            </div>
        </div>
    </div>

    <!-- Compact Stats Grid with Financial Data -->
    <div class="stats-container">
        <div class="stat-card stat-enrolled">
            <div class="stat-icon">
                <i class="fas fa-users"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">@Model.EnrolledCount</div>
                <div class="stat-label">Enrolled</div>
            </div>
        </div>

        <div class="stat-card stat-present">
            <div class="stat-icon">
                <i class="fas fa-user-check"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">@Model.PresentCount</div>
                <div class="stat-label">Present</div>
            </div>
        </div>

        <div class="stat-card stat-absent">
            <div class="stat-icon">
                <i class="fas fa-user-times"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">@Model.AbsentCount</div>
                <div class="stat-label">Absent</div>
            </div>
        </div>

        <div class="stat-card stat-rate">
            <div class="stat-icon">
                <i class="fas fa-percentage"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">@Model.AttendanceRate%</div>
                <div class="stat-label">Rate</div>
            </div>
        </div>

        @if (!ViewBag.IsTeacher)
        {
            <!-- Center user sees both center and teacher amounts -->
            <div class="stat-card stat-center-amount">
                <div class="stat-icon">
                    <i class="fas fa-building"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">$@((Model.CenterAmount ?? 0).ToString("N0"))</div>
                    <div class="stat-label">Center Revenue</div>
                </div>
            </div>

            <div class="stat-card stat-teacher-amount">
                <div class="stat-icon">
                    <i class="fas fa-chalkboard-teacher"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">$@((Model.TeacherAmount ?? 0).ToString("N0"))</div>
                    <div class="stat-label">Teacher Payment</div>
                </div>
            </div>
        }
        else
        {
            <!-- Teacher user sees only teacher amount -->
            <div class="stat-card stat-teacher-amount">
                <div class="stat-icon">
                    <i class="fas fa-money-bill-wave"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">$@((Model.TeacherAmount ?? 0).ToString("N0"))</div>
                    <div class="stat-label">My Earnings</div>
                </div>
            </div>

            <div class="stat-card stat-total-amount">
                <div class="stat-icon">
                    <i class="fas fa-calculator"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">$@(((Model.TotalAmount ?? 0)).ToString("N0"))</div>
                    <div class="stat-label">Class Revenue</div>
                </div>
            </div>
        }
    </div>

    <!-- Compact Actions Panel -->
    <div class="actions-panel">
        <div class="actions-header">
            <h6><i class="fas fa-tasks"></i> Quick Actions</h6>
            <span class="selection-info">
                <span id="selectionCount">0</span> selected
            </span>
        </div>
        <div class="actions-buttons">
            <button class="action-btn btn-success" onclick="markAllPresent()">
                <i class="fas fa-check-circle"></i>
                All Present
            </button>
            <button class="action-btn btn-primary" onclick="markSelectedPresent()">
                <i class="fas fa-check"></i>
                Mark Present
            </button>
            <button class="action-btn btn-warning" onclick="markSelectedAbsent()">
                <i class="fas fa-times"></i>
                Mark Absent
            </button>
            @if (Model.AbsentCount > 0)
            {
                <button class="action-btn btn-info" onclick="contactAbsentParents()">
                    <i class="fas fa-phone"></i>
                    Contact Parents
                </button>
            }
            <button class="action-btn btn-secondary" onclick="clearAllSelections()">
                <i class="fas fa-eraser"></i>
                Clear
            </button>
        </div>
    </div>

    <!-- Compact Students Table -->
    <div class="students-section">
        <div class="section-header">
            <h6><i class="fas fa-list"></i> Student Attendance (@Model.Students.Count students)</h6>
        </div>

        @if (Model.Students.Any())
        {
            <div class="table-container">
                <table class="students-table">
                    <thead>
                        <tr>
                            <th width="50px">
                                <input type="checkbox" class="checkbox" id="selectAll" onchange="toggleAllStudents(this.checked)">
                            </th>
                            <th>Student</th>
                            <th>Contact</th>
                            <th>Parent</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var student in Model.Students)
                        {
                            <tr class="student-row @(student.IsPresent ? "row-present" : "row-absent")"
                                data-student-code="@student.StudentCode">
                                <td>
                                    <input type="checkbox" class="checkbox student-checkbox"
                                           data-student="@student.StudentCode" onchange="updateSelectionCount()">
                                </td>
                                <td>
                                    <div class="student-info">
                                        <button class="attendance-btn @(student.IsPresent ? "btn-present" : "btn-absent")"
                                                onclick="toggleStudentAttendance(@Model.ClassCode, @student.StudentCode, @(!student.IsPresent ? "true" : "false"))"
                                                title="Click to toggle attendance">
                                            <i class="fas fa-@(student.IsPresent ? "check" : "times")"></i>
                                        </button>
                                        <span class="student-name">@student.StudentName</span>
                                    </div>
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(student.StudentPhone))
                                    {
                                        <a href="tel:@student.StudentPhone" class="contact-link">
                                            <i class="fas fa-phone"></i>
                                            @student.StudentPhone
                                        </a>
                                    }
                                    else
                                    {
                                        <span class="no-contact">No phone</span>
                                    }
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(student.StudentParentPhone))
                                    {
                                        <a href="tel:@student.StudentParentPhone" class="contact-link">
                                            <i class="fas fa-phone"></i>
                                            @student.StudentParentPhone
                                        </a>
                                    }
                                    else
                                    {
                                        <span class="no-contact">No phone</span>
                                    }
                                </td>
                                <td>
                                    <span class="status-badge @(student.IsPresent ? "status-present" : "status-absent")">
                                        @(student.IsPresent ? "Present" : "Absent")
                                    </span>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        @if (!student.IsPresent)
                                        {
                                            <button class="mini-btn btn-warning"
                                                    onclick="callParent('@student.StudentName', '@student.StudentParentPhone')"
                                                    title="Call Parent">
                                                <i class="fas fa-phone"></i>
                                            </button>
                                            <button class="mini-btn btn-info"
                                                    onclick="sendSmsToParent('@student.StudentName', '@student.StudentParentPhone')"
                                                    title="Send SMS">
                                                <i class="fas fa-sms"></i>
                                            </button>
                                        }
                                        <button class="mini-btn btn-secondary"
                                                onclick="viewStudentDetails(@student.StudentCode)"
                                                title="View Details">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="empty-state">
                <i class="fas fa-users-slash"></i>
                <h5>No Students Enrolled</h5>
                <p>There are no students enrolled in this class yet.</p>
            </div>
        }
    </div>
</div>

<!-- SMS Modal -->
<div class="modal fade" id="smsModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Send SMS to Parents</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <textarea class="form-control" id="smsMessage" rows="3"
                          placeholder="Enter your message...">Dear Parent, your child was absent from today's @Model.ClassName class. Please contact the school for more information.</textarea>
                <small class="text-muted">SMS will be sent to <span id="smsRecipientCount">0</span> parent(s)</small>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="sendSmsBtn">
                    <i class="fas fa-paper-plane"></i> Send SMS
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    :root {
        --primary: #6366f1;
        --success: #10b981;
        --danger: #ef4444;
        --warning: #f59e0b;
        --info: #3b82f6;
        --secondary: #64748b;
        --gray-50: #f8fafc;
        --gray-100: #f1f5f9;
        --gray-200: #e2e8f0;
        --gray-300: #cbd5e1;
        --gray-400: #94a3b8;
        --gray-500: #64748b;
        --gray-600: #475569;
        --gray-700: #334155;
        --gray-800: #1e293b;
        --gray-900: #0f172a;
        --white: #ffffff;
        --shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);
        --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1);
        --radius: 8px;
    }

    body {
        background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
        color: var(--gray-900);
        line-height: 1.5;
    }

    .class-students-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 16px;
        display: grid;
        gap: 16px;
    }

    /* Compact Header */
    .class-header {
        background: var(--white);
        border-radius: var(--radius);
        box-shadow: var(--shadow-md);
        padding: 20px;
        border: 1px solid var(--gray-200);
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 20px;
    }

    .class-title {
        font-size: 20px;
        font-weight: 700;
        color: var(--gray-900);
        margin-bottom: 12px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

        .class-title i {
            color: var(--primary);
        }

    .class-meta {
        display: flex;
        flex-wrap: wrap;
        gap: 12px;
    }

    .meta-item {
        display: flex;
        align-items: center;
        gap: 6px;
        padding: 6px 12px;
        background: var(--gray-100);
        border-radius: 6px;
        font-size: 13px;
        color: var(--gray-700);
    }

        .meta-item i {
            color: var(--gray-500);
            font-size: 12px;
        }

    .btn-close {
        padding: 8px 16px;
        border: 1px solid var(--gray-300);
        border-radius: 6px;
        background: var(--white);
        color: var(--gray-700);
        cursor: pointer;
        font-size: 13px;
        display: flex;
        align-items: center;
        gap: 6px;
        transition: all 0.2s;
    }

        .btn-close:hover {
            background: var(--gray-100);
            border-color: var(--gray-400);
        }

    /* Compact Stats with Financial Data */
    .stats-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
        gap: 12px;
    }

    .stat-card {
        background: var(--white);
        border-radius: var(--radius);
        padding: 16px;
        box-shadow: var(--shadow);
        border: 1px solid var(--gray-200);
        display: flex;
        align-items: center;
        gap: 12px;
        transition: transform 0.2s;
    }

        .stat-card:hover {
            transform: translateY(-2px);
        }

    .stat-icon {
        width: 40px;
        height: 40px;
        border-radius: 6px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--white);
        font-size: 18px;
    }

    .stat-enrolled .stat-icon {
        background: var(--info);
    }

    .stat-present .stat-icon {
        background: var(--success);
    }

    .stat-absent .stat-icon {
        background: var(--danger);
    }

    .stat-rate .stat-icon {
        background: var(--primary);
    }

    .stat-center-amount .stat-icon {
        background: #8b5cf6;
    }

    .stat-teacher-amount .stat-icon {
        background: #f59e0b;
    }

    .stat-total-amount .stat-icon {
        background: #06b6d4;
    }

    .stat-number {
        font-size: 20px;
        font-weight: 700;
        color: var(--gray-900);
        line-height: 1;
    }

    .stat-label {
        font-size: 12px;
        color: var(--gray-600);
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    /* Compact Actions Panel */
    .actions-panel {
        background: var(--white);
        border-radius: var(--radius);
        box-shadow: var(--shadow);
        border: 1px solid var(--gray-200);
        padding: 16px;
    }

    .actions-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 12px;
        padding-bottom: 12px;
        border-bottom: 1px solid var(--gray-200);
    }

        .actions-header h6 {
            margin: 0;
            font-size: 14px;
            font-weight: 600;
            color: var(--gray-900);
            display: flex;
            align-items: center;
            gap: 8px;
        }

    .selection-info {
        font-size: 13px;
        color: var(--gray-600);
    }

    .actions-buttons {
        display: flex;
        gap: 8px;
        flex-wrap: wrap;
    }

    .action-btn {
        padding: 8px 16px;
        border: none;
        border-radius: 6px;
        font-size: 13px;
        font-weight: 500;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 6px;
        transition: all 0.2s;
        color: var(--white);
    }

        .action-btn:hover {
            transform: translateY(-1px);
            box-shadow: var(--shadow-md);
        }

    .btn-success {
        background: var(--success);
    }

    .btn-primary {
        background: var(--primary);
    }

    .btn-warning {
        background: var(--warning);
    }

    .btn-info {
        background: var(--info);
    }

    .btn-secondary {
        background: var(--secondary);
    }

    /* Students Section */
    .students-section {
        background: var(--white);
        border-radius: var(--radius);
        box-shadow: var(--shadow);
        border: 1px solid var(--gray-200);
        overflow: hidden;
    }

    .section-header {
        background: var(--gray-50);
        padding: 16px 20px;
        border-bottom: 1px solid var(--gray-200);
    }

        .section-header h6 {
            margin: 0;
            font-size: 14px;
            font-weight: 600;
            color: var(--gray-900);
            display: flex;
            align-items: center;
            gap: 8px;
        }

    /* Compact Table */
    .table-container {
        overflow-x: auto;
    }

    .students-table {
        width: 100%;
        border-collapse: collapse;
        font-size: 14px;
    }

        .students-table th {
            background: var(--gray-800);
            color: var(--white);
            padding: 12px 16px;
            text-align: left;
            font-weight: 600;
            font-size: 13px;
            border: none;
        }

        .students-table td {
            padding: 12px 16px;
            border-bottom: 1px solid var(--gray-200);
            vertical-align: middle;
        }

    .student-row {
        transition: background-color 0.2s;
    }

        .student-row:hover {
            background: var(--gray-50);
        }

    .row-present {
        background: rgba(16, 185, 129, 0.05);
    }

    .row-absent {
        background: rgba(239, 68, 68, 0.05);
    }

    .checkbox {
        width: 16px;
        height: 16px;
        border-radius: 4px;
    }

    .student-info {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .attendance-btn {
        width: 32px;
        height: 32px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 14px;
        color: var(--white);
        transition: all 0.2s;
    }

        .attendance-btn:hover {
            transform: scale(1.1);
        }

    .btn-present {
        background: var(--success);
    }

    .btn-absent {
        background: var(--danger);
    }

    .student-name {
        font-weight: 600;
        color: var(--gray-900);
    }

    .contact-link {
        color: var(--primary);
        text-decoration: none;
        font-size: 13px;
        display: flex;
        align-items: center;
        gap: 6px;
    }

        .contact-link:hover {
            text-decoration: underline;
        }

    .no-contact {
        color: var(--gray-400);
        font-size: 13px;
        font-style: italic;
    }

    .status-badge {
        padding: 4px 12px;
        border-radius: 16px;
        font-size: 12px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-present {
        background: rgba(16, 185, 129, 0.1);
        color: var(--success);
        border: 1px solid rgba(16, 185, 129, 0.2);
    }

    .status-absent {
        background: rgba(239, 68, 68, 0.1);
        color: var(--danger);
        border: 1px solid rgba(239, 68, 68, 0.2);
    }

    .action-buttons {
        display: flex;
        gap: 6px;
    }

    .mini-btn {
        width: 28px;
        height: 28px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 12px;
        color: var(--white);
        transition: all 0.2s;
    }

        .mini-btn:hover {
            transform: scale(1.1);
        }

    /* Empty State */
    .empty-state {
        padding: 60px 40px;
        text-align: center;
        color: var(--gray-500);
    }

        .empty-state i {
            font-size: 48px;
            margin-bottom: 16px;
            opacity: 0.5;
        }

        .empty-state h5 {
            margin-bottom: 8px;
            color: var(--gray-700);
        }

    /* Responsive */
    @@media (max-width: 768px) {
        .class-students-container

    {
        padding: 12px;
        gap: 12px;
    }

    .header-content {
        flex-direction: column;
        gap: 12px;
    }

    .class-meta {
        flex-direction: column;
        gap: 8px;
    }

    .stats-container {
        grid-template-columns: repeat(2, 1fr);
        gap: 8px;
    }

    .actions-buttons {
        flex-direction: column;
    }

    .students-table {
        font-size: 13px;
    }

        .students-table th,
        .students-table td {
            padding: 8px 12px;
        }

    }

    @@media (max-width: 480px) {
        .stats-container

    {
        grid-template-columns: 1fr;
    }

    }
</style>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    // Global variables
    const classCode = @Model.ClassCode;
    let selectedStudents = new Set();

    // Initialize page
    $(document).ready(function() {
        updateSelectionCount();
    });

    // Toggle individual student attendance
    function toggleStudentAttendance(classCode, studentCode, isPresent) {
        $.ajax({
            url: '/Reports/MarkAttendance',
            type: 'POST',
            data: {
                classCode: classCode,
                studentCode: studentCode,
                isPresent: isPresent
            },
            success: function(data) {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Error updating attendance: ' + data.error);
                }
            },
            error: function() {
                alert('Failed to update attendance. Please try again.');
            }
        });
    }

    // Toggle all students selection
    function toggleAllStudents(checked) {
        $('.student-checkbox').prop('checked', checked);
        if (checked) {
            $('.student-checkbox').each(function() {
                selectedStudents.add($(this).data('student'));
            });
        } else {
            selectedStudents.clear();
        }
        updateSelectionCount();
    }

    // Update selection count
    function updateSelectionCount() {
        selectedStudents.clear();
        $('.student-checkbox:checked').each(function() {
            selectedStudents.add($(this).data('student'));
        });

        $('#selectionCount').text(selectedStudents.size);

        const totalCheckboxes = $('.student-checkbox').length;
        const checkedCheckboxes = $('.student-checkbox:checked').length;

        if (checkedCheckboxes === 0) {
            $('#selectAll').prop('indeterminate', false).prop('checked', false);
        } else if (checkedCheckboxes === totalCheckboxes) {
            $('#selectAll').prop('indeterminate', false).prop('checked', true);
        } else {
            $('#selectAll').prop('indeterminate', true);
        }
    }

    // Mark all students present
    function markAllPresent() {
        const studentCodes = [];
        $('.student-checkbox').each(function() {
            studentCodes.push($(this).data('student'));
        });
        bulkMarkAttendance(studentCodes, true);
    }

    // Mark selected students present
    function markSelectedPresent() {
        if (selectedStudents.size === 0) {
            alert('Please select students first.');
            return;
        }
        const studentCodes = Array.from(selectedStudents);
        bulkMarkAttendance(studentCodes, true);
    }

    // Mark selected students absent
    function markSelectedAbsent() {
        if (selectedStudents.size === 0) {
            alert('Please select students first.');
            return;
        }
        const studentCodes = Array.from(selectedStudents);
        bulkMarkAttendance(studentCodes, false);
    }

    // Bulk mark attendance
    function bulkMarkAttendance(studentCodes, isPresent) {
        $.ajax({
            url: '/Reports/BulkMarkAttendance',
            type: 'POST',
            data: {
                classCode: classCode,
                studentCodes: studentCodes,
                isPresent: isPresent
            },
            success: function(data) {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Error updating attendance: ' + data.error);
                }
            },
            error: function() {
                alert('Failed to update attendance. Please try again.');
            }
        });
    }

    // Contact absent parents
    function contactAbsentParents() {
        const absentStudents = [];
        $('.row-absent .student-checkbox').each(function() {
            absentStudents.push($(this).data('student'));
        });

        if (absentStudents.length === 0) {
            alert('No absent students found.');
            return;
        }

        $('#smsRecipientCount').text(absentStudents.length);
        $('#smsModal').modal('show');
        window.currentAbsentStudents = absentStudents;
    }

    // Send SMS
    $('#sendSmsBtn').on('click', function() {
        const message = $('#smsMessage').val().trim();
        if (!message) {
            alert('Please enter a message.');
            return;
        }

        const studentCodes = window.currentAbsentStudents || [];

        $.ajax({
            url: '/Reports/SendSmsToParents',
            type: 'POST',
            data: {
                studentCodes: studentCodes,
                message: message
            },
            success: function(data) {
                $('#smsModal').modal('hide');
                if (data.success) {
                    alert('SMS sent successfully to ' + data.sentCount + ' parents.');
                } else {
                    alert('Error sending SMS: ' + data.error);
                }
            },
            error: function() {
                alert('Failed to send SMS. Please try again.');
            }
        });
    });

    // Clear all selections
    function clearAllSelections() {
        selectedStudents.clear();
        $('.student-checkbox').prop('checked', false);
        $('#selectAll').prop('checked', false);
        updateSelectionCount();
    }

    // Contact functions
    function callParent(studentName, parentPhone) {
        if (!parentPhone) {
            alert('No parent phone number available for ' + studentName);
            return;
        }
        window.location.href = `tel:${parentPhone}`;
    }

    function sendSmsToParent(studentName, parentPhone) {
        if (!parentPhone) {
            alert('No parent phone number available for ' + studentName);
            return;
        }
        const message = encodeURIComponent(`Dear Parent, ${studentName} was absent from today's class. Please contact the school for more information.`);
        window.location.href = `sms:${parentPhone}?body=${message}`;
    }

    function viewStudentDetails(studentCode) {
        window.open(`/Students/Details/${studentCode}`, '_blank');
    }